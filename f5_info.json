{"internal_data_groups": [{"records": [{"data": "", "name": "64.12.96.0/19"}, {"data": "", "name": "195.93.16.0/20"}, {"data": "", "name": "195.93.48.0/22"}, {"data": "", "name": "195.93.64.0/19"}, {"data": "", "name": "195.93.96.0/19"}, {"data": "", "name": "198.81.0.0/22"}, {"data": "", "name": "198.81.8.0/23"}, {"data": "", "name": "198.81.16.0/20"}, {"data": "", "name": "202.67.65.128/25"}, {"data": "", "name": "205.188.112.0/20"}, {"data": "", "name": "205.188.146.144/30"}, {"data": "", "name": "205.188.192.0/20"}, {"data": "", "name": "205.188.208.0/23"}, {"data": "", "name": "207.200.112.0/21"}], "type": "ip", "name": "aol", "full_path": "/Common/aol"}, {"records": [{"data": "", "name": ".bmp"}, {"data": "", "name": ".gif"}, {"data": "", "name": ".jpg"}], "type": "string", "name": "images", "full_path": "/Common/images"}, {"records": [{"data": "", "name": "10.0.0.0/8"}, {"data": "", "name": "172.16.0.0/12"}, {"data": "", "name": "192.168.0.0/16"}], "type": "ip", "name": "private_net", "full_path": "/Common/private_net"}, {"records": [{"data": "0", "name": "ie_sp_session_sharing_enabled"}, {"data": "60", "name": "ie_sp_session_sharing_inactivity_timeout"}, {"data": "800x600", "name": "ofba_auth_dialog_size"}, {"data": "microsoft data access internet publishing provider", "name": "useragent1"}, {"data": "office protocol discovery", "name": "useragent2"}, {"data": "microsoft office", "name": "useragent3"}, {"data": "non-browser", "name": "useragent4"}, {"data": "msoffice 12", "name": "useragent5"}, {"data": "microsoft-webdav-miniredir", "name": "useragent6"}, {"data": "webdav-miniredir", "name": "useragent7"}, {"data": "ms frontpage 1[23456789]", "name": "useragent9"}, {"data": "onenote", "name": "useragent10"}], "type": "string", "name": "sys_APM_MS_Office_OFBA_DG", "full_path": "/Common/sys_APM_MS_Office_OFBA_DG"}], "gtm_cname_pools": [], "software_volumes": [{"status": "complete", "product": "BIG-IP", "name": "HD1.1", "base_build": "0.0.6", "version": "13.1.0.4", "build": "0.0.6", "active": "yes", "full_path": "HD1.1"}, {"status": "complete", "active": "no", "name": "HD1.2", "full_path": "HD1.2"}, {"status": "complete", "active": "no", "name": "HD1.3", "full_path": "HD1.3"}], "client_ssl_profiles": [{"modssl_methods": "no", "renegotiation_maximum_record_delay": 0, "forward_proxy_lookup_by_ipaddr_port": "no", "cache_timeout": 3600, "strict_resume": "no", "description": "none", "handshake_timeout": 10, "renegotiation": "yes", "certificate_file": "/Common/default.crt", "sni_default": "no", "forward_proxy_enabled": "no", "forward_proxy_certificate_extension_include": ["basic-constraints", "subject-alternative-name"], "sni_require": "no", "allow_non_ssl": "no", "parent": "none", "ciphers": ["DEFAULT"], "secure_renegotiation_mode": "require", "retain_certificate": "yes", "renegotiation_period": 0, "name": "clientssl", "alert_timeout": 0, "profile_mode_enabled": "yes", "authenticate_frequency": "once", "session_ticket": "no", "cache_size": 262144, "unclean_shutdown": "yes", "authenticate_depth": 9, "peer_certification_mode": "ignore", "forward_proxy_certificate_lifespan": 30, "full_path": "/Common/clientssl"}, {"modssl_methods": "no", "renegotiation_maximum_record_delay": 0, "forward_proxy_lookup_by_ipaddr_port": "no", "cache_timeout": 3600, "strict_resume": "no", "description": "none", "handshake_timeout": 10, "renegotiation": "yes", "certificate_file": "/Common/default.crt", "sni_default": "no", "forward_proxy_enabled": "no", "forward_proxy_certificate_extension_include": ["basic-constraints", "subject-alternative-name"], "sni_require": "no", "allow_non_ssl": "no", "parent": "/Common/clientssl", "ciphers": ["ALL:!DH:!ADH:!EDH:@SPEED"], "secure_renegotiation_mode": "request", "retain_certificate": "yes", "renegotiation_period": 0, "name": "clientssl-insecure-compatible", "alert_timeout": 0, "profile_mode_enabled": "yes", "authenticate_frequency": "once", "session_ticket": "no", "cache_size": 262144, "unclean_shutdown": "yes", "authenticate_depth": 9, "peer_certification_mode": "ignore", "forward_proxy_certificate_lifespan": 30, "full_path": "/Common/clientssl-insecure-compatible"}, {"modssl_methods": "no", "renegotiation_maximum_record_delay": 0, "forward_proxy_lookup_by_ipaddr_port": "no", "cache_timeout": 3600, "strict_resume": "no", "description": "none", "handshake_timeout": 10, "renegotiation": "no", "certificate_file": "/Common/default.crt", "sni_default": "no", "forward_proxy_enabled": "no", "forward_proxy_certificate_extension_include": ["basic-constraints", "subject-alternative-name"], "sni_require": "no", "allow_non_ssl": "no", "parent": "/Common/clientssl", "ciphers": ["ecdhe:rsa:!sslv3:!rc4:!exp:!des"], "secure_renegotiation_mode": "require", "retain_certificate": "yes", "renegotiation_period": 0, "name": "clientssl-secure", "alert_timeout": 0, "profile_mode_enabled": "yes", "authenticate_frequency": "once", "session_ticket": "no", "cache_size": 262144, "unclean_shutdown": "yes", "authenticate_depth": 9, "peer_certification_mode": "ignore", "forward_proxy_certificate_lifespan": 30, "full_path": "/Common/clientssl-secure"}, {"modssl_methods": "no", "renegotiation_maximum_record_delay": 0, "forward_proxy_lookup_by_ipaddr_port": "no", "cache_timeout": 3600, "strict_resume": "no", "description": "none", "handshake_timeout": 10, "renegotiation": "yes", "certificate_file": "/Common/default.crt", "sni_default": "no", "forward_proxy_enabled": "no", "forward_proxy_certificate_extension_include": ["basic-constraints", "subject-alternative-name"], "sni_require": "no", "allow_non_ssl": "no", "parent": "/Common/clientssl", "ciphers": ["DHE-RSA-AES256-GCM-SHA384"], "secure_renegotiation_mode": "require", "retain_certificate": "yes", "renegotiation_period": 21600, "name": "crypto-server-default-clientssl", "alert_timeout": 0, "profile_mode_enabled": "yes", "authenticate_frequency": "once", "session_ticket": "no", "cache_size": 0, "unclean_shutdown": "yes", "authenticate_depth": 9, "peer_certification_mode": "ignore", "forward_proxy_certificate_lifespan": 30, "full_path": "/Common/crypto-server-default-clientssl"}, {"modssl_methods": "no", "renegotiation_maximum_record_delay": 0, "forward_proxy_lookup_by_ipaddr_port": "no", "cache_timeout": 3600, "strict_resume": "no", "description": "none", "handshake_timeout": 10, "renegotiation": "yes", "certificate_file": "/Common/default.crt", "sni_default": "no", "forward_proxy_enabled": "no", "forward_proxy_certificate_extension_include": ["basic-constraints", "subject-alternative-name"], "sni_require": "no", "allow_non_ssl": "no", "parent": "/Common/clientssl", "ciphers": ["DEFAULT"], "secure_renegotiation_mode": "require", "retain_certificate": "yes", "renegotiation_period": 0, "name": "splitsession-default-clientssl", "alert_timeout": 0, "profile_mode_enabled": "yes", "authenticate_frequency": "once", "session_ticket": "no", "cache_size": 262144, "unclean_shutdown": "yes", "authenticate_depth": 9, "peer_certification_mode": "ignore", "forward_proxy_certificate_lifespan": 30, "full_path": "/Common/splitsession-default-clientssl"}, {"modssl_methods": "no", "renegotiation_maximum_record_delay": 0, "forward_proxy_lookup_by_ipaddr_port": "no", "cache_timeout": 3600, "strict_resume": "no", "description": "none", "handshake_timeout": 10, "renegotiation": "yes", "certificate_file": "/Common/default.crt", "sni_default": "no", "forward_proxy_enabled": "no", "forward_proxy_certificate_extension_include": ["basic-constraints", "subject-alternative-name"], "sni_require": "no", "allow_non_ssl": "yes", "parent": "/Common/clientssl", "ciphers": ["DEFAULT"], "secure_renegotiation_mode": "require", "retain_certificate": "yes", "renegotiation_period": 0, "name": "wom-default-clientssl", "alert_timeout": 0, "profile_mode_enabled": "yes", "authenticate_frequency": "once", "session_ticket": "no", "cache_size": 262144, "unclean_shutdown": "yes", "authenticate_depth": 9, "peer_certification_mode": "ignore", "forward_proxy_certificate_lifespan": 30, "full_path": "/Common/wom-default-clientssl"}], "icmp_monitors": [{"adaptive_sampling_timespan": 300, "interval": 5, "name": "icmp", "adaptive": "no", "destination": "*", "adaptive_limit": 200, "timeout": 16, "time_until_up": 0, "manual_resume": "no", "adaptive_divergence_type": "relative", "adaptive_divergence_value": 25, "up_interval": 0, "transparent": "no", "full_path": "/Common/icmp"}], "iapp_services": [], "gtm_a_pools": [], "software_images": [{"build_date": "2018-03-13T20:10:42", "product": "BIG-IP", "verified": "yes", "name": "BIGIP-13.1.0.4.0.0.6.iso", "checksum": "848c68dd19716caa344d7240ce0b129c", "last_modified": "2019-11-22T13:02:32", "build": "0.0.6", "version": "13.1.0.4", "file_size": 1925, "full_path": "BIGIP-13.1.0.4.0.0.6.iso"}], "traffic_groups": [{"is_floating": "yes", "name": "traffic-group-1", "auto_failback_time": 60, "ha_load_factor": 1, "auto_failback_enabled": "no", "full_path": "/Common/traffic-group-1"}, {"is_floating": "no", "name": "traffic-group-local-only", "auto_failback_time": 60, "ha_load_factor": 1, "auto_failback_enabled": "no", "full_path": "/Common/traffic-group-local-only"}], "trunks": [], "udp_profiles": [{"allow_no_payload": "no", "buffer_max_bytes": 655350, "proxy_mss": "no", "name": "udp", "parent": "none", "buffer_max_packets": 0, "datagram_load_balancing": "no", "ip_tos_to_client": "0", "ip_df_mode": "pmtu", "idle_timeout": "60", "ip_ttl_v4": 255, "link_qos_to_client": "0", "no_checksum": "no", "ip_ttl_mode": "proxy", "ip_ttl_v6": 64, "full_path": "/Common/udp"}, {"allow_no_payload": "no", "buffer_max_bytes": 655350, "proxy_mss": "no", "name": "udp_decrement_ttl", "parent": "/Common/udp", "buffer_max_packets": 0, "datagram_load_balancing": "no", "ip_tos_to_client": "0", "ip_df_mode": "pmtu", "idle_timeout": "60", "ip_ttl_v4": 255, "link_qos_to_client": "0", "no_checksum": "no", "ip_ttl_mode": "decrement", "ip_ttl_v6": 64, "full_path": "/Common/udp_decrement_ttl"}, {"allow_no_payload": "no", "buffer_max_bytes": 655350, "proxy_mss": "no", "name": "udp_gtm_dns", "parent": "/Common/udp", "buffer_max_packets": 0, "datagram_load_balancing": "yes", "ip_tos_to_client": "0", "ip_df_mode": "pmtu", "idle_timeout": "5", "ip_ttl_v4": 255, "link_qos_to_client": "0", "no_checksum": "no", "ip_ttl_mode": "proxy", "ip_ttl_v6": 64, "full_path": "/Common/udp_gtm_dns"}, {"allow_no_payload": "no", "buffer_max_bytes": 655350, "proxy_mss": "no", "name": "udp_preserve_ttl", "parent": "/Common/udp", "buffer_max_packets": 0, "datagram_load_balancing": "no", "ip_tos_to_client": "0", "ip_df_mode": "pmtu", "idle_timeout": "60", "ip_ttl_v4": 255, "link_qos_to_client": "0", "no_checksum": "no", "ip_ttl_mode": "preserve", "ip_ttl_v6": 64, "full_path": "/Common/udp_preserve_ttl"}], "gtm_aaaa_pools": [], "gtm_mx_wide_ips": [], "gtm_aaaa_wide_ips": [], "external_monitors": [{"interval": 5, "name": "external", "destination": "*:*", "time_until_up": 0, "manual_resume": "no", "timeout": 16, "up_interval": 0, "full_path": "/Common/external"}], "tcp_half_open_monitors": [{"interval": 5, "name": "tcp_half_open", "destination": "*:*", "time_until_up": 0, "manual_resume": "no", "timeout": 16, "up_interval": 0, "transparent": "no", "full_path": "/Common/tcp_half_open"}], "fasthttp_profiles": [{"receive_window_size": 0, "maximum_segment_size_override": 0, "oneconnect_idle_timeout_override": 0, "server_close_timeout": 5, "oneconnect_minimum_pool_size": 0, "server_timestamp": "no", "maximum_header_size": 32768, "maximum_requests": 0, "oneconnect_maximum_reuse": 0, "oneconnect_maximum_pool_size": 2048, "oneconnect_replenish": "yes", "force_http_1_0_response": "no", "insert_x_forwarded_for": "no", "description": "none", "parent": "none", "idle_timeout": 300, "unclean_shutdown": "disabled", "http_1_1_close_workarounds": "no", "server_sack": "no", "name": "fasthttp", "reset_on_timeout": "yes", "client_close_timeout": 5, "oneconnect_ramp_up_increment": 4, "full_path": "/Common/fasthttp"}], "gtm_a_wide_ips": [], "ltm_policies": [], "ltm_pools": [], "self_ips": [{"name": "self_1nic", "vlan": "/Common/internal", "netmask": "255.255.255.0", "netmask_cidr": 24, "traffic_group_inherited": "no", "allow_access_list": ["default"], "address": "192.168.122.63", "floating": "no", "traffic_group": "/Common/traffic-group-local-only", "full_path": "/Common/self_1nic"}], "http_monitors": [{"adaptive_sampling_timespan": 300, "adaptive_divergence_type": "relative", "interval": 5, "reverse": "no", "send_string": "GET /\\r\\n", "destination": "*:*", "adaptive_limit": 200, "time_until_up": 0, "up_interval": 0, "manual_resume": "no", "timeout": 16, "adaptive_divergence_value": 25, "adaptive": "no", "ip_dscp": 0, "transparent": "no", "full_path": "/Common/http", "name": "http"}, {"adaptive_sampling_timespan": 300, "adaptive_divergence_type": "relative", "receive_string": "Server\\:", "reverse": "no", "parent": "/Common/http", "send_string": "HEAD / HTTP/1.0\\r\\n\\r\\n", "destination": "*:*", "adaptive_limit": 200, "interval": 5, "time_until_up": 0, "up_interval": 0, "manual_resume": "no", "timeout": 16, "adaptive_divergence_value": 25, "adaptive": "no", "ip_dscp": 0, "transparent": "no", "full_path": "/Common/http_head_f5", "name": "http_head_f5"}], "irules": [{"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    # Global variables\n    # static::POLICY_RESULT_CACHE_AUTHFAILED\n    #     Administrator can set this into 1, when there is a necessity to cache failed policy result.\n    #     This may be needed to avoid account locked caused by the Active Sync device when it uses wrong passwords.\n    #     One possible scenario, is that when the user changes the password in Active Directory, but missed to changed in their devices.\n    # Responses\n    # On denied result\n    #     Administrator can customize the responses to the device depends on more complex conditions when necessary.\n    #     In those cases, please use ACCESS::respond command.\n    #     The following is the syntax of ACCESS::respond\n    #     ACCESS::respond <status code> [ content <body> ] [ <Additional Header> <Additional Header value>* ]\n    #     e.g. ACCESS::respond 401 content \"Error: Denied\" WWW-Authenticate \"basic realm=\\\"f5.com\\\"\" Connection close\n    when RULE_INIT {\n        # Please set the following global variables for customized responses.\n        set static::actsync_401_http_body \"<html><title>Authentication Failured</title><body>Error: Authentication Failure</body></html>\"\n        set static::actsync_503_http_body \"<html><title>Service is not available</title><body>Error: Service is not available</body></html>\"\n        set static::ACCESS_LOG_PREFIX                 \"01490000:7:\"\n\n        # Second Virtual Server name for 401 NTLM responder\n        set static::ACCESS_SECOND_VIRTUAL_NAME        \"_ACCESS_401_NTLM_responder_HTTPS\"\n\n        set static::POLICY_INPROGRESS                 \"policy_inprogress\"\n        set static::POLICY_AUTHFAILED                 \"policy_authfailed\"\n        # The request with huge content length can not be used for starting ACCESS session.\n        # This kind of request will be put on hold, and this iRule will try to use another\n        # request to start the session. The following value is used for Outlook Anywhere.\n        set static::OA_MAGIC_CONTENT_LEN              1073741824\n\n        # Similar with OutlookAnywhere case, ACCESS can not use the request which is\n        # larger then following size. This becomes an issue with application that using\n        # Exchange Web Service as its main protocol such as Mac OS X applications\n        # (e.g. Mail app, Microsoft Entourage, etc)\n        # This kind of request will be put on hold, and this iRule will try to use another\n        # request to start the session.\n        set static::FIRST_BIG_POST_CONTENT_LEN        640000\n\n        # Set it into 1 if the backend EWS handler accepts HTTP Basic Authentication.\n        set static::EWS_BKEND_BASIC_AUTH              0\n        # The following variable controls the polling mechanism.\n        set static::POLICY_RESULT_POLL_INTERVAL       250\n        set static::POLICY_RESULT_POLL_MAXRETRYCYCLE  600\n\n        # Set this global variable to 1 for caching authentication failure\n        # Useful for avoiding account locked out.\n        set static::POLICY_RESULT_CACHE_AUTHFAILED    0\n\n        # set this global variable to set alternative timeout for particular session\n        set static::POLICY_ALT_INACTIVITY_TIMEOUT     120\n\n        set static::ACCESS_USERKEY_TBLNAME            \"_access_userkey\"\n\n\n        set static::ACCESS_DEL_COOKIE_HDR_VAL         \"MRHSession=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/\"\n\n        log -noname accesscontrol.local1.debug \"01490000:7: EWS_BKEND_BASIC_AUTH = $static::EWS_BKEND_BASIC_AUTH\"\n    }\n    when ACCESS_ACL_ALLOWED {\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX [HTTP::method] [HTTP::uri] [HTTP::header Content-Length]\"\n\n        # MSFT Exchange's EWS request handler always requesting NTLM even the connection has been\n        # already authenticated if there is a HTTP Basic Auth in the request.\n        if { [ info exists f_exchange_web_service ] && $f_exchange_web_service  == 1 }  {\n            if { $static::EWS_BKEND_BASIC_AUTH == 0 } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Removing HTTP Basic Authorization header\"\n                HTTP::header remove Authorization\n            }\n        }\n    }\n\n    when HTTP_REQUEST {\n        set http_path                       [ string tolower [HTTP::path] ]\n        set f_clientless_mode               0\n        set f_alt_inactivity_timeout        0\n        set f_rpc_over_http                 0\n        set f_exchange_web_service          0\n        set f_auto_discover                 0\n        set f_activesync                    0\n        set f_offline_address_book          0\n        set f_availability_service          0\n\n        #  Here put appropriate pool when necessary.\n        switch -glob $http_path {\n        \"/rpc/rpcproxy.dll\" {\n            # Supports for RPC over HTTP. (Outlook Anywhere)\n            set f_rpc_over_http 1\n        }\n        \"/autodiscover/autodiscover.xml\" {\n            # Supports for Auto Discover protocol.\n            set f_auto_discover 1\n            # This request does not require long inactivity timeout.\n            # Don't use this for now\n            set f_alt_inactivity_timeout 0\n        }\n        \"/microsoft-server-activesync\" {\n            # Supports for ActiveSync\n            set f_activesync 1\n        }\n        \"/oab/*\" {\n            # Supports for Offline Address Book\n            set f_offline_address_book 1\n            # Don't use this for now\n            set f_alt_inactivity_timeout 0\n        }\n        \"/ews/*\" {\n            # Support for Exchange Web Service\n            # Outlook's Availability Service borrows this protocol.\n            set f_exchange_web_service 1\n        }\n        \"/as/*\" {\n            # Support for Availability Service.\n            # do nothing for now. (Untested)\n            set f_availability_service 1\n        }\n        default {\n            return\n        }\n        }\n\n        set f_reqside_set_sess_id           0\n        set http_method                     [HTTP::method]\n        set http_hdr_host                   [HTTP::host]\n        set http_hdr_uagent                 [HTTP::header User-Agent]\n        set http_uri                        [HTTP::uri]\n        set http_content_len                [HTTP::header Content-Length]\n        set MRHSession_cookie               [HTTP::cookie value MRHSession]\n        set auth_info_b64enc                \"\"\n\n        if { ! [ info exists src_ip ] } {\n            set src_ip                            [IP::remote_addr]\n        }\n        if { ! [ info exists PROFILE_POLICY_TIMEOUT ] } {\n            set PROFILE_POLICY_TIMEOUT            [PROFILE::access access_policy_timeout]\n        }\n        if { ! [ info exists PROFILE_MAX_SESS_TIMEOUT ] } {\n            set PROFILE_MAX_SESS_TIMEOUT          [PROFILE::access max_session_timeout]\n        }\n        if { ! [ info exists PROFILE_RESTRICT_SINGLE_IP ] } {\n            set PROFILE_RESTRICT_SINGLE_IP        1\n        }\n\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX method: $http_method\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Src IP: $src_ip\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX User-Agent: $http_hdr_uagent\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP uri: $http_uri\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP len: $http_content_len\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Restrict-to-single-client-ip: $PROFILE_RESTRICT_SINGLE_IP\"\n\n        # First, do we have valid MRHSession cookie.\n        if { $MRHSession_cookie != \"\" } {\n            if { [ACCESS::session exists -state_allow -sid $MRHSession_cookie] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie\"\n            } else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie\"\n                set MRHSession_cookie \"\"\n                HTTP::cookie remove MRHSession\n            }\n        }\n\n        set http_hdr_auth [HTTP::header Authorization]\n        if { [ string match -nocase {basic *} $http_hdr_auth ] != 1 } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Not basic authentication. Ignore received auth header\"\n            set http_hdr_auth \"\"\n        }\n\n        if { $http_hdr_auth == \"\" } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX No/Empty Auth header\"\n            # clean up the cookie\n            if { $MRHSession_cookie == \"\" } {\n                HTTP::respond 401 content  $static::actsync_401_http_body WWW-Authenticate \"Basic realm=\\\"[HTTP::header Host]\\\"\" Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection Close\n                return\n            }\n            # Do nothing if we have a valid MRHSession cookie.\n        }\n\n        set f_release_request           0\n        # Optimization for clients which support cookie\n        if { $MRHSession_cookie != \"\" } {\n            # Default profile access setting is false\n            if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                set f_release_request 1\n            }\n            elseif { [ IP::addr $src_ip equals [ ACCESS::session data get -sid $MRHSession_cookie \"session.user.clientip\" ] ] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP matched\"\n                set f_release_request 1\n            }\n            else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP does not matched\"\n                set MRHSession_cookie \"\"\n                HTTP::cookie remove MRHSession\n            }\n        }\n\n        if { $f_release_request == 0 } {\n            set apm_username [string tolower [HTTP::username]]\n            set apm_password [HTTP::password]\n            if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                binary scan [md5 \"$apm_password\"] H* user_hash\n            }\n            else {\n                binary scan [md5 \"$apm_password$src_ip\"] H* user_hash\n            }\n            set user_key    \"$apm_username.$user_hash\"\n            unset user_hash\n\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP Hdr Auth: $http_hdr_auth\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX apm_username: $apm_username\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX user_key = $user_key\"\n            set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n            if { [ llength $apm_cookie_list ] != 0 } {\n                set apm_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n                if { $apm_cookie != \"\" } {\n                    HTTP::cookie insert name MRHSession value $apm_cookie\n                    set f_release_request 1\n                }\n            }\n        }\n\n        if { $http_content_len ==  $static::OA_MAGIC_CONTENT_LEN } {\n            set f_oa_magic_content_len 1\n        }\n\n        set f_sleep_here 0\n        set retry 1\n\n        while { $f_release_request == 0 && $retry <=  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE } {\n\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Trying #$retry for $http_method $http_uri $http_content_len\"\n\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Reading $user_key from table $static::ACCESS_USERKEY_TBLNAME\"\n\n            set apm_cookie [table lookup -subtable  $static::ACCESS_USERKEY_TBLNAME -notouch $user_key]\n            if { $apm_cookie != \"\" } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Verifying table cookie = $apm_cookie\"\n\n                # Accessing SessionDB is not that cheap. Here we are trying to check known value.\n                if { $apm_cookie == \"policy_authfailed\" || $apm_cookie == \"policy_inprogress\"} {\n                    # Do nothing\n                } elseif  { ! [ ACCESS::session exists $apm_cookie ] } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX table cookie = $apm_cookie is out-of-sync\"\n                    # Table value is out of sync. Ignores it.\n                    set apm_cookie \"\"\n                }\n            }\n\n            switch $apm_cookie {\n            \"\" {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX NO APM Cookie found\"\n\n                if { [ info exists f_oa_magic_content_len ] && $f_oa_magic_content_len == 1 } {\n                    # Outlook Anywhere request comes in pair. The one with 1G payload is not usable\n                    # for creating new session since 1G content-length is intended for client to upload\n                    # the data when needed.\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Start to wait $static::POLICY_RESULT_POLL_INTERVAL ms for request with magic content-len\"\n                    set f_sleep_here 1\n                } elseif { [ info exists f_exchange_web_service ] && $f_exchange_web_service == 1 && $http_content_len > $static::FIRST_BIG_POST_CONTENT_LEN } {\n                    # Here we are getting large EWS request, which can't be used for starting new session\n                    # in clientless-mode. Have it here waiting for next smaller one.\n                    # We are holding the request here in HTTP filter, and HTTP filter automatically\n                    # clamping down the TCP window when necessary.\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Start to wait $static::POLICY_RESULT_POLL_INTERVAL ms for big EWS request\"\n                    set f_sleep_here 1\n                } else {\n                   set apm_cookie               \"policy_inprogress\"\n                   set f_reqside_set_sess_id    1\n                   set f_release_request        1\n                }\n            }\n            \"policy_authfailed\" {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Found $user_key with AUTH_FAILED\"\n                HTTP::respond 401 content  $static::actsync_401_http_body\n                set f_release_request 1\n            }\n            \"policy_inprogress\" {\n                if { [ info exists f_activesync ] && ($f_activesync == 1) } {\n                    # For ActiveSync requests, aggressively starts new session.\n                    set f_reqside_set_sess_id    1\n                    set f_release_request        1\n                } else {\n                    set f_sleep_here 1\n                }\n            }\n            default {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Using MRHSession = $apm_cookie\"\n                HTTP::header insert Cookie \"MRHSession=$apm_cookie\"\n                set f_release_request 1\n            }\n            }\n\n            if { $f_reqside_set_sess_id == 1 } {\n                set f_reqside_set_sess_id 0\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Setting $user_key=$apm_cookie $PROFILE_POLICY_TIMEOUT $PROFILE_POLICY_TIMEOUT\"\n                set f_clientless_mode 1\n                HTTP::cookie remove MRHSession\n                HTTP::header insert \"clientless-mode\" 1\n                HTTP::header insert \"username\" $apm_username\n                HTTP::header insert \"password\" $apm_password\n                table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $apm_cookie $PROFILE_POLICY_TIMEOUT $PROFILE_POLICY_TIMEOUT\n            }\n\n            if { $f_sleep_here == 1 } {\n                set f_sleep_here 0\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Waiting  $static::POLICY_RESULT_POLL_INTERVAL ms for $http_method $http_uri\"\n                after  $static::POLICY_RESULT_POLL_INTERVAL\n            }\n\n            incr retry\n        }\n\n        if { ($f_release_request == 0) && ($retry >=  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE) } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Policy did not finish in [expr { $static::POLICY_RESULT_POLL_MAXRETRYCYCLE * $static::POLICY_RESULT_POLL_INTERVAL } ] ms. Close connection for $http_method $http_uri\"\n\n            table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n            ACCESS::disable\n            TCP::close\n            return\n        }\n\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Releasing request $http_method $http_uri\"\n    }\n\n    when ACCESS_SESSION_STARTED {\n        if { [ info exists user_key ] } {\n\n            ACCESS::session data set \"session.user.uuid\" $user_key\n            ACCESS::session data set \"session.user.microsoft-exchange-client\" 1\n\n            if { [ info exists f_activesync ] && $f_activesync == 1 } {\n                ACCESS::session data set \"session.user.microsoft-activesync\" 1\n            }\n            elseif { [ info exists f_auto_discover ] && $f_auto_discover == 1 } {\n                ACCESS::session data set \"session.user.microsoft-autodiscover\" 1\n            }\n            elseif { [ info exists f_availability_service ] && $f_availability_service == 1 } {\n                ACCESS::session data set \"session.user.microsoft-availabilityservice\" 1\n            }\n            elseif { [ info exists f_rpc_over_http ] && $f_rpc_over_http == 1 } {\n                ACCESS::session data set \"session.user.microsoft-rpcoverhttp\" 1\n            }\n            elseif { [ info exists f_offline_address_book ] && $f_offline_address_book == 1 } {\n                ACCESS::session data set \"session.user.microsoft-offlineaddressbook\" 1\n            }\n            elseif { [ info exists f_exchange_web_service ] && $f_exchange_web_service == 1 } {\n                ACCESS::session data set \"session.user.microsoft-exchangewebservice\" 1\n            }\n        }\n        if { [ info exists f_alt_inactivity_timeout ] && $f_alt_inactivity_timeout == 1 } {\n            ACCESS::session data set \"session.inactivity_timeout\"  $static::POLICY_ALT_INACTIVITY_TIMEOUT\n        }\n    }\n\n    when ACCESS_POLICY_COMPLETED {\n        if { ! [ info exists user_key ] } {\n            return\n        }\n\n        set user_key_value \"\"\n        set f_delete_session 0\n        set policy_result [ACCESS::policy result]\n        set sid [ ACCESS::session sid ]\n\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX ACCESS_POLICY_COMPLETED: policy_result = \\\"$policy_result\\\" user_key = \\\"$user_key\\\" sid = \\\"$sid\\\"\"\n\n        set inactivity_timeout [ACCESS::session data get \"session.inactivity_timeout\"]\n        set max_sess_timeout [ACCESS::session data get \"session.max_session_timeout\"]\n        if { $max_sess_timeout == \"\" } {\n             set max_sess_timeout $PROFILE_MAX_SESS_TIMEOUT\n        }\n\n        switch $policy_result {\n        \"allow\" {\n            # We depends on this table record self-cleanup capability in order to\n            # indirectly sync with session DB.\n            set user_key_value $sid\n\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Result: Allow: $user_key => $sid $inactivity_timeout $max_sess_timeout\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX user_key_value = $user_key_value\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX sid = $sid\"\n        }\n        \"deny\" {\n            # When necessary the ******** here can check appropriate session variable\n            # and decide what response more appropriate then this default response.\n            ACCESS::respond 401 content  $static::actsync_401_http_body Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection Close\n            if {  $static::POLICY_RESULT_CACHE_AUTHFAILED == 1 } {\n                set user_key_value  $static::POLICY_AUTHFAILED\n            } else {\n                set f_delete_session  1\n            }\n        }\n        default {\n            ACCESS::respond 503 content  $static::actsync_503_http_body Connection Close\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Got unsupported policy result for $user_key ($sid)\"\n            set f_delete_session  1\n        }\n        }\n        if { $user_key_value != \"\" } {\n           log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Setting $user_key => $user_key_value $inactivity_timeout $max_sess_timeout in table $static::ACCESS_USERKEY_TBLNAME\"\n\n           table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $user_key_value $inactivity_timeout $max_sess_timeout\n        } else {\n           log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Deleting $user_key in table $static::ACCESS_USERKEY_TBLNAME\"\n\n           table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n        }\n\n        if { $f_delete_session == 1 } {\n           ACCESS::session remove\n           set f_delete_session 0\n           log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Removing the session for $user_key.\"\n        }\n    }", "ignore_verification": "no", "name": "_sys_APM_ExchangeSupport_OA_BasicAuth", "full_path": "/Common/_sys_APM_ExchangeSupport_OA_BasicAuth", "signature": "B1IR2MLC4VSVVTAxgOlbnmxBXZrz7g/jBySWM+WsjwfY8sVY/+/Ss7wZpem7Aotnw3BZdtj14KQPUeSPb1WiMAKc3GxZ0NeWzg/YjbfiJ8ebLTGun9QozSqorwv93+L9UU2Rn1T/hS8kx2peJdCFBm0FVkvVTHrGV88gZhwc77dSZzWm4ynA01qwjYn2WGDztLUpn5Cdx3XSS25sNBINe4QHeJ+7uT8DKl/psLHNT7kk7vJ3Z3uAJJIKCx434KaYTDu0OmNrLk1Rt1R+Ha3Nd+ifGdRYIZrZfYNtr0YIXErzvVlUwrvcF/OHtiLbpgVzerliIOY9VwXBngOGli444Q=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when RULE_INIT {\n        set static::POLICY_INPROGRESS                 \"policy_inprogress\"\n        set static::POLICY_FAILED                     \"policy_failed\"\n        set static::POLICY_SUCCEED                    \"policy_succeed\"\n        set static::POLICY_DONE_WAIT_SEC              5\n\n        set static::FIRST_BIG_POST_CONTENT_LEN        640000\n        set static::POLICY_RESULT_POLL_INTERVAL       100\n        set static::POLICY_RESULT_POLL_MAXRETRYCYCLE  100\n        set static::ACCESS_USERKEY_TBLNAME            \"_access_userkey\"\n        set static::ACCESS_LOG_PREFIX                 \"01490000:7:\"\n\n        set static::USE_NTLM_AUTH                     0\n        set static::USE_BASIC_AUTH                    1\n        set static::USE_NTLM_BASIC_AUTH               2\n\n        set static::URL_DEFAULT                       0\n        set static::URL_RPC_OVER_HTTP                 1\n        set static::URL_AUTODISCOVER                  2\n        set static::URL_ACTIVE_SYNC                   3\n        set static::URL_OFFLINEADDRESSBOOK            4\n        set static::URL_EXCHANGEWEBSERVICE            5\n\n        set static::RECVD_AUTH_NONE                   0\n        set static::RECVD_AUTH_NTLM                   1\n        set static::RECVD_AUTH_BASIC                  2\n\n        set static::ACCESS_DEL_COOKIE_HDR_VAL         \"MRHSession=deleted; \\\n                                                       expires=Thu, 01-Jan-1970 00:00:01 GMT;\\\n                                                       path=/\"\n\n    }\n\n    when HTTP_REQUEST {\n        set http_path                       [string tolower [HTTP::path]]\n        set url_path                        $static::URL_DEFAULT\n        set use_auth                        $static::USE_NTLM_AUTH\n        set f_disable_sso                   0\n\n        switch -glob $http_path {\n        \"/rpc/rpcproxy.dll\" {\n            set url_path                    $static::URL_RPC_OVER_HTTP\n        }\n        \"/autodiscover/autodiscover.xml\" {\n            set url_path                    $static::URL_ACTIVE_SYNC\n            # Need to support both NTLM and Basic authentication for this URL\n            set use_auth                    $static::USE_NTLM_BASIC_AUTH\n        }\n        \"/microsoft-server-activesync*\" {\n            set url_path                    $static::URL_ACTIVE_SYNC\n            # Use only Basic authentication for this URL\n            set use_auth                    $static::USE_BASIC_AUTH\n            set f_disable_sso               1\n        }\n        \"/oab*\" {\n            set url_path                    $static::URL_OFFLINEADDRESSBOOK\n        }\n        \"/ews*\" {\n            set url_path                    $static::URL_EXCHANGEWEBSERVICE\n        }\n        default {\n            ECA::disable\n            return\n        }\n        }\n\n        if { ! [ info exists f_ntlm_auth_succeed ] } {\n            set f_ntlm_auth_succeed         0\n        }\n        if { ! [ info exists sid_cache ] } {\n            set sid_cache                         \"\"\n        }\n        if { ! [ info exists PROFILE_POLICY_TIMEOUT ] } { \n            set PROFILE_POLICY_TIMEOUT            [PROFILE::access access_policy_timeout]\n        }\n        if { ! [ info exists PROFILE_MAX_SESS_TIMEOUT ] } {\n            set PROFILE_MAX_SESS_TIMEOUT          [PROFILE::access max_session_timeout]\n        }\n        if { ! [ info exists src_ip ] } {\n            set src_ip                            [IP::remote_addr]\n        }\n        if { ! [ info exists PROFILE_RESTRICT_SINGLE_IP ] } {\n            set PROFILE_RESTRICT_SINGLE_IP        1\n        }\n\n        set http_method                     [HTTP::method]\n        set http_hdr_host                   [HTTP::host]\n        set http_hdr_uagent                 [HTTP::header User-Agent]\n        set http_uri                        [HTTP::uri]\n        set http_content_len                [HTTP::header Content-Length]\n        set MRHSession_cookie               [HTTP::cookie value MRHSession]\n\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX method:      $http_method\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Src IP:      $src_ip\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX User-Agent:  $http_hdr_uagent\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP uri:    $http_uri\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP len:    $http_content_len\"\n\n        if { ! [ info exists ECA_METADATA_ARG ] } {\n            # Generating argument for ECA::metadata\n            # The NTLM configuration name is derived from assigned virtual name with the algorithm as follows:\n            # <virtual-fullpath> ::= <folder-path>\"/\"<virtual-basename> as \"/\" is the last \"/\" char.\n            # <config-fullpath>  ::= <folder-path>\"/\" \"exch_ntlm\" \"_\" <virtual-basename>\n            # e.g.  Let us say the virtual name is \"/prod/exch/vs1\", The folder path is \"/prod/exch/\",\n            #       then object name will be \"/prod/exch/exch_ntlm_vs1\".\n            set vs_name [virtual name]\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX virtual:     $vs_name\"\n            set slash_index [ string last / $vs_name ]\n            if { $slash_index == -1 } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Error: the virtual name does not contain folder information\"\n                ACCESS::disable\n                TCP::close\n                return\n            }\n            set ECA_METADATA_ARG    \"select_ntlm:\"\n            append ECA_METADATA_ARG [ string range $vs_name 0 $slash_index ]\n            append ECA_METADATA_ARG \"exch_ntlm_\"\n            append ECA_METADATA_ARG [ string range $vs_name [ expr { $slash_index + 1 } ] end ]\n            unset slash_index\n            unset vs_name\n        }\n\n        if { $use_auth == $static::USE_NTLM_AUTH } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Enable ECA: $ECA_METADATA_ARG\"\n            ECA::enable\n            ECA::select $ECA_METADATA_ARG\n            return\n        } else {\n            set recvd_auth                      $static::RECVD_AUTH_NONE\n            set http_hdr_auth                   [HTTP::header Authorization]\n            set auth_data                       [split $http_hdr_auth \" \"]\n            if { $http_hdr_auth != \"\" } {\n                if { [ llength $auth_data ] == 2 } {\n                    set auth_scheme [ lindex $auth_data 0]\n                    if { [string equal -nocase $auth_scheme \"ntlm\" ] == 1 } {\n                        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Recv'd HTTP NTLM Authentication\"\n                        set recvd_auth          $static::RECVD_AUTH_NTLM\n                    } elseif { [ string equal -nocase [ lindex $auth_data 0] \"basic\" ] == 1 } {\n                        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Recv'd HTTP Basic Authentication\"\n                        set recvd_auth          $static::RECVD_AUTH_BASIC\n                        set user                [string tolower [HTTP::username]]\n                        set password            [HTTP::password]\n                    }\n                }\n            }\n            if { $use_auth == $static::USE_BASIC_AUTH } {\n                if { $recvd_auth == $static::RECVD_AUTH_BASIC } {\n                    # Defer the process until later\n                } else {\n                    HTTP::respond 401 -version 1.1 noserver WWW-Authenticate \"Basic realm=\\\"$http_hdr_host\\\"\" \\\n                                Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection Close\n                    return\n                }\n            } elseif { $use_auth == $static::USE_NTLM_BASIC_AUTH } {\n                if { ($recvd_auth == $static::RECVD_AUTH_NTLM) || ($f_ntlm_auth_succeed == 1) } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Enable ECA: $ECA_METADATA_ARG\"\n                    ECA::enable\n                    ECA::select $ECA_METADATA_ARG\n                    return\n                } elseif { $recvd_auth == $static::RECVD_AUTH_BASIC } {\n                    # Defer the process until later\n                } else {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Request Authorization: NTLM + Basic\"\n                    HTTP::respond 401 -version 1.1 noserver WWW-Authenticate \"Basic realm=\\\"$http_hdr_host\\\"\" \\\n                                WWW-Authenticate \"NTLM\" Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection Close\n                    return\n                }\n            }\n\n            # Disable NTLM auth\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Disable ECA\"\n            ECA::disable\n            # Disable KCD sso\n            set f_disable_sso               1\n\n            if { $MRHSession_cookie != \"\" } {\n                if { [ACCESS::session exists -state_allow -sid $MRHSession_cookie] } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie\"\n                    # Default profile access setting is false\n                    if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Release the request\"\n                        return\n                    }\n                    elseif { [ IP::addr $src_ip equals [ ACCESS::session data get -sid $MRHSession_cookie \"session.user.clientip\" ] ] } {\n                        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP matched. Release the request\"\n                        return\n                    }\n                    else {\n                        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP does not matched\"\n                    }\n                }\n                else {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie\"\n                }\n\n                set MRHSession_cookie \"\"\n                HTTP::cookie remove MRHSession\n            }\n\n            set user_key                {}\n            if { $PROFILE_RESTRICT_SINGLE_IP == 1 } {\n                append user_key                    $src_ip\n            }\n            append user_key                 $password\n            binary scan [md5 $user_key ] H* user_key\n            set user_key                    \"$user.$user_key\"\n\n            set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n            if { [ llength $apm_cookie_list ] != 0 } {\n                set MRHSession_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n                if { $MRHSession_cookie != \"\" } {\n                    HTTP::cookie remove MRHSession \n                    HTTP::cookie insert name MRHSession value $MRHSession_cookie\n                    return\n                }\n            }\n\n            HTTP::cookie remove MRHSession\n            HTTP::header insert \"clientless-mode\"       1\n            HTTP::header insert \"username\"              $user\n            HTTP::header insert \"password\"              $password\n            return\n        }\n    }\n\n    when ECA_REQUEST_ALLOWED {\n        set f_ntlm_auth_succeed                 1\n\n        if { $MRHSession_cookie == \"\" } {\n            # Retrieve from SID cache\n            set MRHSession_cookie   $sid_cache\n            HTTP::cookie insert name MRHSession value $sid_cache\n        }\n\n        if { $MRHSession_cookie != \"\" } {\n            # Destroy session ID cache. This client should not need session ID cache \n            if { ($sid_cache != \"\") && ($sid_cache != $MRHSession_cookie) } {\n                set sid_cache   \"\"\n            }\n            if { [ ACCESS::session exists -state_allow $MRHSession_cookie ] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie\"\n                # Default profile access setting is false\n                if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Release the request\"\n                    return\n                }\n                elseif { [ IP::addr $src_ip equals [ ACCESS::session data get -sid $MRHSession_cookie \"session.user.clientip\" ] ] } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP matched. Release the request\"\n                    return\n                }\n                else {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP does not matched\"\n                }\n            } else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie\"\n            }\n        }\n\n        set MRHSession  \"\"\n        set sid_cache   \"\"\n        HTTP::cookie remove MRHSession\n\n        # Build user_key\n        set    user_key                 {}\n        append user_key                 [string tolower [ECA::username]] \"@\" [ string tolower [ECA::domainname] ]\n        if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n            append user_key             \":\" $src_ip\n        }\n        append user_key                 \":\" [ECA::client_machine_name]\n\n        set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n        if { [ llength $apm_cookie_list ] != 0 } {\n            set MRHSession_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n            if { $MRHSession_cookie != \"\" } {\n                set sid_cache           $MRHSession_cookie\n                HTTP::cookie insert name MRHSession value $MRHSession_cookie\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX APM Cookie found: $sid_cache\"\n                return\n            }\n        }\n        unset apm_cookie_list\n\n        set try                         1\n        set start_policy_str            $src_ip\n        append start_policy_str         [TCP::client_port]\n\n        while { $try <=  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE } {\n\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX NO APM Cookie found\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Trying #$try for $http_method $http_uri $http_content_len\"\n\n            if { $http_content_len > $static::FIRST_BIG_POST_CONTENT_LEN } {\n                # Wait at below\n            } else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX EXEC: table set -notouch -subtable  $static::ACCESS_USERKEY_TBLNAME -excl $user_key $start_policy_str $PROFILE_POLICY_TIMEOUT $PROFILE_MAX_SESS_TIMEOUT\"\n                set policy_status [table set -notouch -subtable  $static::ACCESS_USERKEY_TBLNAME -excl $user_key $start_policy_str $PROFILE_POLICY_TIMEOUT $PROFILE_MAX_SESS_TIMEOUT]\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX DONE: table set -notouch -subtable  $static::ACCESS_USERKEY_TBLNAME -excl $user_key $start_policy_str $PROFILE_POLICY_TIMEOUT $PROFILE_MAX_SESS_TIMEOUT\"\n                if { $policy_status == $start_policy_str } {\n                    # ACCESS Policy has not started. Start one\n                    HTTP::header insert \"clientless-mode\"    1\n                    break\n                } elseif { $policy_status == $static::POLICY_SUCCEED } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX table is out-of-sync retry\"\n                    table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n                    continue\n                } elseif { $policy_status == $static::POLICY_FAILED } {\n                    ACCESS::disable\n                    TCP::close\n                    return\n                }\n                # Wait at below\n            }\n\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Waiting  $static::POLICY_RESULT_POLL_INTERVAL ms for $http_method $http_uri\"\n            # Touch the entry table\n            table lookup -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n            after  $static::POLICY_RESULT_POLL_INTERVAL\n\n            set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n            if { [ llength $apm_cookie_list ] != 0 } {\n                set MRHSession_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n                if { $MRHSession_cookie != \"\" } {\n                    set sid_cache           $MRHSession_cookie\n                    HTTP::cookie insert name MRHSession value $MRHSession_cookie\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX APM Cookie found: $sid_cache\"\n                    return\n                }\n            }\n\n            incr try\n        }\n\n        if { $try >  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Policy did not finish in [ expr { $static::POLICY_RESULT_POLL_MAXRETRYCYCLE * $static::POLICY_RESULT_POLL_INTERVAL } ] ms. Close connection for $http_method $http_uri\"\n            table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n            ACCESS::disable\n            TCP::close\n            return\n        }\n\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Releasing request $http_method $http_uri\"\n\n        unset try\n        unset start_policy_str\n    }\n\n    when ECA_REQUEST_DENIED {\n        set f_ntlm_auth_succeed                 0\n    }\n\n    when HTTP_RESPONSE_RELEASE {\n        if { ! [info exists user_key] } {\n            return\n        }\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP response: status:           [HTTP::status]\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP response: Server:           [HTTP::header Server]\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP response: Content-Length:   [HTTP::header Content-Length]\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP response: WWW-Authenticate: [HTTP::header WWW-Authenticate]\"\n    }\n\n    when ACCESS_SESSION_STARTED {\n        if { [ info exists user_key ] } {\n            ACCESS::session data set \"session.user.uuid\" $user_key\n            ACCESS::session data set \"session.user.microsoft-exchange-client\" 1\n        }\n    }\n\n    when ACCESS_ACL_ALLOWED {\n        if { [ info exists f_disable_sso ] && $f_disable_sso == 1 } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Disable WEBSSO\"\n            WEBSSO::disable\n        }\n    }\n\n    when ACCESS_POLICY_COMPLETED {\n        if { ! [ info exists user_key ] } {\n            return\n        }\n\n        set user_key_value \"\"\n        set f_delete_session 0\n        set policy_result [ACCESS::policy result]\n        set sid [ ACCESS::session sid ]\n\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX ACCESS_POLICY_COMPLETED: policy_result = \\\"$policy_result\\\" user_key = \\\"$user_key\\\" sid = \\\"$sid\\\"\"\n\n        switch $policy_result {\n        \"allow\" {\n            set user_key_value          $sid\n            set sid_cache               $user_key_value\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Result: Allow: $user_key\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX sid = $sid\"\n\n        }\n        \"deny\" {\n            ACCESS::respond 401 content  $static::actsync_401_http_body Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection Close\n            set f_delete_session  1\n        }\n        default {\n            ACCESS::respond 503 content  $static::actsync_503_http_body Connection Close\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Got unsupported policy result for $user_key ($sid)\"\n            set f_delete_session  1\n        }\n        }\n\n        if { $f_ntlm_auth_succeed == 1 } {\n            if { $user_key_value != \"\" } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Setting $user_key => $static::POLICY_SUCCEED\"\n                table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $static::POLICY_SUCCEED\n            } else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Setting $user_key => $static::POLICY_FAILED  $static::POLICY_DONE_WAIT_SEC $static::POLICY_DONE_WAIT_SEC_in table $static::ACCESS_USERKEY_TBLNAME\"\n                table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $static::POLICY_FAILED  $static::POLICY_DONE_WAIT_SEC $static::POLICY_DONE_WAIT_SEC\n            }\n        }\n\n        if { $f_delete_session == 1 } {\n            ACCESS::session remove\n            set f_delete_session 0\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Removing the session for $user_key.\"\n        }\n    }", "ignore_verification": "no", "name": "_sys_APM_ExchangeSupport_OA_NtlmAuth", "full_path": "/Common/_sys_APM_ExchangeSupport_OA_NtlmAuth", "signature": "X6dt8EqJFS+8GoWtne8ePfboJR+q5TILymdnfjtylTpC5BikvDFsa3VI6x0V/MP0lJDJrjotJPN2GTogthp48mnmZ2yg+zLskYONNC+vv5yQKc7SLmQf2Eoe8C2CJ8crBUOmfi0f+kjj1GboTVcxNAJ+tpPwb+KKTpnic7WPHo8F/LO5Ou0T5tsls8AmIE/dU0pSKhgit1h5gA+pfKoeA66fhRDcwrSAJ9d/odE55+s/LxJxZqG0PzOVE7HHdbeDiRdRYyBMJQ54Ri/tJuhWQJF/4BYi6V7ScWZQ+fyvFAgb3rRl9xgCqQK3gKQpwLRK11s6+L+PPEQx863YHOEobA=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    # The purpose of this iRule is for help the main virtual for the timing of the HTTP request retry\n    # during the SSO process for OutlookAnywhere protocol request which has a Content-Length value of 1GB.\n\n    when HTTP_REQUEST {\n        #  Waiting for the first chunk of data.\n        HTTP::collect 1\n    }\n\n    when HTTP_REQUEST_DATA {\n        # Respond 401 and close the connection once we received the data.\n        HTTP::respond 401 WWW-Authenticate NTLM Connection close\n    }", "ignore_verification": "no", "name": "_sys_APM_ExchangeSupport_helper", "full_path": "/Common/_sys_APM_ExchangeSupport_helper", "signature": "qJiKrxH5xpBJr4VoBOszXDm+lvsjXtXlGXxiExuAyMkGwnIml1ED3xohHaNWu4/2/AAwX44zX2g3sr1cFx6yQeWIZVrkllxTSSqDqB9BYiLSO1kIn15vzpnj+bqzNTkvcl9fdu6yBT3Bz5X3EfCNLByKa059NQU2l/1StKK0e/KA0cCSAOzB4sh+BVI2VPPgL2R3XqoOrdgHHEE1PnBwC9WRk5Y5XFdaowpd2rfDoYBZM2C+MIxeryxMYLinXHfHbGaug4go8VX67eskI6XxWbm2fjXTBjTjMyxt7OpA6dc6S8IA3FJawUasvexJvHrdPyul2BMGRDqa+p6ZhOLzNw=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    # Global variables\n    # static::POLICY_RESULT_CACHE_AUTHFAILED\n    #     Administrator can set this into 1, when there is a necessity to cache failed policy result.\n    #     This may be needed to avoid account locked caused by the Active Sync device when it uses wrong passwords.\n    #     One possible scenario, is that when the user changes the password in Active Directory, but missed to changed in their devices.\n    # Responses\n    # On denied result\n    #     Administrator can customize the responses to the device depends on more complex conditions when necessary.\n    #     In those cases, please use ACCESS::respond command.\n    #     The following is the syntax of ACCESS::respond\n    #     ACCESS::respond <status code> [ content <body> ] [ <Additional Header> <Additional Header value>* ]\n    #     e.g. ACCESS::respond 401 content \"Error: Denied\" WWW-Authenticate \"basic realm=\\\"f5.com\\\"\" Connection close\n    when RULE_INIT {\n        # Please set the following global variables for customized responses.\n        set static::actsync_401_http_body \"<html><title>Authentication Failured</title><body>Error: Authentication Failure</body></html>\"\n        set static::actsync_503_http_body \"<html><title>Service is not available</title><body>Error: Service is not available</body></html>\"\n        set static::ACCESS_LOG_PREFIX                 \"01490000:7:\"\n\n        # Second Virtual Server name for 401 NTLM responder\n        set static::ACCESS_SECOND_VIRTUAL_NAME        \"_ACCESS_401_NTLM_responder_HTTPS\"\n\n        set static::POLICY_INPROGRESS                 \"policy_inprogress\"\n        set static::POLICY_AUTHFAILED                 \"policy_authfailed\"\n        # The request with huge content length can not be used for starting ACCESS session.\n        # This kind of request will be put on hold, and this iRule will try to use another\n        # request to start the session. The following value is used for Outlook Anywhere.\n        set static::OA_MAGIC_CONTENT_LEN              1073741824\n\n        # Similar with OutlookAnywhere case, ACCESS can not use the request which is\n        # larger then following size. This becomes an issue with application that using\n        # Exchange Web Service as its main protocol such as Mac OS X applications\n        # (e.g. Mail app, Microsoft Entourage, etc)\n        # This kind of request will be put on hold, and this iRule will try to use another\n        # request to start the session.\n        set static::FIRST_BIG_POST_CONTENT_LEN        640000\n\n        # Set it into 1 if the backend EWS handler accepts HTTP Basic Authentication.\n        set static::EWS_BKEND_BASIC_AUTH              0\n        # Set it into 1 if the backend RPC-over-HTTP handler accepts HTTP Basic Authentication.\n        set static::RPC_OVER_HTTP_BKEND_BASIC_AUTH    0\n        # The following variable controls the polling mechanism.\n        set static::POLICY_RESULT_POLL_INTERVAL       250\n        set static::POLICY_RESULT_POLL_MAXRETRYCYCLE  600\n\n        # Set this global variable to 1 for caching authentication failure\n        # Useful for avoiding account locked out.\n        set static::POLICY_RESULT_CACHE_AUTHFAILED    0\n\n        # set this global variable to set alternative timeout for particular session\n        set static::POLICY_ALT_INACTIVITY_TIMEOUT     120\n\n        set static::ACCESS_USERKEY_TBLNAME            \"_access_userkey\"\n\n\n        set static::ACCESS_DEL_COOKIE_HDR_VAL         \"MRHSession=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/\"\n\n        log -noname accesscontrol.local1.debug \"01490000:7: RPC_OVER_HTTP_BKEND_BASIC_AUTH = $static::RPC_OVER_HTTP_BKEND_BASIC_AUTH\"\n        log -noname accesscontrol.local1.debug \"01490000:7: EWS_BKEND_BASIC_AUTH = $static::EWS_BKEND_BASIC_AUTH\"\n    }\n    when ACCESS_ACL_ALLOWED {\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX [HTTP::method] [HTTP::uri] [HTTP::header Content-Length]\"\n\n        if { [ info exists f_rpc_over_http ] && $f_rpc_over_http == 1 }  {\n            if { $static::RPC_OVER_HTTP_BKEND_BASIC_AUTH == 0 } {\n                if { [ info exists f_oa_magic_content_len ] && $f_oa_magic_content_len == 1 } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Use this virtual $static::ACCESS_SECOND_VIRTUAL_NAME just once. Will be reset back after disconnection.\"\n                    use virtual $static::ACCESS_SECOND_VIRTUAL_NAME\n                }\n               log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Remove HTTP Auth header\"\n               HTTP::header remove Authorization\n            }\n        }\n        # MSFT Exchange's EWS request handler always requesting NTLM even the connection has been\n        # already authenticated if there is a HTTP Basic Auth in the request.\n        if { [ info exists f_exchange_web_service ] && $f_exchange_web_service  == 1 }  {\n            if { $static::EWS_BKEND_BASIC_AUTH == 0 } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Removing HTTP Basic Authorization header\"\n                HTTP::header remove Authorization\n            }\n        }\n    }\n\n    when HTTP_REQUEST {\n        set http_path                       [ string tolower [HTTP::path] ]\n        set f_clientless_mode               0\n        set f_alt_inactivity_timeout        0\n        set f_rpc_over_http                 0\n        set f_exchange_web_service          0\n        set f_auto_discover                 0\n        set f_activesync                    0\n        set f_offline_address_book          0\n        set f_availability_service          0\n\n        #  Here put appropriate pool when necessary.\n        switch -glob $http_path {\n        \"/rpc/rpcproxy.dll\" {\n            # Supports for RPC over HTTP. (Outlook Anywhere)\n            set f_rpc_over_http 1\n        }\n        \"/autodiscover/autodiscover.xml\" {\n            # Supports for Auto Discover protocol.\n            set f_auto_discover 1\n            # This request does not require long inactivity timeout.\n            # Don't use this for now\n            set f_alt_inactivity_timeout 0\n        }\n        \"/microsoft-server-activesync\" {\n            # Supports for ActiveSync\n            set f_activesync 1\n        }\n        \"/oab/*\" {\n            # Supports for Offline Address Book\n            set f_offline_address_book 1\n        }\n        \"/ews/*\" {\n            # Support for Exchange Web Service\n            # Outlook's Availability Service borrows this protocol.\n            set f_exchange_web_service 1\n        }\n        \"/as/*\" {\n            # Support for Availability Service.\n            # do nothing for now. (Untested)\n            set f_availability_service 1\n        }\n        default {\n            return\n        }\n        }\n\n        set f_reqside_set_sess_id           0\n        set http_method                     [HTTP::method]\n        set http_hdr_host                   [HTTP::host]\n        set http_hdr_uagent                 [HTTP::header User-Agent]\n        set src_ip                          [IP::remote_addr]\n        set http_uri                        [HTTP::uri]\n        set http_content_len                [HTTP::header Content-Length]\n        set MRHSession_cookie               [HTTP::cookie value MRHSession]\n        set auth_info_b64enc                \"\"\n\n        if { ! [ info exists PROFILE_POLICY_TIMEOUT ] } {\n            set PROFILE_POLICY_TIMEOUT            [PROFILE::access access_policy_timeout]\n        }\n        if { ! [ info exists PROFILE_MAX_SESS_TIMEOUT ] } {\n            set PROFILE_MAX_SESS_TIMEOUT          [PROFILE::access max_session_timeout]\n        }\n        if { ! [ info exists PROFILE_RESTRICT_SINGLE_IP ] } {\n            set PROFILE_RESTRICT_SINGLE_IP        1\n        }\n\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX method: $http_method\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Src IP: $src_ip\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX User-Agent: $http_hdr_uagent\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP uri: $http_uri\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP len: $http_content_len\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Restrict-to-single-client-ip: $PROFILE_RESTRICT_SINGLE_IP\"\n\n        # First, do we have valid MRHSession cookie.\n        if { $MRHSession_cookie != \"\" } {\n            if { [ACCESS::session exists -state_allow -sid $MRHSession_cookie] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie\"\n            } else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie\"\n                set MRHSession_cookie \"\"\n                HTTP::cookie remove MRHSession\n            }\n        }\n\n        set http_hdr_auth [HTTP::header Authorization]\n        if { [ string match -nocase {basic *} $http_hdr_auth ] != 1 } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Not basic authentication. Ignore received auth header\"\n            set http_hdr_auth \"\"\n        }\n\n        if { $http_hdr_auth == \"\" } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX No/Empty Auth header\"\n            # clean up the cookie\n            if { $MRHSession_cookie == \"\" } {\n                HTTP::respond 401 content  $static::actsync_401_http_body WWW-Authenticate \"Basic realm=\\\"[HTTP::header Host]\\\"\" Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection close\n                return\n            }\n            # Do nothing if we have a valid MRHSession cookie.\n        }\n\n        set f_release_request           0\n        # Optimization for clients which support cookie\n        if { $MRHSession_cookie != \"\" } {\n            # Default profile access setting is false\n            if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                set f_release_request 1\n            }\n            elseif { [ IP::addr $src_ip equals [ ACCESS::session data get -sid $MRHSession_cookie \"session.user.clientip\" ] ] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP matched\"\n                set f_release_request 1\n            }\n            else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP does not matched\"\n                set MRHSession_cookie \"\"\n                HTTP::cookie remove MRHSession\n            }\n        }\n\n        if { $f_release_request == 0 } {\n            set apm_username [ string tolower [HTTP::username]]\n            set apm_password [HTTP::password]\n            if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                binary scan [md5 \"$apm_password\"] H* user_hash\n            } else {\n                binary scan [md5 \"$apm_password$src_ip\"] H* user_hash\n            }\n\n            set user_key    {}\n            append user_key $apm_username \".\" $user_hash\n            unset user_hash\n\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP Hdr Auth: $http_hdr_auth\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX apm_username: $apm_username\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX user_key = $user_key\"\n            set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n            if { [ llength $apm_cookie_list ] != 0 } {\n                set apm_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n                if { $apm_cookie != \"\" } {\n                    HTTP::cookie insert name MRHSession value $apm_cookie\n                    set f_release_request 1\n                }\n            }\n        }\n\n        if { $http_content_len ==  $static::OA_MAGIC_CONTENT_LEN } {\n            set f_oa_magic_content_len 1\n        }\n\n        set f_sleep_here 0\n        set retry 1\n\n        while { $f_release_request == 0 && $retry <=  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE } {\n\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Trying #$retry for $http_method $http_uri $http_content_len\"\n\n            # This is also going to touch the table entry timer.\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Reading $user_key from table $static::ACCESS_USERKEY_TBLNAME\"\n\n            set apm_cookie [table lookup -subtable  $static::ACCESS_USERKEY_TBLNAME -notouch $user_key]\n            if { $apm_cookie != \"\" } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Verifying table cookie = $apm_cookie\"\n\n                # Accessing SessionDB is not that cheap. Here we are trying to check known value.\n                if { $apm_cookie == \"policy_authfailed\" || $apm_cookie == \"policy_inprogress\"} {\n                    # Do nothing\n                } elseif  { ! [ ACCESS::session exists $apm_cookie ] } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX table cookie = $apm_cookie is out-of-sync\"\n                    # Table value is out of sync. Ignores it.\n                    set apm_cookie \"\"\n                }\n            }\n\n            switch $apm_cookie {\n            \"\" {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX NO APM Cookie found\"\n\n                if { [ info exists f_oa_magic_content_len ] && $f_oa_magic_content_len == 1 } {\n                    # Outlook Anywhere request comes in pair. The one with 1G payload is not usable\n                    # for creating new session since 1G content-length is intended for client to upload\n                    # the data when needed.\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Start to wait $static::POLICY_RESULT_POLL_INTERVAL ms for request with magic content-len\"\n                    set f_sleep_here 1\n                } elseif { [ info exists f_exchange_web_service ] && $f_exchange_web_service == 1 && $http_content_len > $static::FIRST_BIG_POST_CONTENT_LEN } {\n                    # Here we are getting large EWS request, which can't be used for starting new session\n                    # in clientless-mode. Have it here waiting for next smaller one.\n                    # We are holding the request here in HTTP filter, and HTTP filter automatically\n                    # clamping down the TCP window when necessary.\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Start to wait $static::POLICY_RESULT_POLL_INTERVAL ms for big EWS request\"\n                    set f_sleep_here 1\n                } else {\n                   set apm_cookie               \"policy_inprogress\"\n                   set f_reqside_set_sess_id    1\n                   set f_release_request        1\n                }\n            }\n            \"policy_authfailed\" {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Found $user_key with AUTH_FAILED\"\n                HTTP::respond 401 content  $static::actsync_401_http_body\n                set f_release_request 1\n            }\n            \"policy_inprogress\" {\n                if { [ info exists f_activesync ] && ($f_activesync == 1) } {\n                    # For ActiveSync requests, aggressively starts new session.\n                    set f_reqside_set_sess_id    1\n                    set f_release_request        1\n                } else {\n                    set f_sleep_here 1\n                }\n            }\n            default {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Using MRHSession = $apm_cookie\"\n                HTTP::header insert Cookie \"MRHSession=$apm_cookie\"\n                set f_release_request 1\n            }\n            }\n\n            if { $f_reqside_set_sess_id == 1 } {\n                set f_reqside_set_sess_id 0\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Setting $user_key=$apm_cookie $PROFILE_POLICY_TIMEOUT $PROFILE_MAX_SESS_TIMEOUT\"\n                set f_clientless_mode 1\n                HTTP::cookie remove MRHSession\n                HTTP::header insert \"clientless-mode\" 1\n                HTTP::header insert \"username\" $apm_username\n                HTTP::header insert \"password\" $apm_password\n                table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $apm_cookie $PROFILE_POLICY_TIMEOUT $PROFILE_MAX_SESS_TIMEOUT\n            }\n\n            if { $f_sleep_here == 1 } {\n                set f_sleep_here 0\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Waiting  $static::POLICY_RESULT_POLL_INTERVAL ms for $http_method $http_uri\"\n                after  $static::POLICY_RESULT_POLL_INTERVAL\n            }\n\n            incr retry\n        }\n\n        if { $f_release_request == 0 && $retry >=  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Policy did not finish in [expr { $static::POLICY_RESULT_POLL_MAXRETRYCYCLE * $static::POLICY_RESULT_POLL_INTERVAL } ] ms. Close connection for $http_method $http_uri\"\n\n            table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n            ACCESS::disable\n            TCP::close\n            return\n        }\n\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Releasing request $http_method $http_uri\"\n    }\n\n    when ACCESS_SESSION_STARTED {\n        if { [ info exists user_key ] } {\n            ACCESS::session data set \"session.user.uuid\" $user_key\n            ACCESS::session data set \"session.user.microsoft-exchange-client\" 1\n\n            if { [ info exists f_activesync ] && $f_activesync == 1 } {\n                ACCESS::session data set \"session.user.microsoft-activesync\" 1\n            }\n            elseif { [ info exists f_auto_discover ] && $f_auto_discover == 1 } {\n                ACCESS::session data set \"session.user.microsoft-autodiscover\" 1\n            }\n            elseif { [ info exists f_availability_service ] && $f_availability_service == 1 } {\n                ACCESS::session data set \"session.user.microsoft-availabilityservice\" 1\n            }\n            elseif { [ info exists f_rpc_over_http ] && $f_rpc_over_http == 1 } {\n                ACCESS::session data set \"session.user.microsoft-rpcoverhttp\" 1\n            }\n            elseif { [ info exists f_offline_address_book ] && $f_offline_address_book == 1 } {\n                ACCESS::session data set \"session.user.microsoft-offlineaddressbook\" 1\n            }\n            elseif { [ info exists f_exchange_web_service ] && $f_exchange_web_service == 1 } {\n                ACCESS::session data set \"session.user.microsoft-exchangewebservice\" 1\n            }\n        }\n        if { [ info exists f_alt_inactivity_timeout ] && $f_alt_inactivity_timeout == 1 } {\n            ACCESS::session data set \"session.inactivity_timeout\"  $static::POLICY_ALT_INACTIVITY_TIMEOUT\n        }\n    }\n\n    when HTTP_RESPONSE {\n        if { [ info exists f_auto_discover ] && $f_auto_discover == 1 } {\n            set content_len [ HTTP::header Content-Length ]\n            if {  $content_len > 0 } {\n                HTTP::collect $content_len\n            }\n        }\n    }\n    when HTTP_RESPONSE_DATA {\n        if { [ info exists f_auto_discover ] && $f_auto_discover == 1 } {\n            if { [ regsub -line {<AuthPackage>Ntlm</AuthPackage>} [ HTTP::payload ] {<AuthPackage>Basic</AuthPackage>} payload ] != 0 } {\n                HTTP::payload replace 0 $content_len $payload\n            }\n        }\n    }\n    when ACCESS_POLICY_COMPLETED {\n        if { ! [ info exists user_key ] } {\n            return\n        }\n\n        set user_key_value \"\"\n        set f_delete_session 0\n        set policy_result [ACCESS::policy result]\n        set sid [ ACCESS::session sid ]\n\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX ACCESS_POLICY_COMPLETED: policy_result = \\\"$policy_result\\\" user_key = \\\"$user_key\\\" sid = \\\"$sid\\\"\"\n\n        set inactivity_timeout [ACCESS::session data get \"session.inactivity_timeout\"]\n        set max_sess_timeout [ACCESS::session data get \"session.max_session_timeout\"]\n        if { $max_sess_timeout == \"\" } {\n             set max_sess_timeout $PROFILE_MAX_SESS_TIMEOUT\n        }\n\n        switch $policy_result {\n        \"allow\" {\n            # We depends on this table record self-cleanup capability in order to\n            # indirectly sync with session DB.\n            set user_key_value $sid\n\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Result: Allow: $user_key => $sid $inactivity_timeout $max_sess_timeout\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX user_key_value = $user_key_value\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX sid = $sid\"\n        }\n        \"deny\" {\n            # When necessary the ******** here can check appropriate session variable\n            # and decide what response more appropriate then this default response.\n            ACCESS::respond 401 content  $static::actsync_401_http_body Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection close\n            if {  $static::POLICY_RESULT_CACHE_AUTHFAILED == 1 } {\n                set user_key_value  $static::POLICY_AUTHFAILED\n            } else {\n                set f_delete_session  1\n            }\n        }\n        default {\n            ACCESS::respond 503 content  $static::actsync_503_http_body Connection close\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Got unsupported policy result for $user_key ($sid)\"\n            set f_delete_session  1\n        }\n        }\n        if { $user_key_value != \"\" } {\n           log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Setting $user_key => $user_key_value $inactivity_timeout $max_sess_timeout in table $static::ACCESS_USERKEY_TBLNAME\"\n\n           table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $user_key_value $inactivity_timeout $max_sess_timeout\n        } else {\n           log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Deleting $user_key in table $static::ACCESS_USERKEY_TBLNAME\"\n\n           table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n        }\n\n        if { $f_delete_session == 1 } {\n           ACCESS::session remove\n           set f_delete_session 0\n           log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Removing the session for $user_key.\"\n        }\n    }", "ignore_verification": "no", "name": "_sys_APM_ExchangeSupport_main", "full_path": "/Common/_sys_APM_ExchangeSupport_main", "signature": "ITBkr3SVPYk5UZu6F9TDEQuWGp64htd0HDsL3WNUHQqaVbu0m1tox3dTyf9X8y1MSr2KIbUfOIovCbiSXqnWRTAnSMqESm2gwlMBNCBOxTsh3AD83JE2N08jZjnC/jjnl4HRsq71uBbyHLZiL+mp1wXDtxUBUOfh7G/NUs9BajAVgQM7Vx9/Ogs+zX6ag08CXOjWwgPL5hRezZJwZEp1AXM8YrSbyT456P6axwWsB015wqJXvwpRKWcQ7sHEvkbbd928Q3koLevE6ecByjezjphomokwmi813aA7WCNbG6Tl+3YznsYAgxn2Skv0Gq7pMfoj9QFt/a39RXGyHOhRcQ=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012, 2016-2017.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n# Supporting MS-OFBA protocol for native office applications.\n# sys_APM_MS_Office_OFBA_DG - iRule data group to customize ofba user agent strings and\n#                     few other parameters.\n#\n# sys_APM_MS_Office_OFBA_DG::useragent - useragent strings are mandatory, \n#       these strings are used to detect OFBA clients. All user agent strings should start\n#       with useragent name, for e.g: useragent1, useragent2.. etc.\n#\n# sys_APM_MS_Office_OFBA_DG::ie_sp_session_sharing_enabled - Parameter to specify whether to enable or\n#       disable IE session sharing using persistent cookie named \"MRHSOffice\".\n#       Default is disabled (0), value can be 0 or 1\n#     \n# sys_APM_MS_Office_OFBA_DG::ie_sp_session_sharing_inactivity_timeout - inactivity timeout value \n#       for the persistent cookie value \"MRHSOffice\"\n#       everytime, the SharePoint site refreshes or gets any response from\n#       SharePoint Server.  Value can be any positive value given in seconds.\n#       Default value as 60 secs\n#\n# sys_APM_MS_Office_OFBA_DG::ofba_auth_dialog_size - OFBA dialog browser\n#       resolution size given as widthxheight, default 800x600\n#\n# static::MS_OFBA_ENABLED_CLIENT_TYPE - \"ms-ofba-compliant\" session variable\n#       value that can be used in Access policy Logon agent branch, to add the required authentication\n#       for MS OFBA compliant applications.\n#\n    proc write_log {level message} {\n\n        ACCESS::log $level \"\\[MSOFBA\\] $message\"\n#       Logs printing for 12.x or older releases\n#       log -noname accesscontrol.local1.$level \"01490000: \\[MSOFBA\\] $message\"\n    }\n\n    when RULE_INIT {\n        set static::MS_OFBA_ENABLED_CLIENT_TYPE \"ms-ofba-compliant\"\n        set static::MS_OFBA_AUTH_REQ_URI \"/ms-ofba-req-auth\"\n        set static::MS_OFBA_AUTH_RETURN_URI \"/ms-ofba-auth-success\"\n        set static::MS_OFBA_AUTH_DIALOG_SZ \"800x600\"\n        set static::MS_OFBA_AUTH_SUCCESS_BODY \"<html><head><title>User Authenticated</title></head><body><b>Successful OFBA authentication</b></body></html>\"\n        set static::MS_OFBA_IRULE_DG \"sys_APM_MS_Office_OFBA_DG\"\n        set static::MULTI_DOMAIN_AUTH_RESP_URI \"/f5networks-sso-resp\"\n# sp_persistent_ck: would help to share the session from sharepoint site to\n# office applications, if enabled.\n        set static::SP_PERSISTENT_CK \"MRHSOffice\"\n        set static::SP_PERSISTENT_CK_TIMEOUT 60\n        set static::MS_OFBA_AUTH_TYPE_COOKIE \"Auth-Type\"\n        set static::MS_OFBA_AUTH_TYPE_COOKIE_VALUE \"ms-ofba\"\n    }\n\n    when CLIENT_ACCEPTED {\n        if { ![info exists ofba_user_agent_list] } {\n# check for config change from datagroup\n# since this iRule is read-only, dg config change is done in CLIENT_ACCEPTED rather than in RULE_INIT\n            set ofba_user_agent_list [class search -value -all $static::MS_OFBA_IRULE_DG starts_with useragent]\n            set f_sp_persistent_ck [class search -value $static::MS_OFBA_IRULE_DG equals ie_sp_session_sharing_enabled]\n            set sp_persistent_ck_timeout [class search -value $static::MS_OFBA_IRULE_DG equals ie_sp_session_sharing_inactivity_timeout]\n            set ofba_auth_dialog_sz [class search -value $static::MS_OFBA_IRULE_DG equals ofba_auth_dialog_size]\n        }\n    }\n\n    when HTTP_REQUEST {\n# client detection, for ofba client\n        set ms_sp_client_type \"none\"\n        set http_path [string tolower [HTTP::path]]\n        set http_user_agent [string tolower [HTTP::header \"User-Agent\"]]\n        set session_id [HTTP::cookie value \"MRHSession\"]\n        set f_allow_session 0\n        set ms_ofba_auth_cookie \"\"\n\n        if {[HTTP::header exists \"X-FORMS_BASED_AUTH_ACCEPTED\"] &&\n            (([HTTP::header \"X-FORMS_BASED_AUTH_ACCEPTED\"] equals \"t\") ||\n             ([HTTP::header \"X-FORMS_BASED_AUTH_ACCEPTED\"] equals \"f\"))} {\n                set ms_sp_client_type \"ms-ofba\"\n            } elseif { $http_path == $static::MS_OFBA_AUTH_REQ_URI } {\n                set ms_sp_client_type \"ms-ofba\"\n            } else {\n                if {(!($http_user_agent contains \"frontpage\") && [string match -nocase {*mozilla*} $http_user_agent]) ||\n                    [string match -nocase {*opera*} $http_user_agent]} {\n                        set ms_sp_client_type \"browser\"\n                        set ms_ofba_auth_cookie [HTTP::cookie value $static::MS_OFBA_AUTH_TYPE_COOKIE]\n                        if { $ms_ofba_auth_cookie == $static::MS_OFBA_AUTH_TYPE_COOKIE_VALUE } {\n                            # ofba authentication is still in progress, there may be a case where initial\n                            # access denied and user is retrying the session without closing the ofba\n                            # initiated browser\n                            set ms_sp_client_type \"ms-ofba\"\n                            call write_log debug \"Detecting the client type as ms-ofba based auth type cookie\"\n                        }\n                    } else {\n                        foreach ofba_user_agent $ofba_user_agent_list {\n                            set ofba_user_agent [string trim $ofba_user_agent]\n                            if { $ofba_user_agent != \"\" && [string match -nocase *$ofba_user_agent* $http_user_agent] } {\n                                set ms_sp_client_type \"ms-ofba\"\n                                    break\n                            }\n                        }\n                    }\n            }\n\n        if { $ms_sp_client_type == \"ms-ofba\" } {\n            call write_log debug \"Client-type: (ms-ofba-compliant), http path: ($http_path), user agent: ($http_user_agent)\"\n        }\n\n        if { $ms_sp_client_type != \"ms-ofba\" } {\n            return\n        } elseif { $session_id != \"\" } {\n            if { [ACCESS::session exists -state_allow $session_id] } {\n                set f_allow_session 1\n                return\n            }\n        } elseif { $f_sp_persistent_ck == \"1\" && [HTTP::cookie exists $static::SP_PERSISTENT_CK] } {\n            set sp_persistent_ck_value [HTTP::cookie value $static::SP_PERSISTENT_CK]\n            if { $sp_persistent_ck_value != \"\" && [ACCESS::session exists -state_allow $sp_persistent_ck_value] } {\n                if {not ([catch {HTTP::cookie insert name \"MRHSession\" value $sp_persistent_ck_value}]) } {\n                    call write_log debug \"Restored persistent cookie for sid: ($sp_persistent_ck_value)\"\n                    set f_allow_session 1\n                    return\n                } else {\n                    call write_log error \"Restoring persistent cookie failed for sid: ($sp_persistent_ck_value)\"\n                    unset sp_persistent_ck_value\n                }\n            } else {\n                unset sp_persistent_ck_value\n            }\n        }\n\n        if { !($f_allow_session) && $http_path != $static::MS_OFBA_AUTH_REQ_URI } {\n            if { $ms_ofba_auth_cookie == $static::MS_OFBA_AUTH_TYPE_COOKIE_VALUE } {\n                if { $http_path != $static::MULTI_DOMAIN_AUTH_RESP_URI } {\n                    call write_log debug \"Redirecting for MS OFBA, based on auth type\"\n                    HTTP::respond 302 -version 1.1 -noserver Location $static::MS_OFBA_AUTH_REQ_URI\n                }\n            } else {\n                call write_log debug \"Responding 403 for MS OFBA initiation\"\n                if {$ofba_auth_dialog_sz == \"\"} {\n                    set ofba_auth_dialog_sz $static::MS_OFBA_AUTH_DIALOG_SZ\n                }\n                HTTP::respond 403 -version \"1.1\" noserver \\\n                    \"X-FORMS_BASED_AUTH_REQUIRED\" \"https://[HTTP::host]$static::MS_OFBA_AUTH_REQ_URI\" \\\n                    \"X-FORMS_BASED_AUTH_RETURN_URL\" \"https://[HTTP::host]$static::MS_OFBA_AUTH_RETURN_URI\" \\\n                    \"X-FORMS_BASED_AUTH_DIALOG_SIZE\" $ofba_auth_dialog_sz \\\n                    \"Set-Cookie\" \"MRHSession=deleted; expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;secure\" \\\n                    \"Set-Cookie\" \"LastMRH_Session=deleted; expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;secure\" \\\n                    \"Set-Cookie\" \"$static::MS_OFBA_AUTH_TYPE_COOKIE=$static::MS_OFBA_AUTH_TYPE_COOKIE_VALUE;path=/;secure;HttpOnly\" \\\n                    \"Connection\" \"Close\"\n            }\n        }\n    }\n\n    when HTTP_RESPONSE {\n        if { $f_sp_persistent_ck == \"1\" && ([info exists ms_sp_client_type] && $ms_sp_client_type == \"browser\") && $session_id != \"\"} {\n            if {$sp_persistent_ck_timeout == \"\"} {\n                set sp_persistent_ck_timeout $static::SP_PERSISTENT_CK_TIMEOUT\n            }\n            call write_log debug \"Set-Cookie for SharePoint persistent cookie: ($static::SP_PERSISTENT_CK) for sid: ($session_id), having timeout: ($sp_persistent_ck_timeout)\"\n\n            HTTP::cookie remove $static::SP_PERSISTENT_CK\n            HTTP::cookie insert name $static::SP_PERSISTENT_CK value $session_id path \"/\"\n            HTTP::cookie expires $static::SP_PERSISTENT_CK $sp_persistent_ck_timeout relative\n            HTTP::cookie secure $static::SP_PERSISTENT_CK enable\n            HTTP::cookie httponly $static::SP_PERSISTENT_CK enable\n\n        } elseif { [info exists sp_persistent_ck_value] && $sp_persistent_ck_value ne \"\" } {\n            call write_log debug \"Restoring Cookie for MRHSession from persistent cookie: ($sp_persistent_ck_value)\"\n\n            HTTP::cookie insert name MRHSession value $sp_persistent_ck_value path \"/\"\n            HTTP::cookie secure MRHSession enable\n            unset sp_persistent_ck_value\n        }\n    }\n\n    when ACCESS_SESSION_STARTED {\n        if { ![info exists ms_sp_client_type] || $ms_sp_client_type != \"ms-ofba\"} {\n            return\n        }\n        ACCESS::session data set session.client.type $static::MS_OFBA_ENABLED_CLIENT_TYPE\n    }\n\n    when ACCESS_ACL_ALLOWED {\n        switch -glob -- [string tolower [HTTP::path]] $static::MS_OFBA_AUTH_REQ_URI {\n            ACCESS::respond 302 noserver Location \"https://[HTTP::host]$static::MS_OFBA_AUTH_RETURN_URI\"\n        } $static::MS_OFBA_AUTH_RETURN_URI {\n            ACCESS::respond 200 content $static::MS_OFBA_AUTH_SUCCESS_BODY noserver \\\n                \"Set-Cookie\" \"$static::MS_OFBA_AUTH_TYPE_COOKIE=deleted;expires=Thu, 01 Jan 1970 00:00:00 GMT;;path=/;secure;HttpOnly\"\n        } \"*/signout.aspx\" {\n            ACCESS::respond 302 noserver Location \"/vdesk/hangup.php3\"\n                return\n        } \"/_layouts/accessdenied.aspx\" {\n            if {[string tolower [URI::query [HTTP::uri] loginasanotheruser]] equals \"true\" } {\n                ACCESS::session remove\n                ACCESS::respond 302 noserver Location \"/\"\n                return\n            }\n        } default {\n        }\n    }", "ignore_verification": "no", "name": "_sys_APM_MS_Office_OFBA_Support", "full_path": "/Common/_sys_APM_MS_Office_OFBA_Support", "signature": "p1HdNwP0C3zPUdZ1YJP/wXPzxYdE+OFPoV5kw4tagP9AEl/O+aFbRVJr7fpGf+AxbL6FebKT4ilyqGQWRYKnNfA8OlD6yn1mJGwVjpx3Oy0+Ty6Z6sgbiE8GExKJcEI9QvPfGIt0eEzlLD1oZQRsZX2v/H3vJfDzVf6o38yBv5R8rygufgNxpZHX4ybqCvEzsQwey4GOErbwAXgp51gucbuLQRZ/2SRakXPouSWx8TvrlIk9ijdzTBRUD7PsLXLRiru2+0XfhW0V6l+Ehk7eQaUdukM4wIHYYDkgmr/50M0C/ScJXhMuwD9CA55jEW1+ht7QXQEc/Wxkmw9ky+cAZA=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when RULE_INIT {\n        set static::ACCESS_LOG_ECP_PREFIX       \"014d0002:7: ECP client\"\n    }\n    when HTTP_REQUEST {\n        set http_path            [string tolower [HTTP::path]]\n        set http_hdr_auth        [HTTP::header Authorization]\n        set http_hdr_client_app  [HTTP::header X-MS-Client-Application]\n        set http_hdr_client_ip   [HTTP::header X-MS-Forwarded-Client-IP]\n        set MRHSession_cookie    [HTTP::cookie value MRHSession]\n\n        if { ($http_path == \"/saml/idp/profile/redirectorpost/sso\") &&\n             ($http_hdr_client_app != \"\") &&\n             ($http_hdr_client_app contains \"Microsoft.Exchange\") } {\n            HTTP::uri \"/saml/idp/profile/ecp/sso\"\n        } elseif { ($http_path != \"/saml/idp/profile/ecp/sso\")  } {\n            return\n        }\n        set f_saml_ecp_request 1\n        unset http_path\n\n        # If MRHSession cookie from client is present, skip further processing.\n        if { $MRHSession_cookie != \"\" } {\n            if { [ACCESS::session exists -state_allow -sid $MRHSession_cookie] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_ECP_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie\"\n            } else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_ECP_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie\"\n            }\n            return\n        }\n\n        if { ($http_hdr_client_app != \"\") &&\n            ($http_hdr_client_app contains \"Microsoft.Exchange\") &&\n            ($http_hdr_client_ip != \"\") } {\n\t    set src_ip $http_hdr_client_ip\n\t}\n        unset http_hdr_client_app\n        unset http_hdr_client_ip\n\n        if { ! [ info exists src_ip ] } {\n            set src_ip          [IP::remote_addr]\n        }\n\n        # Only allow HTTP Basic Authentication.\n        if { ($http_hdr_auth == \"\") || ([ string match -nocase {basic *} $http_hdr_auth ] != 1 ) } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_ECP_PREFIX ECP request does not contain HTTP Basic Authorization header.\"\n            unset http_hdr_auth\n            return\n        }\n\n        set apm_username        [ string tolower [HTTP::username] ]\n        set apm_password        [HTTP::password]\n\n        binary scan [md5 \"$apm_password$src_ip\"] H* user_hash\n        set user_key {}\n        append user_key $apm_username \".\" $user_hash\n        unset user_hash\n\n        set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n        if { [ llength $apm_cookie_list ] != 0 } {\n            set apm_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n            if { $apm_cookie != \"\" } {\n                HTTP::cookie insert name MRHSession value $apm_cookie\n            }\n        }\n\n        HTTP::header insert \"clientless-mode\" 1\n        HTTP::header insert \"username\" $apm_username\n        HTTP::header insert \"password\" $apm_password\n        unset apm_username\n        unset apm_password\n        unset http_hdr_auth\n    }\n\n    when ACCESS_SESSION_STARTED {\n        if { [ info exists f_saml_ecp_request ] && $f_saml_ecp_request == 1 } {\n            if { [ info exists user_key ] } {\n                ACCESS::session data set \"session.user.uuid\" $user_key\n            }\n            if { [ info exists  src_ip ] } {\n                ACCESS::session data set \"session.user.clientip\" $src_ip\n            }\n        }\n    }\n\n    when HTTP_RESPONSE {\n        if { [ info exists f_saml_ecp_request ] && $f_saml_ecp_request == 1 } {\n            unset f_saml_ecp_request\n            unset apm_cookie\n        }\n    }", "ignore_verification": "no", "name": "_sys_APM_Office365_SAML_BasicAuth", "full_path": "/Common/_sys_APM_Office365_SAML_BasicAuth", "signature": "lbhM9rFH3R+uo+pp4DWotUdvGbvFhCBhe5aZKgpRZdl5k39X50MrrIhz2UkjY1VV2JORwPaSpdyN6mVY0cJccFdLjGgaNCtNuMoT2grlOE7F9Zw73imFGbu8UiqmZT0ZLcNXCglZplp08o9O9xn7UNJ5E/gYWrjCI2QaebwGu1NMSLK+/WjGHNKr28xN2Cwo0rk9hg+6fC9YxzlGVoRlxPuYRelygqD0bAQKTux4tuTQPF/4CDNpttyVX72ULJpZUINwW1UeCZoosB1O4XubT9PaqEl53ioom8LcGZEn5vKOH+TlvKXjPi5kV1ci2d+fjCf7ZoOW6EVyEEc2aL2cWw=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when RULE_INIT {\n        set static::actsync_401_http_body   \"<html><title>Authentication Failed</title><body>Error: Authentication Failure</body></html>\"\n        set static::actsync_503_http_body   \"<html><title>Service is not available</title><body>Error: Service is not available</body></html>\"\n        set static::ACCESS_LOG_PREFIX       \"01490000:7:\"\n    }\n    when HTTP_REQUEST {\n        set http_path                       [string tolower [HTTP::path]]\n        set f_clientless_mode               0\n\n        if { $http_path == \"/microsoft-server-activesync\" } {\n        }\n        elseif { $http_path == \"/autodiscover/autodiscover.xml\" } {\n            set f_auto_discover 1\n        }\n        else return\n\n        if { ! [ info exists src_ip ] } {\n            set src_ip                            [IP::remote_addr]\n        }\n        if { ! [ info exists PROFILE_RESTRICT_SINGLE_IP ] } {\n            set PROFILE_RESTRICT_SINGLE_IP  \t  1\n        }\n        # Only allow HTTP Basic Authentication.\n        set auth_info_b64enc                \"\"\n        set http_hdr_auth                   [HTTP::header Authorization]\n        regexp -nocase {Basic (.*)} $http_hdr_auth match auth_info_b64enc\n        if { $auth_info_b64enc == \"\" } {\n            set http_hdr_auth \"\"\n        }\n\n        if { $http_hdr_auth == \"\" } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Empty/invalid HTTP Basic Authorization header\"\n            HTTP::respond 401 content $static::actsync_401_http_body Connection close\n            return\n        }\n\n        set MRHSession_cookie               [HTTP::cookie value MRHSession]\n        # Do we have valid MRHSession cookie.\n        if { $MRHSession_cookie != \"\" } {\n            if { [ACCESS::session exists -state_allow -sid $MRHSession_cookie] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie\"\n                # Default profile access setting is false\n                if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                    return\n                }\n                elseif { [ IP::addr $src_ip equals [ ACCESS::session data get -sid $MRHSession_cookie \"session.user.clientip\" ] ] } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP matched\"\n                    return\n                }\n                else {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP does not matched\"\n                }\n            }\n            else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie\"\n            }\n            set MRHSession_cookie \"\"\n            HTTP::cookie remove MRHSession\n        }\n\n        set apm_username                    [ string tolower [HTTP::username] ]\n        set apm_password                    [HTTP::password]\n\n        if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n            binary scan [md5 \"$apm_password$\"] H* user_hash\n        } else {\n            binary scan [md5 \"$apm_password$src_ip\"] H* user_hash\n        }\n        set user_key {}\n        append user_key $apm_username \".\" $user_hash\n        unset user_hash\n\n        set f_insert_clientless_mode    0\n        set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n        if { [ llength $apm_cookie_list ] != 0 } {\n            set apm_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n            if { $apm_cookie != \"\" } {\n                HTTP::cookie insert name MRHSession value $apm_cookie\n            } else {\n                set f_insert_clientless_mode 1\n            }\n        } else {\n            set f_insert_clientless_mode 1\n        }\n\n        if { $f_insert_clientless_mode == 1 } {\n            HTTP::header insert \"clientless-mode\" 1\n            HTTP::header insert \"username\" $apm_username\n            HTTP::header insert \"password\" $apm_password\n        }\n        unset f_insert_clientless_mode\n    }\n    when ACCESS_SESSION_STARTED {\n        if { [ info exists user_key ] } {\n            ACCESS::session data set \"session.user.uuid\" $user_key\n            ACCESS::session data set \"session.user.microsoft-exchange-client\" 1\n            ACCESS::session data set \"session.user.activesync\" 1\n            if { [ info exists f_auto_discover ] && $f_auto_discover == 1 } {\n                set f_auto_discover 0\n                ACCESS::session data set \"session.user.microsoft-autodiscover\" 1\n            }\n        }\n    }\n    when ACCESS_POLICY_COMPLETED {\n        if { ! [ info exists user_key ] } {\n            return\n        }\n\n        set policy_result [ACCESS::policy result]\n        switch $policy_result {\n        \"allow\" {\n        }\n        \"deny\" {\n            ACCESS::respond 401 content $static::actsync_401_http_body Connection close\n            ACCESS::session remove\n        }\n        default {\n            ACCESS::respond 503 content $static::actsync_503_http_body Connection close\n            ACCESS::session remove\n        }\n        }\n\n        unset user_key\n    }", "ignore_verification": "no", "name": "_sys_APM_activesync", "full_path": "/Common/_sys_APM_activesync", "signature": "d3ZoP7HHzJwjxIV+zgaF0J7nh0d0e3rlE5srbLvvZXOW9mSQ4VzalGLunwQMl6rths50p6zwETao3banbrWCnI+HEBKtDy61/wFJJ3UJ6RHWPSFSFQhcJMOY4WIdSRuu0VwTlMn6vte42xe2UmTWeB7tSs/STKoOQrDy0U7c34AAG9gSRaikPJz/hi/McWRIxX4LtS+gecwXX1KXM3lB7dz1kvOYOid9h1tsmUtftpB/neqmReMch3gaWrL7ZYcEECCcHEhyW6B7hqT91r5a9VG4nlq8oQ5MLa07zwVT5HV2id5lgIfhpPSzXUJbe3SJ7wN5TThtaWhBgDIHp+CYJA=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when HTTP_REQUEST {\n        set thecert \"\"\n        set ckname F5KRBAUTH\n        set ckpass abc123\n        set authprofiles [PROFILE::list auth]\n        # Search the auth profiles for the krbdelegate(7) and grab cookie info\n        foreach profname $authprofiles {\n            if { [PROFILE::auth $profname type] == 7 } {\n                set tmpckname [PROFILE::auth $profname cookie_name]\n                set tmpckpass [PROFILE::auth $profname cookie_key]\n                if {[PROFILE::auth $profname cookie_name] != \"\" } {\n                    set ckname $tmpckname\n                    set ckpass $tmpckpass\n                    break\n                }\n            }\n        }\n        set seecookie 0\n        set insertcookie 0\n        # check for the cookie\n        if {not [info exists tmm_auth_http_sids(krbdelegate)]} {\n            set tmm_auth_sid [AUTH::start pam default_krbdelegate]\n            set tmm_auth_http_sids(krbdelegate) $tmm_auth_sid\n            AUTH::subscribe $tmm_auth_sid\n        } else {\n            set tmm_auth_sid $tmm_auth_http_sids(krbdelegate)\n        }\n        if { [PROFILE::exists clientssl] } {\n            set certcmd \"SSL::cert 0\"\n            set thecert [ eval $certcmd ]\n        }\n        if { $thecert == \"\" } {\n            # if no cert, assume old kerb delegation\n            # if there is no Authorization header and no cookie, get one.\n            if { ([HTTP::header Authorization] == \"\") and\n                  (not [HTTP::cookie exists $ckname])} {\n                HTTP::respond 401 WWW-Authenticate Negotiate\n                return\n            }\n        }\n        if {[HTTP::cookie exists $ckname]} {\n            set ckval [HTTP::cookie decrypt $ckname $ckpass]\n            AUTH::username_credential $tmm_auth_sid \"cookie\"\n            AUTH::password_credential $tmm_auth_sid $ckval\n            set seecookie 1\n        } else {\n            if { $thecert == \"\" } {\n                # Kerberos Delegation - set username\n                # Strip off the Negotiate before the base64d goodness\n                AUTH::username_credential $tmm_auth_sid [lindex [HTTP::header Authorization] 1]\n            }\n            else {\n                # Protocol Transition - set ttm_auth_sid\n                AUTH::username_credential $tmm_auth_sid \"krpprottran\"\n                AUTH::cert_credential $tmm_auth_sid $thecert\n            }\n            AUTH::password_credential $tmm_auth_sid \"xxxx\"\n        }\n        AUTH::authenticate $tmm_auth_sid\n\n        if {not [info exists tmm_auth_http_collect_count]} {\n            HTTP::collect\n            set tmm_auth_http_successes 0\n            set tmm_auth_http_collect_count 1\n        } else {\n            incr tmm_auth_http_collect_count\n        }\n    }\n    when AUTH_RESULT {\n        if {not [info exists tmm_auth_http_sids(krbdelegate)] or \\\n            ($tmm_auth_http_sids(krbdelegate) != [AUTH::last_event_session_id]) or \\\n            (not [info exists tmm_auth_http_collect_count])} {\n            return\n        }\n        if {[AUTH::status] == 0} {\n            incr tmm_auth_http_successes\n        }\n        # If multiple auth sessions are pending and\n        # one failure results in termination and this is a failure\n        # or enough successes have now occurred\n        if {([array size tmm_auth_http_sids] > 1) and \\\n            ((not [info exists tmm_auth_http_sufficient_successes] or \\\n             ($tmm_auth_http_successes >= $tmm_auth_http_sufficient_successes)))} {\n            # Abort the other auth sessions\n            foreach {type sid} [array get tmm_auth_http_sids] {\n                unset tmm_auth_http_sids($type)\n                if {($type ne \"krbdelegate\") and ($sid != -1)} {\n                    AUTH::abort $sid\n                    incr tmm_auth_http_collect_count -1\n               }\n            }\n        }\n        # If this is the last outstanding auth then either\n        # release or respond to this session\n        incr tmm_auth_http_collect_count -1\n        if {$tmm_auth_http_collect_count == 0} {\n            unset tmm_auth_http_collect_count\n            if { [AUTH::status] == 0 } {\n                array set pamout [AUTH::response_data]\n                HTTP::header replace Authorization \"Negotiate $pamout(krbdelegate:attr:SPNEGO)\"\n                if {$seecookie == 0} {\n                    set insertcookie $pamout(krbdelegate:attr:KRB5CCNAME)\n                }\n                HTTP::release\n            } else {\n                HTTP::respond 401 WWW-Authenticate Negotiate \"Set-Cookie\" \"$ckname= ; expires=Wed Dec 31 16:00:00 1969\"\n            }\n        }\n    }\n    # When the response goes out, if we need to insert a cookie, do it.\n    when HTTP_RESPONSE {\n        if {$insertcookie != 0} {\n            HTTP::cookie insert name $ckname value $insertcookie\n            HTTP::cookie encrypt $ckname $ckpass\n        }\n    }", "ignore_verification": "no", "name": "_sys_auth_krbdelegate", "full_path": "/Common/_sys_auth_krbdelegate", "signature": "KlDm5lT1k17/I3injIvybDZ6HIJC8qpdPgwUlPQ42tufrR7ZVVFvtDlDEdN4/QPtex/u1oEA6mij+N8mMc/FSy3B+jRogi7HyI/2glxNh8St/+odNp3ho6gWvTpNAS8XBIdixxCxpJYahIw5h9flJ+gZywLabCSMQAlFYoXqdpjZp5oZ/kN7/J94joR0okCRxI7fHgVLNcbXKWg+Kcuw0TJkyNWWJh1J6DeRURPzol+yo8GmCMdDia9MF68Kho8b5LWQuZIwt727OThDz0BBhAuG6oEn06GiPmPSxczJrei/k5Zd1SsJe0xpWvlLKP4vps/W8TcMhY3xwY70RP1cfQ=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when HTTP_REQUEST {\n        if {not [info exists tmm_auth_http_sids(ldap)]} {\n            set tmm_auth_sid [AUTH::start pam default_ldap]\n            set tmm_auth_http_sids(ldap) $tmm_auth_sid\n            if {[info exists tmm_auth_subscription]} {\n                AUTH::subscribe $tmm_auth_sid\n            }\n        } else {\n            set tmm_auth_sid $tmm_auth_http_sids(ldap)\n        }\n        AUTH::username_credential $tmm_auth_sid [HTTP::username]\n        AUTH::password_credential $tmm_auth_sid [HTTP::password]\n        AUTH::authenticate $tmm_auth_sid\n\n        if {not [info exists tmm_auth_http_collect_count]} {\n            HTTP::collect\n            set tmm_auth_http_successes 0\n            set tmm_auth_http_collect_count 1\n        } else {\n            incr tmm_auth_http_collect_count\n        }\n    }\n    when AUTH_RESULT {\n        if {not [info exists tmm_auth_http_sids(ldap)] or \\\n           ($tmm_auth_http_sids(ldap) != [AUTH::last_event_session_id]) or \\\n           (not [info exists tmm_auth_http_collect_count])} {\n            return\n        }\n        if {[AUTH::status] == 0} {\n            incr tmm_auth_http_successes\n        }\n        # If multiple auth sessions are pending and\n        # one failure results in termination and this is a failure\n        # or enough successes have now occurred\n        if {([array size tmm_auth_http_sids] > 1) and \\\n            ((not [info exists tmm_auth_http_sufficient_successes] or \\\n             ($tmm_auth_http_successes >= $tmm_auth_http_sufficient_successes)))} {\n            # Abort the other auth sessions\n            foreach {type sid} [array get tmm_auth_http_sids] {\n                unset tmm_auth_http_sids($type)\n                if {($type ne \"ldap\") and ($sid != -1)} {\n                    AUTH::abort $sid\n                    incr tmm_auth_http_collect_count -1\n                }\n            }\n        }\n\n        # If this is the last outstanding auth then either\n        # release or respond to this session\n        incr tmm_auth_http_collect_count -1\n        if {$tmm_auth_http_collect_count == 0} {\n            unset tmm_auth_http_collect_count\n            if {[AUTH::status] == 0} {\n                HTTP::release\n            } else {\n                HTTP::respond 401\n            }\n        }\n    }", "ignore_verification": "no", "name": "_sys_auth_ldap", "full_path": "/Common/_sys_auth_ldap", "signature": "kzFhXHp72R2BTE+vwS9DBG2dlHsnGdWPsFSEx18DMcXyOypZi34rS+un6RpZeQ0Yib9GjXmEmIqLYQVCS9JTmcnjE0AEztcIot24B1NBVOHHAUfA7LJko7hqB9L0STfRTSbjaV13+kVDJMWYj1qcxGX7bIjzxXtPwPaDHWooxADCxmLlt9siSSYYnJqTJLcSutAJd16k+Y6lUKrcXoCl+0YIKm1CF+RUyWFsCNZxcmaOIyUqUnrLgpBinYyxb2T0MN9K/A9mXT6L+gscqHT+kAXxDJESOO1FHHvq4ld2dfK+Z6eWALvR0NGaCmYN2SEnfyZ3dfvb0ZdfWcyTqysEOw=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when HTTP_REQUEST {\n        if {not [info exists tmm_auth_http_sids(radius)]} {\n            set tmm_auth_sid [AUTH::start pam default_radius]\n            set tmm_auth_http_sids(radius) $tmm_auth_sid\n            if {[info exists tmm_auth_subscription]} {\n                AUTH::subscribe $tmm_auth_sid\n            }\n        } else {\n            set tmm_auth_sid $tmm_auth_http_sids(radius)\n        }\n        AUTH::username_credential $tmm_auth_sid [HTTP::username]\n        AUTH::password_credential $tmm_auth_sid [HTTP::password]\n        AUTH::authenticate $tmm_auth_sid\n\n        if {not [info exists tmm_auth_http_collect_count]} {\n            HTTP::collect\n            set tmm_auth_http_successes 0\n            set tmm_auth_http_collect_count 1\n        } else {\n            incr tmm_auth_http_collect_count\n        }\n    }\n    when AUTH_RESULT {\n        if {not [info exists tmm_auth_http_sids(radius)] or \\\n            ($tmm_auth_http_sids(radius) != [AUTH::last_event_session_id]) or \\\n            (not [info exists tmm_auth_http_collect_count])} {\n            return\n        }\n        if {[AUTH::status] == 0} {\n            incr tmm_auth_http_successes\n        }\n        # If multiple auth sessions are pending and\n        # one failure results in termination and this is a failure\n        # or enough successes have now occurred\n        if {([array size tmm_auth_http_sids] > 1) and \\\n            ((not [info exists tmm_auth_http_sufficient_successes] or \\\n             ($tmm_auth_http_successes >= $tmm_auth_http_sufficient_successes)))} {\n            # Abort the other auth sessions\n            foreach {type sid} [array get tmm_auth_http_sids] {\n                unset tmm_auth_http_sids($type)\n                if {($type ne \"radius\") and ($sid != -1)} {\n                    AUTH::abort $sid\n                    incr tmm_auth_http_collect_count -1\n                }\n            }\n        }\n        # If this is the last outstanding auth then either\n        # release or respond to this session\n        incr tmm_auth_http_collect_count -1\n        if {$tmm_auth_http_collect_count == 0} {\n            unset tmm_auth_http_collect_count\n            if { [AUTH::status] == 0 } {\n                HTTP::release\n            } else {\n                HTTP::respond 401\n            }\n        }\n    }", "ignore_verification": "no", "name": "_sys_auth_radius", "full_path": "/Common/_sys_auth_radius", "signature": "k3ZS7fMZZN+W3HDVg2i2FWS28Mv/l0JDnym3rEGY/JOn/L71DpzEEpTvyO+wU2Oecu7XfnBpkRG5mTTGGBMOOPKXoNFdRYbXprB+DRJhG2vOcR4KnxEsKyGuOM8MxNVb9Bg6jufGsqql/vEEGJJH43RjUqYIOiMNotKbghiC3BUBQfMN6XZlP3tgXTMM1wLSxei840hKMxpCa+CKWvQcnFHKzmwD3uN1S18Dx6yzGUFLSY+OFPHsctywMPQwzrZV7slOBgRGZMQbxqQAejddagQimzGzCKb0cDqdU2X4Vu6uqx1G3Lv1cihvMFDM7pLnfi2JskZ0nxNBBZ8rOcCVPw=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when CLIENT_ACCEPTED {\n        set tmm_auth_ssl_cc_ldap_sid 0\n        set tmm_auth_ssl_cc_ldap_done 0\n    }\n    when CLIENTSSL_CLIENTCERT {\n        if {[SSL::cert count] == 0} {\n            return\n        }\n        set tmm_auth_ssl_cc_ldap_done 0\n        if {$tmm_auth_ssl_cc_ldap_sid == 0} {\n            set tmm_auth_ssl_cc_ldap_sid [AUTH::start pam default_ssl_cc_ldap]\n            if {[info exists tmm_auth_subscription]} {\n                AUTH::subscribe $tmm_auth_ssl_cc_ldap_sid\n            }\n        }\n        AUTH::cert_credential $tmm_auth_ssl_cc_ldap_sid [SSL::cert 0]\n        AUTH::authenticate $tmm_auth_ssl_cc_ldap_sid\n        SSL::handshake hold\n    }\n    when CLIENTSSL_HANDSHAKE {\n        set tmm_auth_ssl_cc_ldap_done 1\n    }\n    when AUTH_RESULT {\n        if {[info exists tmm_auth_ssl_cc_ldap_sid] and \\\n            ($tmm_auth_ssl_cc_ldap_sid == [AUTH::last_event_session_id])} {\n            set tmm_auth_status [AUTH::status]\n            if {$tmm_auth_status == 0} {\n                set tmm_auth_ssl_cc_ldap_done 1\n                SSL::handshake resume\n            } elseif {$tmm_auth_status != -1 || $tmm_auth_ssl_cc_ldap_done == 0} {\n                reject\n            }\n        }\n    }", "ignore_verification": "no", "name": "_sys_auth_ssl_cc_ldap", "full_path": "/Common/_sys_auth_ssl_cc_ldap", "signature": "Ls7LEbcMGMMAy6eJsdaAn7tu3l2ROMB2XWCeLRc6GfBOiSF+EvVbQcSrl5MqklVcnQF9c4fzz+ffOPFyA9RkbicoFO2F/nr2B7NOFcuNNx3e9f/043A62ODBb6d18/IKO3hnEVwnRRBkB9SRPKc6tsHrReewPEB8TdA1eNb5JcautKEa3pbxLR76k60FS8k5wyPJ7W58gKT1tnR2n5EgM5K3wQSiCXKCONknyS2MKB6iEkk3uXSbQP0lzFCxPAPyR2JQ/ZNniC3jYghSr+M5i3KaMKjSjdsTt6fYpDxLH9Iikk5ZrtJGTJeP7P8cNQallzP7JJsB5aqui/SbFA0SFQ=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when CLIENT_ACCEPTED {\n        set tmm_auth_ssl_crldp_sid 0\n        set tmm_auth_ssl_crldp_done 0\n    }\n    when CLIENTSSL_CLIENTCERT {\n        if {[SSL::cert count] == 0} {\n            return\n        }\n        set tmm_auth_ssl_crldp_done 0\n        if {$tmm_auth_ssl_crldp_sid == 0} {\n            set tmm_auth_ssl_crldp_sid [AUTH::start pam default_ssl_crldp]\n            if {[info exists tmm_auth_subscription]} {\n                AUTH::subscribe $tmm_auth_ssl_crldp_sid\n            }\n        }\n        AUTH::cert_credential $tmm_auth_ssl_crldp_sid [SSL::cert 0]\n        AUTH::cert_issuer_credential $tmm_auth_ssl_crldp_sid [SSL::cert issuer 0]\n        AUTH::authenticate $tmm_auth_ssl_crldp_sid\n        SSL::handshake hold\n    }\n    when CLIENTSSL_HANDSHAKE {\n        set tmm_auth_ssl_crldp_done 1\n    }\n    when AUTH_RESULT {\n        if {[info exists tmm_auth_ssl_crldp_sid] and \\\n            ($tmm_auth_ssl_crldp_sid == [AUTH::last_event_session_id])} {\n            set tmm_auth_status [AUTH::status]\n            if {$tmm_auth_status == 0} {\n                set tmm_auth_ssl_crldp_done 1\n                SSL::handshake resume\n            } elseif {$tmm_auth_status != -1 || $tmm_auth_ssl_crldp_done == 0} {\n                reject\n            }\n        }\n    }", "ignore_verification": "no", "name": "_sys_auth_ssl_crldp", "full_path": "/Common/_sys_auth_ssl_crldp", "signature": "mVtMWHPruxGXVKW3hAZn3uBJkGNB8SmyzvR6u2OrQ+U71Ms+vAVuNSzCBJ05qJ7qfouOwtUYMtB1QMSjEdnLe2Z259y4gfnrEZEDpEZX8Co1rTEoP3grsw0heuITOPIX6R+MXrqfcmbaKRGGq2wJcNPLJXY/VsdYQBPDmaPrn/ZPRbmXSdRnpGFz4yN99tOw4OE5wvkp4CRg/zfSfQeFkzLrSeApGSWWAVMT09LW6aZmOWuC2bzr7Gpc7vtJtFuka8U7jSXAMJNOzqE55qhIvA3Y7UkIYemyXD0NCXmkUEWsPsuIzmZH6k6W8cXdhHtk+YEDvJDhKNO7h/C0qKPlaA=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when CLIENT_ACCEPTED {\n        set tmm_auth_ssl_ocsp_sid 0\n        set tmm_auth_ssl_ocsp_done 0\n    }\n    when CLIENTSSL_CLIENTCERT {\n        if {[SSL::cert count] == 0} {\n            return\n        }\n        set tmm_auth_ssl_ocsp_done 0\n        if {$tmm_auth_ssl_ocsp_sid == 0} {\n            set tmm_auth_ssl_ocsp_sid [AUTH::start pam default_ssl_ocsp]\n            if {[info exists tmm_auth_subscription]} {\n                AUTH::subscribe $tmm_auth_ssl_ocsp_sid\n            }\n        }\n        AUTH::cert_credential $tmm_auth_ssl_ocsp_sid [SSL::cert 0]\n        AUTH::cert_issuer_credential $tmm_auth_ssl_ocsp_sid [SSL::cert issuer 0]\n        AUTH::authenticate $tmm_auth_ssl_ocsp_sid\n        SSL::handshake hold\n    }\n    when CLIENTSSL_HANDSHAKE {\n        set tmm_auth_ssl_ocsp_done 1\n    }\n    when AUTH_RESULT {\n        if {[info exists tmm_auth_ssl_ocsp_sid] and \\\n            ($tmm_auth_ssl_ocsp_sid == [AUTH::last_event_session_id])} {\n            set tmm_auth_status [AUTH::status]\n            if {$tmm_auth_status == 0} {\n                set tmm_auth_ssl_ocsp_done 1\n                SSL::handshake resume\n            } elseif {$tmm_auth_status != -1 || $tmm_auth_ssl_ocsp_done == 0} {\n                reject\n            }\n        }\n    }", "ignore_verification": "no", "name": "_sys_auth_ssl_ocsp", "full_path": "/Common/_sys_auth_ssl_ocsp", "signature": "UAbD8tfmCrHiqB/uh1XzQfJvsgT+StbJ+Zq37qc+ODGStnFwDjXroPuPGPAycPBveiky0CU9/gR24Y8zfhMzbHK2lm/WvUq7cdrVIX2ZAvIVof9PpmfWli1c9iPe8EEau0yrOD7pZeyMpYM2hIlG1L9YmhBSJGwGV2UzmKmFdLsBWuGfcfBW7ZXQTjKz0UhT4YWUbpF0ws9QNJln8zsiCPlChF2OAJk35ZxGoZmKGA/xL2fJVbsI3vz3HAbAadKx0AiXqk6aTwtQny18mu0nVsPbO5t/KwqH6C3rc/qoVgqG6FsvVen2OvNYDBnq4gm+A5Mf1abey7+edQT6KJ9ztA=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when HTTP_REQUEST {\n        if {not [info exists tmm_auth_http_sids(tacacs)]} {\n            set tmm_auth_sid [AUTH::start pam default_tacacs]\n            set tmm_auth_http_sids(tacacs) $tmm_auth_sid\n            if {[info exists tmm_auth_subscription]} {\n                AUTH::subscribe $tmm_auth_sid\n            }\n        } else {\n            set tmm_auth_sid $tmm_auth_http_sids(tacacs)\n        }\n        AUTH::username_credential $tmm_auth_sid [HTTP::username]\n        AUTH::password_credential $tmm_auth_sid [HTTP::password]\n        AUTH::authenticate $tmm_auth_sid\n\n        if {not [info exists tmm_auth_http_collect_count]} {\n            HTTP::collect\n            set tmm_auth_http_successes 0\n            set tmm_auth_http_collect_count 1\n        } else {\n            incr tmm_auth_http_collect_count\n        }\n    }\n    when AUTH_RESULT {\n        if {not [info exists tmm_auth_http_sids(tacacs)] or \\\n            ($tmm_auth_http_sids(tacacs) != [AUTH::last_event_session_id]) or \\\n            (not [info exists tmm_auth_http_collect_count])} {\n            return\n        }\n        if {[AUTH::status] == 0} {\n            incr tmm_auth_http_successes\n        }\n        # If multiple auth sessions are pending and\n        # one failure results in termination and this is a failure\n        # or enough successes have now occurred\n        if {([array size tmm_auth_http_sids] > 1) and \\\n            ((not [info exists tmm_auth_http_sufficient_successes] or \\\n             ($tmm_auth_http_successes >= $tmm_auth_http_sufficient_successes)))} {\n            # Abort the other auth sessions\n            foreach {type sid} [array get tmm_auth_http_sids] {\n                unset tmm_auth_http_sids($type)\n                if {($type ne \"tacacs\") and ($sid != -1)} {\n                    AUTH::abort $sid\n                    incr tmm_auth_http_collect_count -1\n                }\n            }\n        }\n        # If this is the last outstanding auth then either\n        # release or respond to this session\n        incr tmm_auth_http_collect_count -1\n        if {$tmm_auth_http_collect_count == 0} {\n            unset tmm_auth_http_collect_count\n            if { [AUTH::status] == 0 } {\n                HTTP::release\n            } else {\n                HTTP::respond 401\n            }\n        }\n    }", "ignore_verification": "no", "name": "_sys_auth_tacacs", "full_path": "/Common/_sys_auth_tacacs", "signature": "qR6ynw882+5gcwiV6eymN/CZAoF+G4aRd2Xfr+4KWfXAD27876SoHuTyuTKxKxcG5oGXOPppqH/vtbtnBiI+UW6CLEHne3+RPx9EaSxX4ElCg/1ap69j3xPmh2IVSTCrR/93vu9Bnt6DEkNbXelWze5C0jVwMogQdsiVpmn7+YfkSmyyEeAvx8aHkvhK8KL0Pp8AiqrvyDWcBVAtXtioS0YC3S8pxRbpWHuVzA9e4SXNIpCk8vigk7gOmQthC+xerw0/8PEmOfT4G2LNr7TG4M1kQFkLR1foz4EwODEODHjyiyNTWZsCH4sPWJM6xJXS+NbL4k+0lWNPyhnyAGbnpw=="}, {"definition": "nodelete nowrite \n# Copyright 2003-2006, 2012-2013, 2016.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when HTTP_REQUEST {\n       HTTP::redirect https://[getfield [HTTP::host] \":\" 1][HTTP::uri]\n    }", "ignore_verification": "no", "name": "_sys_https_redirect", "full_path": "/Common/_sys_https_redirect", "signature": "WsYy2M6xMqvosIKIEH/FSsvhtWMe6xKOA6i7f09Hbp6tJviSRXSan9xiuI8AUXXeWwB4wU/ZVfd8OXR92fOjZY1GFyea9NoY64nZMZ3+/Yy5XuiqA1bBUNIpZNmv2/zYOhDBsO0Wg27evtJrkgU/3K0cBMIgaAM5gDjlmd1KPSPmpXgcMzNpbSuNAgw8uy5FKlFEjjSNmTzTvKy83QcFFoigAixOsq0ds9Qt2gPvQ+u/4qibvTo/mxf5LF1rDc1cWoVxwspGbC5VMt1DKjG5hRo0PAr2ES9bUyQst+30CoSULDgl3hWt9Q4S5OCKbwTHRZmglvZ12s8+Qolr56cVtQ=="}], "asm_server_technologies": [], "nodes": [], "asm_policies": [], "asm_policy_stats": [], "gtm_cname_wide_ips": [], "system_db": [{"name": "acceleration.log.color", "default": "no_color", "value": "no_color", "value_range": "color_level color_line no_color", "scf_config": "true", "full_path": "acceleration.log.color"}, {"name": "acceleration.log.level", "default": "show_name", "value": "show_name", "value_range": "show_abbrev show_name show_none", "scf_config": "true", "full_path": "acceleration.log.level"}, {"name": "acceleration.wam_assembly.loglevel", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Info Notice Warning", "scf_config": "true", "full_path": "acceleration.wam_assembly.loglevel"}, {"name": "acceleration.wam_bigdb.loglevel", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Info Notice Warning", "scf_config": "true", "full_path": "acceleration.wam_bigdb.loglevel"}, {"name": "acceleration.wam_cache.loglevel", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Info Notice Warning", "scf_config": "true", "full_path": "acceleration.wam_cache.loglevel"}, {"name": "acceleration.wam_event.loglevel", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Info Notice Warning", "scf_config": "true", "full_path": "acceleration.wam_event.loglevel"}, {"name": "acceleration.wam_log.loglevel", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Info Notice Warning", "scf_config": "true", "full_path": "acceleration.wam_log.loglevel"}, {"name": "acceleration.wam_mstor.loglevel", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Info Notice Warning", "scf_config": "true", "full_path": "acceleration.wam_mstor.loglevel"}, {"name": "acceleration.wam_mtags.loglevel", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Info Notice Warning", "scf_config": "true", "full_path": "acceleration.wam_mtags.loglevel"}, {"name": "acceleration.wam_parse.loglevel", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Info Notice Warning", "scf_config": "true", "full_path": "acceleration.wam_parse.loglevel"}, {"name": "acceleration.wam_plugin.loglevel", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Info Notice Warning", "scf_config": "true", "full_path": "acceleration.wam_plugin.loglevel"}, {"name": "acceleration.wam_proxy.loglevel", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Info Notice Warning", "scf_config": "true", "full_path": "acceleration.wam_proxy.loglevel"}, {"name": "access.max.euie_uri.cache.entries", "default": "2048", "value": "2048", "value_range": "unsigned integer min:2048 max:8192", "scf_config": "true", "full_path": "access.max.euie_uri.cache.entries"}, {"name": "adm.block.enable", "default": "0", "value": "1", "value_range": "integer min:0 max:1", "scf_config": "true", "full_path": "adm.block.enable"}, {"name": "adm.cloud.host", "default": "none", "value": "none", "value_range": "string", "scf_config": "true", "full_path": "adm.cloud.host"}, {"name": "adm.enable", "default": "0", "value": "0", "value_range": "integer min:0 max:1", "scf_config": "true", "full_path": "adm.enable"}, {"name": "adm.fastl4.cor.log2scale", "default": "3", "value": "3", "value_range": "unsigned integer min:1 max:8", "scf_config": "true", "full_path": "adm.fastl4.cor.log2scale"}, {"name": "adm.fastl4.rps.log2scale", "default": "10", "value": "10", "value_range": "unsigned integer min:3 max:20", "scf_config": "true", "full_path": "adm.fastl4.rps.log2scale"}, {"name": "adm.health.sensitivity", "default": "50", "value": "50", "value_range": "integer min:30 max:10000", "scf_config": "true", "full_path": "adm.health.sensitivity"}, {"name": "adm.learning.mode", "default": "local", "value": "local", "value_range": "local remote", "scf_config": "true", "full_path": "adm.learning.mode"}, {"name": "adm.log.level", "default": "0", "value": "0", "value_range": "integer min:0 max:10", "scf_config": "true", "full_path": "adm.log.level"}, {"name": "adm.logs.level", "default": "info", "value": "info", "value_range": "debug_lite debug_normal debug_verbose debug_verbose_remote error info warning", "scf_config": "true", "full_path": "adm.logs.level"}, {"name": "adm.max.vs", "default": "20", "value": "20", "value_range": "integer min:2 max:10000", "scf_config": "true", "full_path": "adm.max.vs"}, {"name": "adm.mitigation.attack.timeout", "default": "300", "value": "300", "value_range": "integer min:1 max:86400", "scf_config": "true", "full_path": "adm.mitigation.attack.timeout"}, {"name": "adm.mitigation.greylist.expire.factor", "default": "20", "value": "20", "value_range": "integer min:1 max:100", "scf_config": "true", "full_path": "adm.mitigation.greylist.expire.factor"}, {"name": "adm.mitigation.greylist.expire.time", "default": "180", "value": "180", "value_range": "integer min:10 max:3600", "scf_config": "true", "full_path": "adm.mitigation.greylist.expire.time"}, {"name": "adm.mitigation.greylist.expire.time.jitter", "default": "40", "value": "40", "value_range": "integer min:0 max:100", "scf_config": "true", "full_path": "adm.mitigation.greylist.expire.time.jitter"}, {"name": "adm.mitigation.greylist.expire.timeout", "default": "20", "value": "20", "value_range": "integer min:1 max:3600", "scf_config": "true", "full_path": "adm.mitigation.greylist.expire.timeout"}, {"name": "adm.mitigation.greylist.global.ratio", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "true", "full_path": "adm.mitigation.greylist.global.ratio"}, {"name": "adm.mitigation.max.score.drop.rate", "default": "70", "value": "70", "value_range": "integer min:10 max:100", "scf_config": "true", "full_path": "adm.mitigation.max.score.drop.rate"}, {"name": "adm.mitigation.rate.period", "default": "1000", "value": "1000", "value_range": "integer min:10 max:1000", "scf_config": "true", "full_path": "adm.mitigation.rate.period"}, {"name": "adm.mitigation.vs.global.ratio", "default": "95", "value": "95", "value_range": "integer min:0 max:100", "scf_config": "true", "full_path": "adm.mitigation.vs.global.ratio"}, {"name": "adm.record.cloud", "default": "0", "value": "0", "value_range": "integer min:0 max:1", "scf_config": "true", "full_path": "adm.record.cloud"}, {"name": "adm.record.stats", "default": "0", "value": "0", "value_range": "integer min:0 max:1", "scf_config": "true", "full_path": "adm.record.stats"}, {"name": "adm.record.traffic", "default": "0", "value": "0", "value_range": "integer min:0 max:1", "scf_config": "true", "full_path": "adm.record.traffic"}, {"name": "adm.signature.sampling", "default": "1", "value": "1", "value_range": "integer min:0 max:1", "scf_config": "true", "full_path": "adm.signature.sampling"}, {"name": "adm.signatures.status", "default": "none", "value": "none", "value_range": "string", "scf_config": "true", "full_path": "adm.signatures.status"}, {"name": "afm.activerules.disablesearchforall", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "afm.activerules.disablesearchforall"}, {"name": "afm.inlineruleeditor", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "afm.inlineruleeditor"}, {"name": "afm.portmisuse", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "afm.portmisuse"}, {"name": "afm.shun.insert.count", "default": "0", "value": "0", "value_range": "integer min:0 max:1000", "scf_config": "true", "full_path": "afm.shun.insert.count"}, {"name": "ah.lookupip", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "ah.lookupip"}, {"name": "alertd.lcdwarn", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "alertd.lcdwarn"}, {"name": "alertd.nokia.alarm", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "alertd.nokia.alarm"}, {"name": "antifraud.alertscore.componentsvalidation", "default": "50", "value": "50", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "antifraud.alertscore.componentsvalidation"}, {"name": "antifraud.alertscore.encryptionfailure", "default": "50", "value": "50", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "antifraud.alertscore.encryptionfailure"}, {"name": "antifraud.alertscore.referrerchecks", "default": "50", "value": "50", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "antifraud.alertscore.referrerchecks"}, {"name": "antifraud.alertscore.userdefined", "default": "50", "value": "50", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "antifraud.alertscore.userdefined"}, {"name": "antifraud.alertserverpath", "default": "/rstats/", "value": "/rstats/", "value_range": "string", "scf_config": "true", "full_path": "antifraud.alertserverpath"}, {"name": "antifraud.autotransactions.parameternameintegrity", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "antifraud.autotransactions.parameternameintegrity"}, {"name": "antifraud.bait.maxquerystringlength", "default": "1024", "value": "1024", "value_range": "unsigned integer min:0 max:65536", "scf_config": "true", "full_path": "antifraud.bait.maxquerystringlength"}, {"name": "antifraud.baitsignatures", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.baitsignatures"}, {"name": "antifraud.beforeloadfunction", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.beforeloadfunction"}, {"name": "antifraud.bigrequestsize", "default": "102400", "value": "102400", "value_range": "unsigned integer min:0 max:10485760", "scf_config": "true", "full_path": "antifraud.bigrequestsize"}, {"name": "antifraud.bigresponsesize", "default": "102400", "value": "102400", "value_range": "unsigned integer min:0 max:10485760", "scf_config": "true", "full_path": "antifraud.bigresponsesize"}, {"name": "antifraud.closefakeconnection", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "antifraud.closefakeconnection"}, {"name": "antifraud.cloudservice.forensicexepath", "default": "/forensics.exe", "value": "/forensics.exe", "value_range": "string", "scf_config": "true", "full_path": "antifraud.cloudservice.forensicexepath"}, {"name": "antifraud.componentsvalidation.method", "default": "post", "value": "post", "value_range": "all get none post", "scf_config": "true", "full_path": "antifraud.componentsvalidation.method"}, {"name": "antifraud.cssalertimageid", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.cssalertimageid"}, {"name": "antifraud.customgarbagefunction", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.customgarbagefunction"}, {"name": "antifraud.disableserversidessl.alert", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "antifraud.disableserversidessl.alert"}, {"name": "antifraud.disableserversidessl.cloudservice", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "antifraud.disableserversidessl.cloudservice"}, {"name": "antifraud.disableserversidessl.rules", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "antifraud.disableserversidessl.rules"}, {"name": "antifraud.domainavailabilityurls", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.domainavailabilityurls"}, {"name": "antifraud.encryptionfieldprefix", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.encryptionfieldprefix"}, {"name": "antifraud.encryptionkeylifetime", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:30000000", "scf_config": "true", "full_path": "antifraud.encryptionkeylifetime"}, {"name": "antifraud.externalsourcestargets", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.externalsourcestargets"}, {"name": "antifraud.fieldtypestosend", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.fieldtypestosend"}, {"name": "antifraud.fielsnamesnottosend", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.fielsnamesnottosend"}, {"name": "antifraud.forensic.hookedprocesses", "default": "iexplore.exe", "value": "iexplore.exe", "value_range": "string", "scf_config": "true", "full_path": "antifraud.forensic.hookedprocesses"}, {"name": "antifraud.forensic.selfpostpage", "default": "<!doctype html> <html> <head> <title>Fornesics Report</title> <style> div.main { position: relative; padding: 2em; } span.logo { font-family: Tahoma; font-size: 60px; } div.wait { font-family: arial; font-size: 30px; margin-left: 5px; text-align: left; width: 15em; padding: 20px 0px; } #decoy { display: none; } #logo { widht: 100px; height: 100px;} </style> </head> <body> <div class='main'> <span class='logo'>Forensics Report</span> <div style='position:relative; text-align:left'> <div id='mainText' class='wait'> Forensics scan in process. <br /><br /> Please wait... </div> </div> </div> <div style='display:none'> <form method='POST' id='login'> <input id='username' type='text' name='username' /> <input id='password' type='password' name='password' /> <input id='loginBtn' type='submit' name='login' /> </form> <script> if (document.cookie.indexOf('tr4k1=true') === -1) { document.cookie = 'tr4k1=true'; document.getElementById('username').value = 'samuel'; document.getElementById('password').value = '22jumpst'; document.getElementById('login').submit(); } else { document.cookie = 'tr4k1=true; expires=Thu, 01 Jan 1970 00:00:00 UTC'; document.getElementById('mainText').innerHTML = 'Forensics Scan Complete'; } </script> </div> </body> </html>", "value": "<!doctype html> <html> <head> <title>Fornesics Report</title> <style> div.main { position: relative; padding: 2em; } span.logo { font-family: Tahoma; font-size: 60px; } div.wait { font-family: arial; font-size: 30px; margin-left: 5px; text-align: left; width: 15em; padding: 20px 0px; } #decoy { display: none; } #logo { widht: 100px; height: 100px;} </style> </head> <body> <div class='main'> <span class='logo'>Forensics Report</span> <div style='position:relative; text-align:left'> <div id='mainText' class='wait'> Forensics scan in process. <br /><br /> Please wait... </div> </div> </div> <div style='display:none'> <form method='POST' id='login'> <input id='username' type='text' name='username' /> <input id='password' type='password' name='password' /> <input id='loginBtn' type='submit' name='login' /> </form> <script> if (document.cookie.indexOf('tr4k1=true') === -1) { document.cookie = 'tr4k1=true'; document.getElementById('username').value = 'samuel'; document.getElementById('password').value = '22jumpst'; document.getElementById('login').submit(); } else { document.cookie = 'tr4k1=true; expires=Thu, 01 Jan 1970 00:00:00 UTC'; document.getElementById('mainText').innerHTML = 'Forensics Scan Complete'; } </script> </div> </body> </html>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.forensic.selfpostpage"}, {"name": "antifraud.forensic.showgui", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "antifraud.forensic.showgui"}, {"name": "antifraud.globalbuffersize", "default": "51200", "value": "51200", "value_range": "unsigned integer min:64 max:100000", "scf_config": "true", "full_path": "antifraud.globalbuffersize"}, {"name": "antifraud.htmlfieldobfuscation.seedlength", "default": "4", "value": "4", "value_range": "unsigned integer min:1 max:10", "scf_config": "true", "full_path": "antifraud.htmlfieldobfuscation.seedlength"}, {"name": "antifraud.injectplainjson", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "antifraud.injectplainjson"}, {"name": "antifraud.injectsecurechannelcontext", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "antifraud.injectsecurechannelcontext"}, {"name": "antifraud.injecttags", "default": "body", "value": "body", "value_range": "string", "scf_config": "true", "full_path": "antifraud.injecttags"}, {"name": "antifraud.internalconfig.flag1", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "antifraud.internalconfig.flag1"}, {"name": "antifraud.internalconfig.flag2", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "antifraud.internalconfig.flag2"}, {"name": "antifraud.internalconfig.flag3", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "antifraud.internalconfig.flag3"}, {"name": "antifraud.internalconfig.number1", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "antifraud.internalconfig.number1"}, {"name": "antifraud.internalconfig.number2", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "antifraud.internalconfig.number2"}, {"name": "antifraud.internalconfig.number3", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "antifraud.internalconfig.number3"}, {"name": "antifraud.internalconfig.string1", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.internalconfig.string1"}, {"name": "antifraud.internalconfig.string2", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.internalconfig.string2"}, {"name": "antifraud.internalconfig.string3", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.internalconfig.string3"}, {"name": "antifraud.loadjavascriptasync", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "antifraud.loadjavascriptasync"}, {"name": "antifraud.maxbigrequests", "default": "1000", "value": "1000", "value_range": "unsigned integer min:0 max:100000", "scf_config": "true", "full_path": "antifraud.maxbigrequests"}, {"name": "antifraud.maxbigresponses", "default": "1000", "value": "1000", "value_range": "unsigned integer min:0 max:100000", "scf_config": "true", "full_path": "antifraud.maxbigresponses"}, {"name": "antifraud.maxcookielen", "default": "1000", "value": "1000", "value_range": "unsigned integer min:200 max:2000", "scf_config": "true", "full_path": "antifraud.maxcookielen"}, {"name": "antifraud.maxcookievaluelength", "default": "4096", "value": "4096", "value_range": "unsigned integer min:0 max:30000000", "scf_config": "true", "full_path": "antifraud.maxcookievaluelength"}, {"name": "antifraud.maxheaderlength", "default": "255", "value": "255", "value_range": "unsigned integer min:0 max:1024", "scf_config": "true", "full_path": "antifraud.maxheaderlength"}, {"name": "antifraud.maxhostheaderlength", "default": "255", "value": "255", "value_range": "unsigned integer min:0 max:1024", "scf_config": "true", "full_path": "antifraud.maxhostheaderlength"}, {"name": "antifraud.maxloginresponsesearchlength", "default": "102400", "value": "102400", "value_range": "unsigned integer min:0 max:10485760", "scf_config": "true", "full_path": "antifraud.maxloginresponsesearchlength"}, {"name": "antifraud.maxparamsendinalertmsglength", "default": "1024", "value": "1024", "value_range": "unsigned integer min:512 max:4096", "scf_config": "true", "full_path": "antifraud.maxparamsendinalertmsglength"}, {"name": "antifraud.mobilesafe.alertserverpath", "default": "/rstats/", "value": "/rstats/", "value_range": "string", "scf_config": "true", "full_path": "antifraud.mobilesafe.alertserverpath"}, {"name": "antifraud.mobilesafe.entangledgarbage", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.mobilesafe.entangledgarbage"}, {"name": "antifraud.mobilesafe.urlalert", "default": "/Alert", "value": "/Alert", "value_range": "string", "scf_config": "true", "full_path": "antifraud.mobilesafe.urlalert"}, {"name": "antifraud.mobilesafe.urlalertandroid", "default": "/AndroidAlert", "value": "/AndroidAlert", "value_range": "string", "scf_config": "true", "full_path": "antifraud.mobilesafe.urlalertandroid"}, {"name": "antifraud.mobilesafe.urlalertios", "default": "/iOSAlert", "value": "/iOSAlert", "value_range": "string", "scf_config": "true", "full_path": "antifraud.mobilesafe.urlalertios"}, {"name": "antifraud.mobilesafe.urlconfigandroid", "default": "/AndroidConfig", "value": "/AndroidConfig", "value_range": "string", "scf_config": "true", "full_path": "antifraud.mobilesafe.urlconfigandroid"}, {"name": "antifraud.mobilesafe.urlconfigios", "default": "/iOSConfig", "value": "/iOSConfig", "value_range": "string", "scf_config": "true", "full_path": "antifraud.mobilesafe.urlconfigios"}, {"name": "antifraud.mobilesafe.urlkeyandroid", "default": "/AndroidKey", "value": "/AndroidKey", "value_range": "string", "scf_config": "true", "full_path": "antifraud.mobilesafe.urlkeyandroid"}, {"name": "antifraud.mobilesafe.urlkeyios", "default": "/iOSKey", "value": "/iOSKey", "value_range": "string", "scf_config": "true", "full_path": "antifraud.mobilesafe.urlkeyios"}, {"name": "antifraud.mobilesafe.urlprefix", "default": "/MobileSafe", "value": "/MobileSafe", "value_range": "string", "scf_config": "true", "full_path": "antifraud.mobilesafe.urlprefix"}, {"name": "antifraud.paramvalueencmaxlength", "default": "1024", "value": "1024", "value_range": "unsigned integer min:512 max:4096", "scf_config": "true", "full_path": "antifraud.paramvalueencmaxlength"}, {"name": "antifraud.paramvaluemaxlength", "default": "1024", "value": "1024", "value_range": "unsigned integer min:0 max:300000", "scf_config": "true", "full_path": "antifraud.paramvaluemaxlength"}, {"name": "antifraud.paramvalueusernamemaxlength", "default": "650", "value": "650", "value_range": "unsigned integer min:0 max:300000", "scf_config": "true", "full_path": "antifraud.paramvalueusernamemaxlength"}, {"name": "antifraud.quirkssupport", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "antifraud.quirkssupport"}, {"name": "antifraud.ratdetection.counttosendalert", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:10000", "scf_config": "true", "full_path": "antifraud.ratdetection.counttosendalert"}, {"name": "antifraud.ratdetection.timetoresetcounter", "default": "5000", "value": "5000", "value_range": "unsigned integer min:0 max:3600000", "scf_config": "true", "full_path": "antifraud.ratdetection.timetoresetcounter"}, {"name": "antifraud.riskengine.reportlogins", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "antifraud.riskengine.reportlogins"}, {"name": "antifraud.riskengine.reportrequests", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "antifraud.riskengine.reportrequests"}, {"name": "antifraud.rsadecryption.synchronous", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "antifraud.rsadecryption.synchronous"}, {"name": "antifraud.rsakeysize", "default": "64", "value": "64", "value_range": "unsigned integer min:0 max:128", "scf_config": "true", "full_path": "antifraud.rsakeysize"}, {"name": "antifraud.securemsgenforceip", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "antifraud.securemsgenforceip"}, {"name": "antifraud.securemsglifetime", "default": "86400", "value": "86400", "value_range": "unsigned integer min:0 max:30000000", "scf_config": "true", "full_path": "antifraud.securemsglifetime"}, {"name": "antifraud.securemsgroundtime", "default": "3600", "value": "3600", "value_range": "unsigned integer min:0 max:30000000", "scf_config": "true", "full_path": "antifraud.securemsgroundtime"}, {"name": "antifraud.snifferfunctions", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.snifferfunctions"}, {"name": "antifraud.srcintegrity.dataviolationthreshold", "default": "100", "value": "100", "value_range": "unsigned integer min:100 max:1000", "scf_config": "true", "full_path": "antifraud.srcintegrity.dataviolationthreshold"}, {"name": "antifraud.srcintegrity.goldstandardconsistentreqthreshold", "default": "100", "value": "100", "value_range": "unsigned integer min:100 max:1000", "scf_config": "true", "full_path": "antifraud.srcintegrity.goldstandardconsistentreqthreshold"}, {"name": "antifraud.srcintegrity.goldstandardviolationsthreshold", "default": "10", "value": "10", "value_range": "unsigned integer min:10 max:1000", "scf_config": "true", "full_path": "antifraud.srcintegrity.goldstandardviolationsthreshold"}, {"name": "antifraud.srcintegrity.lowseverityalerts", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "antifraud.srcintegrity.lowseverityalerts"}, {"name": "antifraud.srcintegrity.maturedatathreshold", "default": "50", "value": "50", "value_range": "unsigned integer min:10 max:100", "scf_config": "true", "full_path": "antifraud.srcintegrity.maturedatathreshold"}, {"name": "antifraud.strippathparameters", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "antifraud.strippathparameters"}, {"name": "antifraud.unlimitedduration", "default": "157680000", "value": "157680000", "value_range": "unsigned integer min:86400 max:3000000000", "scf_config": "true", "full_path": "antifraud.unlimitedduration"}, {"name": "antifraud.uselastxff", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "antifraud.uselastxff"}, {"name": "antifraud.userdaemon.persistenceintervalmin", "default": "5", "value": "5", "value_range": "unsigned integer min:1 max:525600", "scf_config": "true", "full_path": "antifraud.userdaemon.persistenceintervalmin"}, {"name": "antifraud.userinspectioncookieduration", "default": "1209600", "value": "1209600", "value_range": "unsigned integer min:0 max:30000000", "scf_config": "true", "full_path": "antifraud.userinspectioncookieduration"}, {"name": "antifraud.vbklipdetection.accountnumbers", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "antifraud.vbklipdetection.accountnumbers"}, {"name": "antserver.reply.cache.enable", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "antserver.reply.cache.enable"}, {"name": "antserver.reply.cache.size", "default": "64k", "value": "64k", "value_range": "128 128k 16k 32k 64k", "scf_config": "true", "full_path": "antserver.reply.cache.size"}, {"name": "aom.logs.readinterval", "default": "1", "value": "1", "value_range": "integer min:1 max:1440", "scf_config": "true", "full_path": "aom.logs.readinterval"}, {"name": "apm.aaa.maxlisteners", "default": "16384", "value": "16384", "value_range": "unsigned integer min:255 max:16384", "scf_config": "false", "full_path": "apm.aaa.maxlisteners"}, {"name": "apm.ad.kdclockout", "default": "0", "value": "0", "value_range": "integer min:0 max:10", "scf_config": "true", "full_path": "apm.ad.kdclockout"}, {"name": "apm.apd.conncrtl", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "apm.apd.conncrtl"}, {"name": "apm.apd.connhwm", "default": "1536", "value": "1536", "value_range": "integer min:10 max:2048", "scf_config": "true", "full_path": "apm.apd.connhwm"}, {"name": "apm.apd.connlwm", "default": "1520", "value": "1520", "value_range": "integer min:8 max:1980", "scf_config": "true", "full_path": "apm.apd.connlwm"}, {"name": "apm.client.version", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "apm.client.version"}, {"name": "apm.epsec.version", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "apm.epsec.version"}, {"name": "apm.ifmap.conncount", "default": "10", "value": "10", "value_range": "integer min:0 max:400", "scf_config": "true", "full_path": "apm.ifmap.conncount"}, {"name": "apm.ldap.autoescape", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "apm.ldap.autoescape"}, {"name": "apm.oauth.sqlcompressionlevel", "default": "1", "value": "1", "value_range": "integer min:0 max:1", "scf_config": "true", "full_path": "apm.oauth.sqlcompressionlevel"}, {"name": "apm.paap.version", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "apm.paap.version"}, {"name": "apm.rotatesessionid", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "apm.rotatesessionid"}, {"name": "apm.xframeoptions", "default": "deny", "value": "deny", "value_range": "allow_from deny none same_origin", "scf_config": "true", "full_path": "apm.xframeoptions"}, {"name": "apm.xframeoptions.allowfrom", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "apm.xframeoptions.allowfrom"}, {"name": "appiq.config.innetwork", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "appiq.config.innetwork"}, {"name": "appiq.hostport", "default": "514", "value": "514", "value_range": "unsigned integer min:0 max:65535", "scf_config": "false", "full_path": "appiq.hostport"}, {"name": "arp.addreciprocal", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "arp.addreciprocal"}, {"name": "arp.gratuitousburst", "default": "1", "value": "1", "value_range": "integer min:0 max:2147483647", "scf_config": "false", "full_path": "arp.gratuitousburst"}, {"name": "arp.gratuitousrate", "default": "0", "value": "0", "value_range": "integer min:0 max:2147483647", "scf_config": "false", "full_path": "arp.gratuitousrate"}, {"name": "arp.maxentries", "default": "8192", "value": "8192", "value_range": "unsigned integer min:520 max:65536", "scf_config": "true", "full_path": "arp.maxentries"}, {"name": "arp.priority", "default": "normal", "value": "normal", "value_range": "high normal", "scf_config": "false", "full_path": "arp.priority"}, {"name": "arp.proxyarpusesselfmac", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "arp.proxyarpusesselfmac"}, {"name": "arp.proxygratuitousreplies", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "arp.proxygratuitousreplies"}, {"name": "arp.reaptimeout", "default": "20", "value": "20", "value_range": "unsigned integer min:2 max:65536", "scf_config": "true", "full_path": "arp.reaptimeout"}, {"name": "arp.retries", "default": "6", "value": "6", "value_range": "unsigned integer min:1 max:60", "scf_config": "true", "full_path": "arp.retries"}, {"name": "arp.timeout", "default": "300", "value": "300", "value_range": "unsigned integer min:1 max:3600", "scf_config": "true", "full_path": "arp.timeout"}, {"name": "arp.vlanpriority", "default": "-1", "value": "-1", "value_range": "integer min:-1 max:7", "scf_config": "false", "full_path": "arp.vlanpriority"}, {"name": "asm.brute_force_bypass_non_qualified_url", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "asm.brute_force_bypass_non_qualified_url"}, {"name": "asm.brute_force_end_attack_verification_time", "default": "120", "value": "120", "value_range": "unsigned integer min:1 max:1000", "scf_config": "true", "full_path": "asm.brute_force_end_attack_verification_time"}, {"name": "asm.brute_force_max_tmstat_entries", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:10000", "scf_config": "true", "full_path": "asm.brute_force_max_tmstat_entries"}, {"name": "asm.brute_force_monitoring_interval", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:60", "scf_config": "true", "full_path": "asm.brute_force_monitoring_interval"}, {"name": "asm.connlimit", "default": "6000", "value": "6000", "value_range": "integer min:0 max:4294967295", "scf_config": "true", "full_path": "asm.connlimit"}, {"name": "asm.cs_challenge_length", "default": "4", "value": "4", "value_range": "unsigned integer min:1 max:7", "scf_config": "true", "full_path": "asm.cs_challenge_length"}, {"name": "asm.cs_qualified_urls", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "asm.cs_qualified_urls"}, {"name": "asm.csrf_rerun_interval", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10000", "scf_config": "true", "full_path": "asm.csrf_rerun_interval"}, {"name": "asm.fastl4_allow", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "asm.fastl4_allow"}, {"name": "asm.fictive_url", "default": "/TSbd/", "value": "/TSbd/", "value_range": "string", "scf_config": "true", "full_path": "asm.fictive_url"}, {"name": "asm.mobile_ua", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "asm.mobile_ua"}, {"name": "asm.risk_engine.salt.restart", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:2091752", "scf_config": "true", "full_path": "asm.risk_engine.salt.restart"}, {"name": "asm.session_transactions_sampling_rate", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:60", "scf_config": "true", "full_path": "asm.session_transactions_sampling_rate"}, {"name": "asmconffailure.enabled", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "asmconffailure.enabled"}, {"name": "asmconffailure.haaction.primary", "default": "restart_all", "value": "restart_all", "value_range": "go_offline go_offline_downlinks no_action restart_all", "scf_config": "true", "full_path": "asmconffailure.haaction.primary"}, {"name": "asmconffailure.haaction.secondary", "default": "go_offline", "value": "go_offline", "value_range": "go_offline go_offline_downlinks no_action restart_all", "scf_config": "true", "full_path": "asmconffailure.haaction.secondary"}, {"name": "autoscale.samezoneonly", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "autoscale.samezoneonly"}, {"name": "avr.addrandomdelaybeforesnapshot", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "avr.addrandomdelaybeforesnapshot"}, {"name": "avr.alwaysuselastxff", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:1", "scf_config": "true", "full_path": "avr.alwaysuselastxff"}, {"name": "avr.asmsampling", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:1", "scf_config": "true", "full_path": "avr.asmsampling"}, {"name": "avr.cookieprefix", "default": "f5avr", "value": "f5avr", "value_range": "string max-len:32", "scf_config": "true", "full_path": "avr.cookieprefix"}, {"name": "avr.cookiesuffix", "default": "<null>", "value": "<null>", "value_range": "string max-len:32", "scf_config": "true", "full_path": "avr.cookiesuffix"}, {"name": "avr.cspm.inject.location", "default": "at_the_end", "value": "at_the_end", "value_range": "after_head at_the_end", "scf_config": "true", "full_path": "avr.cspm.inject.location"}, {"name": "avr.customheaderoverridexff", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:1", "scf_config": "true", "full_path": "avr.customheaderoverridexff"}, {"name": "avr.distributedreporting.maxtiersize", "default": "8", "value": "8", "value_range": "unsigned integer min:1 max:100", "scf_config": "true", "full_path": "avr.distributedreporting.maxtiersize"}, {"name": "avr.dosinput.hitcount_topping_interval", "default": "360", "value": "360", "value_range": "unsigned integer min:1 max:3600", "scf_config": "true", "full_path": "avr.dosinput.hitcount_topping_interval"}, {"name": "avr.dosl7.classifiertimeout", "default": "300", "value": "300", "value_range": "unsigned integer min:1 max:86400", "scf_config": "true", "full_path": "avr.dosl7.classifiertimeout"}, {"name": "avr.dosl7.parse_path_info", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "avr.dosl7.parse_path_info"}, {"name": "avr.dosmaxentitiespertable", "default": "4096", "value": "4096", "value_range": "unsigned integer min:1000 max:1000000", "scf_config": "true", "full_path": "avr.dosmaxentitiespertable"}, {"name": "avr.dosvishealthcalc.maxbigipconcurrentconnections", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:999999999", "scf_config": "true", "full_path": "avr.dosvishealthcalc.maxbigipconcurrentconnections"}, {"name": "avr.dosvishealthcalc.maxbigipthroughput", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:999999999", "scf_config": "true", "full_path": "avr.dosvishealthcalc.maxbigipthroughput"}, {"name": "avr.ecmenabled", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "avr.ecmenabled"}, {"name": "avr.general.bool", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:1", "scf_config": "true", "full_path": "avr.general.bool"}, {"name": "avr.general.int", "default": "0", "value": "0", "value_range": "integer min:0 max:999999999", "scf_config": "true", "full_path": "avr.general.int"}, {"name": "avr.general.string", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "avr.general.string"}, {"name": "avr.hsl.batchpauseinmillisec", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:2000", "scf_config": "true", "full_path": "avr.hsl.batchpauseinmillisec"}, {"name": "avr.hsl.batchsize", "default": "100", "value": "100", "value_range": "unsigned integer min:1 max:50000", "scf_config": "true", "full_path": "avr.hsl.batchsize"}, {"name": "avr.hslmessagesbetweensleep", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:999999999", "scf_config": "true", "full_path": "avr.hslmessagesbetweensleep"}, {"name": "avr.hslsleepperiodinmicrosecond", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:500000", "scf_config": "true", "full_path": "avr.hslsleepperiodinmicrosecond"}, {"name": "avr.includeserverinuri", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "avr.includeserverinuri"}, {"name": "avr.maxsubnets", "default": "1024", "value": "1024", "value_range": "unsigned integer min:1 max:10000", "scf_config": "true", "full_path": "avr.maxsubnets"}, {"name": "avr.monpdloaderindicator", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "avr.monpdloaderindicator"}, {"name": "avr.pemsampling", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:1", "scf_config": "true", "full_path": "avr.pemsampling"}, {"name": "avr.requestcache", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "avr.requestcache"}, {"name": "avr.riskengine.metaheadername", "default": "X-F5-AVR-HTID", "value": "X-F5-AVR-HTID", "value_range": "string max-len:32", "scf_config": "true", "full_path": "avr.riskengine.metaheadername"}, {"name": "avr.send.configuration.to.offbox", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "avr.send.configuration.to.offbox"}, {"name": "avr.stats.adapters.defaultpollinginterval", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:999999999", "scf_config": "true", "full_path": "avr.stats.adapters.defaultpollinginterval"}, {"name": "avr.stats.adapters.minimumpollinginterval", "default": "5", "value": "5", "value_range": "unsigned integer min:1 max:999999999", "scf_config": "true", "full_path": "avr.stats.adapters.minimumpollinginterval"}, {"name": "avr.stats.aggregation", "default": "medium", "value": "medium", "value_range": "high low medium", "scf_config": "true", "full_path": "avr.stats.aggregation"}, {"name": "avr.stats.distributed.maxrowsnum", "default": "1000", "value": "1000", "value_range": "unsigned integer min:100 max:10000", "scf_config": "true", "full_path": "avr.stats.distributed.maxrowsnum"}, {"name": "avr.stats.distributedfactor.largerowsnum", "default": "2", "value": "2", "value_range": "unsigned integer min:1 max:10", "scf_config": "true", "full_path": "avr.stats.distributedfactor.largerowsnum"}, {"name": "avr.stats.distributedfactor.rowsnumthreshold", "default": "5", "value": "5", "value_range": "unsigned integer min:1 max:10", "scf_config": "true", "full_path": "avr.stats.distributedfactor.rowsnumthreshold"}, {"name": "avr.stats.distributedfactor.smallrowsnum", "default": "5", "value": "5", "value_range": "unsigned integer min:1 max:10", "scf_config": "true", "full_path": "avr.stats.distributedfactor.smallrowsnum"}, {"name": "avr.stats.internal.maxentitiespertable", "default": "50000", "value": "50000", "value_range": "unsigned integer min:1000 max:1000000", "scf_config": "true", "full_path": "avr.stats.internal.maxentitiespertable"}, {"name": "avr.subnetprefixlength.ipv4", "default": "24", "value": "24", "value_range": "unsigned integer min:1 max:32", "scf_config": "true", "full_path": "avr.subnetprefixlength.ipv4"}, {"name": "avr.subnetprefixlength.ipv6", "default": "64", "value": "64", "value_range": "unsigned integer min:1 max:128", "scf_config": "true", "full_path": "avr.subnetprefixlength.ipv6"}, {"name": "avr.threads.alerts.stacksizekb", "default": "1024", "value": "1024", "value_range": "unsigned integer min:10 max:10240", "scf_config": "true", "full_path": "avr.threads.alerts.stacksizekb"}, {"name": "avr.threads.config.stacksizekb", "default": "1024", "value": "1024", "value_range": "unsigned integer min:10 max:10240", "scf_config": "true", "full_path": "avr.threads.config.stacksizekb"}, {"name": "avr.threads.loader.stacksizekb", "default": "1024", "value": "1024", "value_range": "unsigned integer min:10 max:10240", "scf_config": "true", "full_path": "avr.threads.loader.stacksizekb"}, {"name": "avr.threads.reporter.stacksizekb", "default": "1024", "value": "1024", "value_range": "unsigned integer min:10 max:10240", "scf_config": "true", "full_path": "avr.threads.reporter.stacksizekb"}, {"name": "avr.trafficcapture.external.syslogseverity", "default": "info", "value": "info", "value_range": "alert crit debug emerg err info none notice warning", "scf_config": "true", "full_path": "avr.trafficcapture.external.syslogseverity"}, {"name": "avr.trafficcapture.internal.enabled", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "avr.trafficcapture.internal.enabled"}, {"name": "avr.trafficcapture.internal.maxentriesperfile", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:100", "scf_config": "true", "full_path": "avr.trafficcapture.internal.maxentriesperfile"}, {"name": "avr.trafficcapture.internal.maxtransactions", "default": "1000", "value": "1000", "value_range": "unsigned integer min:10 max:10000", "scf_config": "true", "full_path": "avr.trafficcapture.internal.maxtransactions"}, {"name": "avr.trafficclassificationsampling", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:1", "scf_config": "true", "full_path": "avr.trafficclassificationsampling"}, {"name": "avr.upgrade.enabled", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "avr.upgrade.enabled"}, {"name": "bbr.filter", "default": "0,0,00000000,0,0,0", "value": "0,0,00000000,0,0,0", "value_range": "string max-len:1024", "scf_config": "false", "full_path": "bbr.filter"}, {"name": "bbr.queuelength", "default": "4096", "value": "4096", "value_range": "integer min:512 max:65536", "scf_config": "false", "full_path": "bbr.queuelength"}, {"name": "bbr.retrievelogs", "default": "0,0,0,0", "value": "0,0,0,0", "value_range": "string max-len:32", "scf_config": "false", "full_path": "bbr.retrievelogs"}, {"name": "bcm56xxd.hgmaclearning", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "bcm56xxd.hgmaclearning"}, {"name": "bcm56xxd.hgvlan_check_disable", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "bcm56xxd.hgvlan_check_disable"}, {"name": "bcm56xxd.hsb.fcserrthreshold", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:100000", "scf_config": "true", "full_path": "bcm56xxd.hsb.fcserrthreshold"}, {"name": "bcm56xxd.hybridfwdmode", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "bcm56xxd.hybridfwdmode"}, {"name": "bcm56xxd.l2xmsg.mode", "default": "fifo", "value": "fifo", "value_range": "fifo poll", "scf_config": "true", "full_path": "bcm56xxd.l2xmsg.mode"}, {"name": "bcm56xxd.lossless.mode", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "bcm56xxd.lossless.mode"}, {"name": "bd.loglevel", "default": "none", "value": "none", "value_range": "debug none", "scf_config": "false", "full_path": "bd.loglevel"}, {"name": "bigd.adaptive.default_noise_floor", "default": "100", "value": "100", "value_range": "integer min:10 max:1000", "scf_config": "true", "full_path": "bigd.adaptive.default_noise_floor"}, {"name": "bigd.adaptive.default_timespan", "default": "300", "value": "300", "value_range": "integer min:60 max:86400", "scf_config": "true", "full_path": "bigd.adaptive.default_timespan"}, {"name": "bigd.adaptive.tmstat", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "bigd.adaptive.tmstat"}, {"name": "bigd.dbgfile", "default": "/var/run/bigdlog.pipe", "value": "/var/run/bigdlog.pipe", "value_range": "string", "scf_config": "true", "full_path": "bigd.dbgfile"}, {"name": "bigd.debug", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "bigd.debug"}, {"name": "bigd.debug.timing", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "bigd.debug.timing"}, {"name": "bigd.debug.timingstats", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "bigd.debug.timingstats"}, {"name": "bigd.heartbeat.interval", "default": "0", "value": "0", "value_range": "integer min:0 max:3600", "scf_config": "true", "full_path": "bigd.heartbeat.interval"}, {"name": "bigd.hostlookup", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "bigd.hostlookup"}, {"name": "bigd.ipv4externaddr", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "bigd.ipv4externaddr"}, {"name": "bigd.lognodestatuschange", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "bigd.lognodestatuschange"}, {"name": "bigd.mgmtroutecheck", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "bigd.mgmtroutecheck"}, {"name": "bigd.numprocs", "default": "0", "value": "0", "value_range": "integer min:0 max:99", "scf_config": "true", "full_path": "bigd.numprocs"}, {"name": "bigd.overload.latency", "default": "98", "value": "98", "value_range": "integer min:10 max:100", "scf_config": "true", "full_path": "bigd.overload.latency"}, {"name": "bigd.reportinitnodestate", "default": "all", "value": "all", "value_range": "all down none", "scf_config": "true", "full_path": "bigd.reportinitnodestate"}, {"name": "bigd.resettransparent", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "bigd.resettransparent"}, {"name": "bigd.reusesocket", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "bigd.reusesocket"}, {"name": "bigd.simulatepings", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "bigd.simulatepings"}, {"name": "bigd.smoothpinginterval", "default": "86400", "value": "86400", "value_range": "integer min:3600 max:259200", "scf_config": "true", "full_path": "bigd.smoothpinginterval"}, {"name": "bigd.tclmonitormaxworkerspercore", "default": "25", "value": "25", "value_range": "unsigned integer min:1 max:100", "scf_config": "true", "full_path": "bigd.tclmonitormaxworkerspercore"}, {"name": "bigd.tclmonitorpingqueue", "default": "1000", "value": "1000", "value_range": "unsigned integer min:1 max:50000", "scf_config": "true", "full_path": "bigd.tclmonitorpingqueue"}, {"name": "bigd.tclmonitorprefix", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "bigd.tclmonitorprefix"}, {"name": "bigd.tclmonitorworkermemorybufferlimit", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "bigd.tclmonitorworkermemorybufferlimit"}, {"name": "bigd.tclmonitorworkerpinglimit", "default": "1000", "value": "1000", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "bigd.tclmonitorworkerpinglimit"}, {"name": "bigd.tmm", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "bigd.tmm"}, {"name": "bigpipe.displayhostnames", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "bigpipe.displayhostnames"}, {"name": "bigpipe.displayservicenames", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "bigpipe.displayservicenames"}, {"name": "bigpipe.hostnamelookup", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "bigpipe.hostnamelookup"}, {"name": "bigstart.childoutput", "default": "console", "value": "console", "value_range": "console devnull", "scf_config": "true", "full_path": "bigstart.childoutput"}, {"name": "bigstart.logging", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "bigstart.logging"}, {"name": "boot.netreboot", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "boot.netreboot"}, {"name": "boot.quiet", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "boot.quiet"}, {"name": "bwc.dist", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "bwc.dist"}, {"name": "bwc.dynamic.proxybuffering", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "bwc.dynamic.proxybuffering"}, {"name": "bwc.load.interval", "default": "44", "value": "44", "value_range": "unsigned integer min:1 max:399", "scf_config": "true", "full_path": "bwc.load.interval"}, {"name": "bwc.measure.factor", "default": "2", "value": "2", "value_range": "unsigned integer min:0 max:3", "scf_config": "true", "full_path": "bwc.measure.factor"}, {"name": "bwc.measure.samplewindow", "default": "3", "value": "3", "value_range": "unsigned integer min:0 max:4", "scf_config": "true", "full_path": "bwc.measure.samplewindow"}, {"name": "bwc.measure.smoothwindow", "default": "2", "value": "2", "value_range": "unsigned integer min:0 max:5", "scf_config": "true", "full_path": "bwc.measure.smoothwindow"}, {"name": "bwc.policy", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "bwc.policy"}, {"name": "bwc.recharge.interval", "default": "439", "value": "439", "value_range": "unsigned integer min:1 max:797", "scf_config": "true", "full_path": "bwc.recharge.interval"}, {"name": "bwc.static.proxybuffering", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "bwc.static.proxybuffering"}, {"name": "bwc.sweeper.interval", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:10000", "scf_config": "true", "full_path": "bwc.sweeper.interval"}, {"name": "bwc.tc", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "bwc.tc"}, {"name": "bwc.tc.maxburst", "default": "200", "value": "200", "value_range": "unsigned integer min:0 max:2000", "scf_config": "true", "full_path": "bwc.tc.maxburst"}, {"name": "bwc.tc.maxsurplus", "default": "200", "value": "200", "value_range": "unsigned integer min:0 max:2000", "scf_config": "true", "full_path": "bwc.tc.maxsurplus"}, {"name": "bwc.trace", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "bwc.trace"}, {"name": "bwc.trace.ctb", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "bwc.trace.ctb"}, {"name": "bwc.trace.dist", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "bwc.trace.dist"}, {"name": "bwc.trace.measure", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "bwc.trace.measure"}, {"name": "bwc.trace.policy", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "bwc.trace.policy"}, {"name": "bwc.trace.probe", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "bwc.trace.probe"}, {"name": "bwc.trace.pubapi", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "bwc.trace.pubapi"}, {"name": "bwc.trace.refcnt", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "bwc.trace.refcnt"}, {"name": "bwc.trace.stb", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "bwc.trace.stb"}, {"name": "bwc.trace.stbema", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "bwc.trace.stbema"}, {"name": "bwc.trace.tc", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "bwc.trace.tc"}, {"name": "capture.capture_clean_count", "default": "2000", "value": "2000", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "capture.capture_clean_count"}, {"name": "capture.capture_pause_after_sec", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "capture.capture_pause_after_sec"}, {"name": "capture.capture_resume_after_sec", "default": "110", "value": "110", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "true", "full_path": "capture.capture_resume_after_sec"}, {"name": "capture.delete_after_send", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "capture.delete_after_send"}, {"name": "capture.dump_clean_disk_percent", "default": "35", "value": "35", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "capture.dump_clean_disk_percent"}, {"name": "capture.dump_clean_size_mb", "default": "5120", "value": "5120", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "capture.dump_clean_size_mb"}, {"name": "capture.dump_clean_time_sec", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "capture.dump_clean_time_sec"}, {"name": "capture.dump_size_limit_mb", "default": "10240", "value": "10240", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "capture.dump_size_limit_mb"}, {"name": "capture.log_level", "default": "info", "value": "info", "value_range": "debug error fatal info trace warn", "scf_config": "true", "full_path": "capture.log_level"}, {"name": "capture.margin_sec", "default": "2", "value": "2", "value_range": "unsigned integer min:0 max:3600", "scf_config": "true", "full_path": "capture.margin_sec"}, {"name": "capture.min_cpu_percent", "default": "20", "value": "20", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "capture.min_cpu_percent"}, {"name": "capture.min_disk_percent", "default": "25", "value": "25", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "capture.min_disk_percent"}, {"name": "capture.premonitor.asm_brute_force_attack", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "capture.premonitor.asm_brute_force_attack"}, {"name": "capture.premonitor.asm_web_scraping_attack", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "capture.premonitor.asm_web_scraping_attack"}, {"name": "capture.premonitor.dosl7_attack", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "capture.premonitor.dosl7_attack"}, {"name": "capture.send", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "capture.send"}, {"name": "capture.send_limit_rate_mbsec", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "capture.send_limit_rate_mbsec"}, {"name": "capture.slice_max_size_mb", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:1048576", "scf_config": "true", "full_path": "capture.slice_max_size_mb"}, {"name": "capture.slice_sec", "default": "2", "value": "2", "value_range": "unsigned integer min:1 max:60", "scf_config": "true", "full_path": "capture.slice_sec"}, {"name": "capture.ssl_modify_ciphers", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "capture.ssl_modify_ciphers"}, {"name": "capture.tcpdump", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "capture.tcpdump"}, {"name": "capture.trigger.asm_brute_force_attack", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "capture.trigger.asm_brute_force_attack"}, {"name": "capture.trigger.asm_web_scraping_attack", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "capture.trigger.asm_web_scraping_attack"}, {"name": "capture.trigger.dosl7_attack", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "capture.trigger.dosl7_attack"}, {"name": "cbrd.bigrequestsize", "default": "1048576", "value": "1048576", "value_range": "unsigned integer min:0 max:1048576000", "scf_config": "true", "full_path": "cbrd.bigrequestsize"}, {"name": "cbrd.maxqueryresults", "default": "100", "value": "100", "value_range": "unsigned integer min:1 max:100000", "scf_config": "true", "full_path": "cbrd.maxqueryresults"}, {"name": "cbrd.pendingtransactions", "default": "5000", "value": "5000", "value_range": "unsigned integer min:0 max:100000", "scf_config": "true", "full_path": "cbrd.pendingtransactions"}, {"name": "cbrd.requestsize", "default": "10240", "value": "10240", "value_range": "unsigned integer min:0 max:1024000", "scf_config": "true", "full_path": "cbrd.requestsize"}, {"name": "cbrd.umuthreshold", "default": "90", "value": "90", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "cbrd.umuthreshold"}, {"name": "ccdb.allow.edge.jpegxr", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "ccdb.allow.edge.jpegxr"}, {"name": "cluster.blade.green.count", "default": "0", "value": "0", "value_range": "integer min:0 max:8", "scf_config": "false", "full_path": "cluster.blade.green.count"}, {"name": "cluster.mgmtipaddr", "default": "::", "value": "::", "value_range": "management address", "scf_config": "false", "full_path": "cluster.mgmtipaddr"}, {"name": "cluster.primary", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "cluster.primary"}, {"name": "cluster.primary.slot", "default": "0", "value": "0", "value_range": "integer min:0 max:8", "scf_config": "false", "full_path": "cluster.primary.slot"}, {"name": "clusterd.communicateovertmmbp", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "clusterd.communicateovertmmbp"}, {"name": "clusterd.peermembertimeout", "default": "10", "value": "10", "value_range": "integer min:1 max:30", "scf_config": "true", "full_path": "clusterd.peermembertimeout"}, {"name": "clustered.environment", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "clustered.environment"}, {"name": "clustermbr.offlineondisable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "clustermbr.offlineondisable"}, {"name": "cmp.feature_disable", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "cmp.feature_disable"}, {"name": "cmp.hash.p8.port.bitshift", "default": "0", "value": "0", "value_range": "integer min:0 max:2", "scf_config": "true", "full_path": "cmp.hash.p8.port.bitshift"}, {"name": "cmp.hash.p8sp.ip.bitshift", "default": "0", "value": "0", "value_range": "integer min:0 max:18", "scf_config": "true", "full_path": "cmp.hash.p8sp.ip.bitshift"}, {"name": "cmp.hash.tunnel", "default": "outer", "value": "outer", "value_range": "inner outer", "scf_config": "true", "full_path": "cmp.hash.tunnel"}, {"name": "cmp.maxqueuedmsgs", "default": "150000", "value": "150000", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "cmp.maxqueuedmsgs"}, {"name": "cmp.optimize.throughput", "default": "ipv4", "value": "ipv4", "value_range": "ipv4 ipv6", "scf_config": "true", "full_path": "cmp.optimize.throughput"}, {"name": "compression.adaptive.allownullcompression", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "compression.adaptive.allownullcompression"}, {"name": "compression.adaptive.maxreduction", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "compression.adaptive.maxreduction"}, {"name": "compression.allowproviderselectiondeferral", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "compression.allowproviderselectiondeferral"}, {"name": "compression.octeon.dispatchsize", "default": "61170", "value": "61170", "value_range": "unsigned integer min:4096 max:61170", "scf_config": "true", "full_path": "compression.octeon.dispatchsize"}, {"name": "compression.octeon.ratio", "default": "4", "value": "4", "value_range": "unsigned integer min:0 max:50", "scf_config": "true", "full_path": "compression.octeon.ratio"}, {"name": "compression.offload.ratio", "default": "4", "value": "4", "value_range": "unsigned integer min:0 max:50", "scf_config": "true", "full_path": "compression.offload.ratio"}, {"name": "compression.providerbusy", "default": "100", "value": "100", "value_range": "unsigned integer min:0 max:5000", "scf_config": "true", "full_path": "compression.providerbusy"}, {"name": "compression.qat.dispatchsize", "default": "65535", "value": "65535", "value_range": "unsigned integer min:4096 max:65535", "scf_config": "true", "full_path": "compression.qat.dispatchsize"}, {"name": "compression.strategy", "default": "latency", "value": "latency", "value_range": "adaptive latency ratio size softwareonly speed", "scf_config": "true", "full_path": "compression.strategy"}, {"name": "compression.tmm.maxcpu", "default": "75", "value": "75", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "compression.tmm.maxcpu"}, {"name": "compression.tmm.ratio", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:50", "scf_config": "true", "full_path": "compression.tmm.ratio"}, {"name": "config.allow.rfc3927", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "config.allow.rfc3927"}, {"name": "config.auditing", "default": "enable", "value": "enable", "value_range": "all disable enable verbose", "scf_config": "false", "full_path": "config.auditing"}, {"name": "config.auditing.forward.destination", "default": "::", "value": "::", "value_range": "string", "scf_config": "true", "full_path": "config.auditing.forward.destination"}, {"name": "config.auditing.forward.multiple", "default": "none", "value": "none", "value_range": "broadcast failover none", "scf_config": "true", "full_path": "config.auditing.forward.multiple"}, {"name": "config.auditing.forward.sharedsecret", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "config.auditing.forward.sharedsecret"}, {"name": "config.auditing.forward.type", "default": "none", "value": "none", "value_range": "none radius tacacs+", "scf_config": "true", "full_path": "config.auditing.forward.type"}, {"name": "config.auditing.truncate", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "config.auditing.truncate"}, {"name": "configsync.allowmanagement", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "configsync.allowmanagement"}, {"name": "configsync.copyonswitch", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "configsync.copyonswitch"}, {"name": "configsync.heartbeattimeout", "default": "3", "value": "3", "value_range": "integer min:0 max:60", "scf_config": "true", "full_path": "configsync.heartbeattimeout"}, {"name": "configsync.hotfixversionmatch", "default": "disabled", "value": "disabled", "value_range": "disabled enabled", "scf_config": "true", "full_path": "configsync.hotfixversionmatch"}, {"name": "configsync.localconfigtime", "default": "0", "value": "1575989122", "value_range": "integer min:0 max:2147483647", "scf_config": "false", "full_path": "configsync.localconfigtime"}, {"name": "configsync.password", "default": "unused", "value": "unused", "value_range": "string", "scf_config": "false", "full_path": "configsync.password"}, {"name": "configsync.peeripaddr", "default": "::", "value": "::", "value_range": "IP address", "scf_config": "false", "full_path": "configsync.peeripaddr"}, {"name": "configsync.peertimeoutofsync", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "configsync.peertimeoutofsync"}, {"name": "configsync.timesyncthreshold", "default": "3", "value": "3", "value_range": "integer min:0 max:10", "scf_config": "true", "full_path": "configsync.timesyncthreshold"}, {"name": "configsync.username", "default": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER", "value": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER", "value_range": "string", "scf_config": "false", "full_path": "configsync.username"}, {"name": "connection.adaptivereaper.hiwater", "default": "95", "value": "95", "value_range": "unsigned integer min:85 max:100", "scf_config": "false", "full_path": "connection.adaptivereaper.hiwater"}, {"name": "connection.adaptivereaper.lowater", "default": "85", "value": "85", "value_range": "unsigned integer min:70 max:100", "scf_config": "false", "full_path": "connection.adaptivereaper.lowater"}, {"name": "connection.autolasthop", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "connection.autolasthop"}, {"name": "connection.dsrsynfloodprotect", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "connection.dsrsynfloodprotect"}, {"name": "connection.globalflowpolicy", "default": "/Common/default-eviction-policy", "value": "/Common/default-eviction-policy", "value_range": "string", "scf_config": "false", "full_path": "connection.globalflowpolicy"}, {"name": "connection.syncookies.algorithm", "default": "hardware", "value": "hardware", "value_range": "both hardware software", "scf_config": "true", "full_path": "connection.syncookies.algorithm"}, {"name": "connection.syncookies.threshold", "default": "16384", "value": "16384", "value_range": "unsigned integer min:0 max:2147483647", "scf_config": "false", "full_path": "connection.syncookies.threshold"}, {"name": "connection.synoffload.threshold", "default": "4049", "value": "4049", "value_range": "unsigned integer min:0 max:10240", "scf_config": "false", "full_path": "connection.synoffload.threshold"}, {"name": "connection.vlankeyed", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "connection.vlankeyed"}, {"name": "connections.preestablished.threshold", "default": "8192", "value": "8192", "value_range": "unsigned integer min:0 max:1000000", "scf_config": "false", "full_path": "connections.preestablished.threshold"}, {"name": "cpu.logthreshold", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:100", "scf_config": "false", "full_path": "cpu.logthreshold"}, {"name": "crypto.ha", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "crypto.ha"}, {"name": "crypto.ha.action", "default": "go-offline-downlinks", "value": "go-offline-downlinks", "value_range": "failover go-offline-downlinks go-offline-downlinks-restart none reboot restart-all", "scf_config": "true", "full_path": "crypto.ha.action"}, {"name": "crypto.hwacceleration", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "crypto.hwacceleration"}, {"name": "crypto.queue.timeout", "default": "100", "value": "100", "value_range": "unsigned integer min:0 max:100000", "scf_config": "true", "full_path": "crypto.queue.timeout"}, {"name": "d68.acceleration.strategy", "default": "throughput", "value": "throughput", "value_range": "cps throughput", "scf_config": "false", "full_path": "d68.acceleration.strategy"}, {"name": "dag.config", "default": "default", "value": "default", "value_range": "string", "scf_config": "true", "full_path": "dag.config"}, {"name": "dag.enabledagv2", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "dag.enabledagv2"}, {"name": "dag.roundrobin.udp.portlist", "default": "0", "value": "0", "value_range": "port_list", "scf_config": "true", "full_path": "dag.roundrobin.udp.portlist"}, {"name": "datastor.cache.size", "default": "0", "value": "0", "value_range": "integer min:0 max:60000", "scf_config": "false", "full_path": "datastor.cache.size"}, {"name": "datastor.restrict.dev.size", "default": "0", "value": "0", "value_range": "integer min:0 max:2097152", "scf_config": "true", "full_path": "datastor.restrict.dev.size"}, {"name": "datastor.store.size", "default": "0", "value": "0", "value_range": "integer min:0 max:2097152", "scf_config": "false", "full_path": "datastor.store.size"}, {"name": "datasync.core_dump_on_sigabrt", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "datasync.core_dump_on_sigabrt"}, {"name": "datasync.del_old_update_files", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "datasync.del_old_update_files"}, {"name": "datasync.device_stats_interval_seconds", "default": "60", "value": "60", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.device_stats_interval_seconds"}, {"name": "datasync.error_retry_interval_seconds", "default": "60", "value": "60", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.error_retry_interval_seconds"}, {"name": "datasync.extract_update_files", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "datasync.extract_update_files"}, {"name": "datasync.generated_data_sync", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "datasync.generated_data_sync"}, {"name": "datasync.gzip", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "datasync.gzip"}, {"name": "datasync.gzip_fpm", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "datasync.gzip_fpm"}, {"name": "datasync.hard_max_offline_seconds", "default": "150", "value": "150", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.hard_max_offline_seconds"}, {"name": "datasync.keep_generated_dirs", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.keep_generated_dirs"}, {"name": "datasync.max_sync_bandwidth_kb_sec", "default": "10000", "value": "10000", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.max_sync_bandwidth_kb_sec"}, {"name": "datasync.min_disk_available_percent", "default": "20", "value": "20", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "datasync.min_disk_available_percent"}, {"name": "datasync.nice_when_online", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:19", "scf_config": "true", "full_path": "datasync.nice_when_online"}, {"name": "datasync.offline_gen_pause_seconds", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.offline_gen_pause_seconds"}, {"name": "datasync.offline_until_devices_ack", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "datasync.offline_until_devices_ack"}, {"name": "datasync.process_interval_ms", "default": "1000", "value": "1000", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.process_interval_ms"}, {"name": "datasync.read_loaded_update_files_interval_seconds", "default": "300", "value": "300", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.read_loaded_update_files_interval_seconds"}, {"name": "datasync.read_new_update_files_interval_seconds", "default": "60", "value": "60", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.read_new_update_files_interval_seconds"}, {"name": "datasync.rsync_interval_seconds", "default": "3", "value": "3", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.rsync_interval_seconds"}, {"name": "datasync.save_config_after_change", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "datasync.save_config_after_change"}, {"name": "datasync.soft_max_offline_seconds", "default": "120", "value": "120", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.soft_max_offline_seconds"}, {"name": "datasync.update_engine_from_factory", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "datasync.update_engine_from_factory"}, {"name": "datasync.update_file_del_grace_factor", "default": "3600", "value": "3600", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.update_file_del_grace_factor"}, {"name": "datasync.update_file_del_grace_offset", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.update_file_del_grace_offset"}, {"name": "datasync.update_file_gen_profile", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "datasync.update_file_gen_profile"}, {"name": "datasync.update_file_gen_time", "default": "7200", "value": "7200", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "datasync.update_file_gen_time"}, {"name": "datasync.update_signatures_from_factory", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "datasync.update_signatures_from_factory"}, {"name": "datasync.use_mcp_for_update_files", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "datasync.use_mcp_for_update_files"}, {"name": "ddm.bcm56xxd.enable", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ddm.bcm56xxd.enable"}, {"name": "ddm.bcm56xxd.interval", "default": "12", "value": "12", "value_range": "unsigned integer min:1 max:65535", "scf_config": "false", "full_path": "ddm.bcm56xxd.interval"}, {"name": "debug.afm.shun.notify_peers", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "debug.afm.shun.notify_peers"}, {"name": "debug.afm.shun.persistence", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "debug.afm.shun.persistence"}, {"name": "debug.doshwdropredirect.disables", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:63", "scf_config": "true", "full_path": "debug.doshwdropredirect.disables"}, {"name": "debug.hwdropredirect.interface", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "debug.hwdropredirect.interface"}, {"name": "debug.swdropredirect.interface", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "debug.swdropredirect.interface"}, {"name": "deduplication.dictionary.size", "default": "32", "value": "32", "value_range": "integer min:16 max:16384", "scf_config": "false", "full_path": "deduplication.dictionary.size"}, {"name": "device.request.timeoutfactor", "default": "200", "value": "200", "value_range": "unsigned integer min:1 max:500", "scf_config": "true", "full_path": "device.request.timeoutfactor"}, {"name": "dhclient.mgmt", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "dhclient.mgmt"}, {"name": "diameter.allowemptyorigin", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "diameter.allowemptyorigin"}, {"name": "diameter.endpoint.peertimeout", "default": "10000", "value": "10000", "value_range": "integer min:50 max:60000", "scf_config": "true", "full_path": "diameter.endpoint.peertimeout"}, {"name": "diameter.endpoint.reconnecttime", "default": "30000", "value": "30000", "value_range": "integer min:2000 max:180000", "scf_config": "true", "full_path": "diameter.endpoint.reconnecttime"}, {"name": "diameter.endpoint.watchdogtimeout", "default": "30000", "value": "30000", "value_range": "integer min:6000 max:180000", "scf_config": "true", "full_path": "diameter.endpoint.watchdogtimeout"}, {"name": "diameter.message.maxlen", "default": "65536", "value": "65536", "value_range": "integer min:20 max:1000000", "scf_config": "true", "full_path": "diameter.message.maxlen"}, {"name": "diameter.message.pending.high", "default": "300000", "value": "300000", "value_range": "integer min:2000 max:1000000", "scf_config": "true", "full_path": "diameter.message.pending.high"}, {"name": "diameter.message.pending.low", "default": "100000", "value": "100000", "value_range": "integer min:1000 max:1000000", "scf_config": "true", "full_path": "diameter.message.pending.low"}, {"name": "did.always_refresh", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "did.always_refresh"}, {"name": "did.anchors_must_match_query", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "did.anchors_must_match_query"}, {"name": "did.cookie_expire_sec", "default": "1200", "value": "1200", "value_range": "unsigned integer min:0 max:10000000", "scf_config": "true", "full_path": "did.cookie_expire_sec"}, {"name": "did.dids_delete_factor", "default": "10", "value": "10", "value_range": "unsigned integer min:2 max:100", "scf_config": "true", "full_path": "did.dids_delete_factor"}, {"name": "did.initial_sample_size", "default": "50", "value": "50", "value_range": "unsigned integer min:0 max:1000000", "scf_config": "true", "full_path": "did.initial_sample_size"}, {"name": "did.learning_sampling_per_second", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:1000000", "scf_config": "true", "full_path": "did.learning_sampling_per_second"}, {"name": "did.match_mode", "default": "complex", "value": "complex", "value_range": "complex simple", "scf_config": "true", "full_path": "did.match_mode"}, {"name": "did.max_allowed_same_requests", "default": "2", "value": "2", "value_range": "unsigned integer min:0 max:1000000", "scf_config": "true", "full_path": "did.max_allowed_same_requests"}, {"name": "did.max_allowed_same_requests_period", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:1000000", "scf_config": "true", "full_path": "did.max_allowed_same_requests_period"}, {"name": "did.max_device_ids", "default": "250000", "value": "250000", "value_range": "unsigned integer min:1 max:1000000", "scf_config": "true", "full_path": "did.max_device_ids"}, {"name": "did.max_dids_query_rate", "default": "100", "value": "100", "value_range": "unsigned integer min:2 max:1000000", "scf_config": "true", "full_path": "did.max_dids_query_rate"}, {"name": "did.max_ix_size_mb", "default": "250", "value": "250", "value_range": "unsigned integer min:1 max:1000", "scf_config": "true", "full_path": "did.max_ix_size_mb"}, {"name": "did.max_pending_queries", "default": "500", "value": "500", "value_range": "unsigned integer min:2 max:1000000", "scf_config": "true", "full_path": "did.max_pending_queries"}, {"name": "did.mobile_simple_match_score", "default": "85", "value": "85", "value_range": "unsigned integer min:1 max:100", "scf_config": "true", "full_path": "did.mobile_simple_match_score"}, {"name": "did.similarity_period", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:1000000", "scf_config": "true", "full_path": "did.similarity_period"}, {"name": "did.similarity_threshold", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "did.similarity_threshold"}, {"name": "did.solid_similarity_period", "default": "1200", "value": "1200", "value_range": "unsigned integer min:0 max:1000000", "scf_config": "true", "full_path": "did.solid_similarity_period"}, {"name": "did.test_fp_requests", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "did.test_fp_requests"}, {"name": "did.use_browser_local_storage", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "did.use_browser_local_storage"}, {"name": "did.validation_interval_sec", "default": "300", "value": "300", "value_range": "unsigned integer min:0 max:10000000", "scf_config": "true", "full_path": "did.validation_interval_sec"}, {"name": "dns.cache", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "dns.cache"}, {"name": "dns.configure", "default": "do not change", "value": "do not change", "value_range": "string", "scf_config": "true", "full_path": "dns.configure"}, {"name": "dns.domainname", "default": "<null>", "value": "localhost", "value_range": "string", "scf_config": "false", "full_path": "dns.domainname"}, {"name": "dns.nameservers", "default": "0.0.0.0", "value": "192.168.122.1", "value_range": "string", "scf_config": "false", "full_path": "dns.nameservers"}, {"name": "dns.proxy.__iter__", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "dns.proxy.__iter__"}, {"name": "dns.queuing", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "dns.queuing"}, {"name": "dns.udptruncate", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dns.udptruncate"}, {"name": "dns.xfr.msgbuffermax", "default": "131072", "value": "131072", "value_range": "unsigned integer min:65535 max:1048576", "scf_config": "true", "full_path": "dns.xfr.msgbuffermax"}, {"name": "dnscacheresolver.loglevel", "default": "notice", "value": "notice", "value_range": "alert critical debug1 debug2 debug3 debug4 debug5 emerg error info notice warning", "scf_config": "false", "full_path": "dnscacheresolver.loglevel"}, {"name": "dnsexpress.dbwritedelay", "default": "15", "value": "15", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "dnsexpress.dbwritedelay"}, {"name": "dnsexpress.dbwritensd", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "dnsexpress.dbwritensd"}, {"name": "dnsexpress.hugepages", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "dnsexpress.hugepages"}, {"name": "dnsexpress.includeds", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "dnsexpress.includeds"}, {"name": "dnsexpress.maxnotifypersec", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "dnsexpress.maxnotifypersec"}, {"name": "dnsexpress.minimalresponse", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "dnsexpress.minimalresponse"}, {"name": "dnsexpress.notifyport", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:65535", "scf_config": "true", "full_path": "dnsexpress.notifyport"}, {"name": "dnsexpress.persisthugepages", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "dnsexpress.persisthugepages"}, {"name": "dnsexpress.rpzupdatetime", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:86400", "scf_config": "true", "full_path": "dnsexpress.rpzupdatetime"}, {"name": "dnsexpress.rrperzonestats", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "dnsexpress.rrperzonestats"}, {"name": "dnsexpress.rrsetrotate", "default": "random", "value": "random", "value_range": "none random tmid", "scf_config": "true", "full_path": "dnsexpress.rrsetrotate"}, {"name": "dnsexpress.rrtcpclose", "default": "server", "value": "server", "value_range": "client reset server", "scf_config": "true", "full_path": "dnsexpress.rrtcpclose"}, {"name": "dnsexpress.xfrbackloggeddelay", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "dnsexpress.xfrbackloggeddelay"}, {"name": "dnsexpress.xfrjitter", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "dnsexpress.xfrjitter"}, {"name": "dnsexpress.xfrnotifydelay", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "dnsexpress.xfrnotifydelay"}, {"name": "dnsexpress.xfrpendingmax", "default": "100", "value": "100", "value_range": "unsigned integer min:1 max:16384", "scf_config": "true", "full_path": "dnsexpress.xfrpendingmax"}, {"name": "dnssec.maxnsec3persec", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "dnssec.maxnsec3persec"}, {"name": "dnssec.signaturecachemaxentries", "default": "131072", "value": "131072", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "dnssec.signaturecachemaxentries"}, {"name": "dnssec.signaturecachensec3", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "dnssec.signaturecachensec3"}, {"name": "dnssec.xfr.finalrrmax", "default": "1024", "value": "1024", "value_range": "unsigned integer min:1 max:16384", "scf_config": "true", "full_path": "dnssec.xfr.finalrrmax"}, {"name": "dnssec.xfr.pktmax", "default": "64000", "value": "64000", "value_range": "unsigned integer min:4096 max:65535", "scf_config": "true", "full_path": "dnssec.xfr.pktmax"}, {"name": "dnssec.xfr.timeout", "default": "5", "value": "5", "value_range": "unsigned integer min:1 max:60", "scf_config": "true", "full_path": "dnssec.xfr.timeout"}, {"name": "dos.allvlans", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "dos.allvlans"}, {"name": "dos.auto.threshold.hysteresis", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "dos.auto.threshold.hysteresis"}, {"name": "dos.auto.threshold.learnalways", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "dos.auto.threshold.learnalways"}, {"name": "dos.auto.threshold.stresstest", "default": "10000", "value": "10000", "value_range": "unsigned integer min:100 max:10000", "scf_config": "false", "full_path": "dos.auto.threshold.stresstest"}, {"name": "dos.autodosd.alpha_max", "default": "90", "value": "90", "value_range": "unsigned integer min:20 max:90", "scf_config": "true", "full_path": "dos.autodosd.alpha_max"}, {"name": "dos.autodosd.alpha_min", "default": "20", "value": "20", "value_range": "unsigned integer min:20 max:90", "scf_config": "true", "full_path": "dos.autodosd.alpha_min"}, {"name": "dos.behavioral.analysis", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dos.behavioral.analysis"}, {"name": "dos.blleaklimit", "default": "255", "value": "255", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "dos.blleaklimit"}, {"name": "dos.dnsport", "default": "53", "value": "53", "value_range": "unsigned integer min:1 max:65535", "scf_config": "true", "full_path": "dos.dnsport"}, {"name": "dos.dnsvlan", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4094", "scf_config": "true", "full_path": "dos.dnsvlan"}, {"name": "dos.dropv4mapped", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "dos.dropv4mapped"}, {"name": "dos.forceswdos", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "dos.forceswdos"}, {"name": "dos.fragforwardlimit", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:1000000", "scf_config": "false", "full_path": "dos.fragforwardlimit"}, {"name": "dos.globalsflimits", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "dos.globalsflimits"}, {"name": "dos.icmp6msgtype1", "default": "158", "value": "158", "value_range": "unsigned integer min:158 max:255", "scf_config": "true", "full_path": "dos.icmp6msgtype1"}, {"name": "dos.icmp6msgtype2", "default": "158", "value": "158", "value_range": "unsigned integer min:158 max:255", "scf_config": "true", "full_path": "dos.icmp6msgtype2"}, {"name": "dos.ip.allow.unknown.proto1", "default": "255", "value": "255", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "dos.ip.allow.unknown.proto1"}, {"name": "dos.ip.allow.unknown.proto2", "default": "255", "value": "255", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "dos.ip.allow.unknown.proto2"}, {"name": "dos.iplowttl", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:4", "scf_config": "true", "full_path": "dos.iplowttl"}, {"name": "dos.ipv6endpoint.prefix", "default": "128", "value": "128", "value_range": "unsigned integer min:1 max:128", "scf_config": "true", "full_path": "dos.ipv6endpoint.prefix"}, {"name": "dos.ipv6lowhopcnt", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:4", "scf_config": "true", "full_path": "dos.ipv6lowhopcnt"}, {"name": "dos.logging.interval", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "false", "full_path": "dos.logging.interval"}, {"name": "dos.maxdnssize", "default": "4096", "value": "4096", "value_range": "unsigned integer min:256 max:8192", "scf_config": "true", "full_path": "dos.maxdnssize"}, {"name": "dos.maxicmp6framesize", "default": "1460", "value": "1460", "value_range": "unsigned integer min:0 max:65495", "scf_config": "true", "full_path": "dos.maxicmp6framesize"}, {"name": "dos.maxicmpframesize", "default": "1480", "value": "1480", "value_range": "unsigned integer min:0 max:65515", "scf_config": "true", "full_path": "dos.maxicmpframesize"}, {"name": "dos.maxipv6exthdrs", "default": "4", "value": "4", "value_range": "unsigned integer min:0 max:15", "scf_config": "true", "full_path": "dos.maxipv6exthdrs"}, {"name": "dos.maxipv6extsize", "default": "128", "value": "128", "value_range": "unsigned integer min:0 max:1024", "scf_config": "true", "full_path": "dos.maxipv6extsize"}, {"name": "dos.maxsynsize", "default": "64", "value": "64", "value_range": "unsigned integer min:0 max:9216", "scf_config": "true", "full_path": "dos.maxsynsize"}, {"name": "dos.mergepersec", "default": "20", "value": "20", "value_range": "unsigned integer min:2 max:1000", "scf_config": "true", "full_path": "dos.mergepersec"}, {"name": "dos.onehourinitrate", "default": "0", "value": "0", "value_range": "integer min:0 max:2147483647", "scf_config": "false", "full_path": "dos.onehourinitrate"}, {"name": "dos.onehourminrate", "default": "100", "value": "100", "value_range": "integer min:0 max:2147483647", "scf_config": "true", "full_path": "dos.onehourminrate"}, {"name": "dos.scrubtime", "default": "100", "value": "100", "value_range": "unsigned integer min:10 max:1000", "scf_config": "true", "full_path": "dos.scrubtime"}, {"name": "dos.sip.uri.limit", "default": "1024", "value": "1024", "value_range": "unsigned integer min:0 max:65535", "scf_config": "true", "full_path": "dos.sip.uri.limit"}, {"name": "dos.sipport", "default": "5060", "value": "5060", "value_range": "unsigned integer min:1 max:65535", "scf_config": "true", "full_path": "dos.sipport"}, {"name": "dos.spvabl.checkdynamicwl", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "dos.spvabl.checkdynamicwl"}, {"name": "dos.syncookiedeactivate", "default": "50", "value": "50", "value_range": "unsigned integer min:10 max:75", "scf_config": "false", "full_path": "dos.syncookiedeactivate"}, {"name": "dos.tcp.allow.unknown.opt1", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "dos.tcp.allow.unknown.opt1"}, {"name": "dos.tcp.allow.unknown.opt2", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "dos.tcp.allow.unknown.opt2"}, {"name": "dos.tcplowwindowsize", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:128", "scf_config": "true", "full_path": "dos.tcplowwindowsize"}, {"name": "dos.tier1divisor", "default": "2", "value": "2", "value_range": "unsigned integer min:1 max:32", "scf_config": "true", "full_path": "dos.tier1divisor"}, {"name": "dos.unmatched.hwsyncookie_activate", "default": "80", "value": "80", "value_range": "unsigned integer min:10 max:90", "scf_config": "false", "full_path": "dos.unmatched.hwsyncookie_activate"}, {"name": "dos.wlipv6addrsel", "default": "2", "value": "2", "value_range": "unsigned integer min:0 max:3", "scf_config": "true", "full_path": "dos.wlipv6addrsel"}, {"name": "dosl7.asm_cs_excluded_headers", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "dosl7.asm_cs_excluded_headers"}, {"name": "dosl7.asm_cs_excluded_urls", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "dosl7.asm_cs_excluded_urls"}, {"name": "dosl7.assume_https", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.assume_https"}, {"name": "dosl7.browser_legit_min_score_captcha", "default": "60", "value": "60", "value_range": "unsigned integer min:0 max:1000", "scf_config": "true", "full_path": "dosl7.browser_legit_min_score_captcha"}, {"name": "dosl7.browser_legit_min_score_drop", "default": "120", "value": "120", "value_range": "unsigned integer min:0 max:1000", "scf_config": "true", "full_path": "dosl7.browser_legit_min_score_drop"}, {"name": "dosl7.browser_legit_min_score_jsfree_drop", "default": "100", "value": "100", "value_range": "unsigned integer min:0 max:1000", "scf_config": "true", "full_path": "dosl7.browser_legit_min_score_jsfree_drop"}, {"name": "dosl7.captcha_max_cpu_prc", "default": "90", "value": "90", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "dosl7.captcha_max_cpu_prc"}, {"name": "dosl7.cors_ajax_urls", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "dosl7.cors_ajax_urls"}, {"name": "dosl7.cors_font_urls", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "dosl7.cors_font_urls"}, {"name": "dosl7.cs_encode", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "dosl7.cs_encode"}, {"name": "dosl7.cs_encrypt", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "dosl7.cs_encrypt"}, {"name": "dosl7.cs_excluded_headers", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "dosl7.cs_excluded_headers"}, {"name": "dosl7.cs_excluded_urls", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "dosl7.cs_excluded_urls"}, {"name": "dosl7.cs_expire_sec", "default": "60", "value": "60", "value_range": "unsigned integer min:0 max:10000000", "scf_config": "true", "full_path": "dosl7.cs_expire_sec"}, {"name": "dosl7.cs_max_request_size", "default": "10000", "value": "10000", "value_range": "unsigned integer min:1 max:10000000", "scf_config": "true", "full_path": "dosl7.cs_max_request_size"}, {"name": "dosl7.cs_max_resend", "default": "3", "value": "3", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "dosl7.cs_max_resend"}, {"name": "dosl7.cs_qualified_urls", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "dosl7.cs_qualified_urls"}, {"name": "dosl7.cs_validate_ip", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.cs_validate_ip"}, {"name": "dosl7.cscloud_enabled", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.cscloud_enabled"}, {"name": "dosl7.cscloud_timeout", "default": "1000", "value": "1000", "value_range": "unsigned integer min:100 max:10000", "scf_config": "true", "full_path": "dosl7.cscloud_timeout"}, {"name": "dosl7.cscloud_url", "default": "https://re.security.f5aas.com/re/", "value": "https://re.security.f5aas.com/re/", "value_range": "string", "scf_config": "true", "full_path": "dosl7.cscloud_url"}, {"name": "dosl7.customheaders", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "dosl7.customheaders"}, {"name": "dosl7.early_renewal_period", "default": "30", "value": "30", "value_range": "unsigned integer min:1 max:36000", "scf_config": "true", "full_path": "dosl7.early_renewal_period"}, {"name": "dosl7.efoxy_cookie", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.efoxy_cookie"}, {"name": "dosl7.efoxy_local_storage", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.efoxy_local_storage"}, {"name": "dosl7.efoxy_websql", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.efoxy_websql"}, {"name": "dosl7.efoxy_window_name", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.efoxy_window_name"}, {"name": "dosl7.fastl4_allow", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "dosl7.fastl4_allow"}, {"name": "dosl7.geolocation_drop_private_ips", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.geolocation_drop_private_ips"}, {"name": "dosl7.idle_fast_path", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.idle_fast_path"}, {"name": "dosl7.long_ua_header_size", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10000000", "scf_config": "true", "full_path": "dosl7.long_ua_header_size"}, {"name": "dosl7.max_captcha_solution_time", "default": "120", "value": "120", "value_range": "unsigned integer min:1 max:36000", "scf_config": "true", "full_path": "dosl7.max_captcha_solution_time"}, {"name": "dosl7.max_cookie_length", "default": "10000", "value": "10000", "value_range": "unsigned integer min:0 max:50000", "scf_config": "true", "full_path": "dosl7.max_cookie_length"}, {"name": "dosl7.max_dynamic_params_injection_length", "default": "6000", "value": "6000", "value_range": "unsigned integer min:200 max:7000", "scf_config": "true", "full_path": "dosl7.max_dynamic_params_injection_length"}, {"name": "dosl7.max_lookup_length", "default": "255", "value": "255", "value_range": "unsigned integer min:0 max:1240", "scf_config": "true", "full_path": "dosl7.max_lookup_length"}, {"name": "dosl7.max_num_headers", "default": "50", "value": "50", "value_range": "unsigned integer min:0 max:1240", "scf_config": "true", "full_path": "dosl7.max_num_headers"}, {"name": "dosl7.max_user_agent_occurrences", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:1240", "scf_config": "true", "full_path": "dosl7.max_user_agent_occurrences"}, {"name": "dosl7.min_captcha_solution_time", "default": "2", "value": "2", "value_range": "unsigned integer min:0 max:36000", "scf_config": "true", "full_path": "dosl7.min_captcha_solution_time"}, {"name": "dosl7.mobile_cookie_expire_sec", "default": "120", "value": "120", "value_range": "unsigned integer min:0 max:100000", "scf_config": "true", "full_path": "dosl7.mobile_cookie_expire_sec"}, {"name": "dosl7.noscript_text", "default": "Please enable JavaScript to view the page content.<br/>Your support ID is: %DOSL7.noscript.support_id%.", "value": "Please enable JavaScript to view the page content.<br/>Your support ID is: %DOSL7.noscript.support_id%.", "value_range": "string", "scf_config": "true", "full_path": "dosl7.noscript_text"}, {"name": "dosl7.p3p_header", "default": "CP=\"{}\"", "value": "CP=\"{}\"", "value_range": "string", "scf_config": "true", "full_path": "dosl7.p3p_header"}, {"name": "dosl7.params", "default": "none", "value": "none", "value_range": "string", "scf_config": "true", "full_path": "dosl7.params"}, {"name": "dosl7.parse_html_content_types", "default": "text/html", "value": "text/html", "value_range": "string", "scf_config": "true", "full_path": "dosl7.parse_html_content_types"}, {"name": "dosl7.parse_html_excluded_accept_header_values", "default": "image,video,audio", "value": "image,video,audio", "value_range": "string", "scf_config": "true", "full_path": "dosl7.parse_html_excluded_accept_header_values"}, {"name": "dosl7.parse_html_excluded_extentions", "default": "gif,png,bmp,jpg,ico,css,mp3,mp4,mpg,avi,wmv,mov,3gp,fla,swf,js", "value": "gif,png,bmp,jpg,ico,css,mp3,mp4,mpg,avi,wmv,mov,3gp,fla,swf,js", "value_range": "string", "scf_config": "true", "full_path": "dosl7.parse_html_excluded_extentions"}, {"name": "dosl7.parse_html_excluded_urls", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "dosl7.parse_html_excluded_urls"}, {"name": "dosl7.parse_html_inject_tags", "default": "after,head,before,script,before,/head,before,body", "value": "after,head,before,script,before,/head,before,body", "value_range": "string", "scf_config": "true", "full_path": "dosl7.parse_html_inject_tags"}, {"name": "dosl7.prg_cookie_urls", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "dosl7.prg_cookie_urls"}, {"name": "dosl7.prg_iframe_urls", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "dosl7.prg_iframe_urls"}, {"name": "dosl7.proactive_defense_cookie_name", "default": "TSPD_101", "value": "TSPD_101", "value_range": "string", "scf_config": "true", "full_path": "dosl7.proactive_defense_cookie_name"}, {"name": "dosl7.proactive_defense_exclude_benign_bots", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.proactive_defense_exclude_benign_bots"}, {"name": "dosl7.proactive_defense_excluded_headers", "default": ",", "value": ",", "value_range": "string", "scf_config": "true", "full_path": "dosl7.proactive_defense_excluded_headers"}, {"name": "dosl7.proactive_defense_fictive_url", "default": "/TSPD/", "value": "/TSPD/", "value_range": "string", "scf_config": "true", "full_path": "dosl7.proactive_defense_fictive_url"}, {"name": "dosl7.proactive_defense_log_rate_limit", "default": "100", "value": "100", "value_range": "unsigned integer min:0 max:1000000", "scf_config": "true", "full_path": "dosl7.proactive_defense_log_rate_limit"}, {"name": "dosl7.proactive_defense_max_http_request_length", "default": "4096", "value": "4096", "value_range": "unsigned integer min:1 max:10485760", "scf_config": "true", "full_path": "dosl7.proactive_defense_max_http_request_length"}, {"name": "dosl7.proactive_defense_prefix", "default": "TSPD", "value": "TSPD", "value_range": "string", "scf_config": "true", "full_path": "dosl7.proactive_defense_prefix"}, {"name": "dosl7.proactive_defense_renew_sec", "default": "300", "value": "300", "value_range": "unsigned integer min:0 max:10000000", "scf_config": "true", "full_path": "dosl7.proactive_defense_renew_sec"}, {"name": "dosl7.proactive_defense_simple_redirect", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.proactive_defense_simple_redirect"}, {"name": "dosl7.proactive_defense_simple_redirect_on_grace", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.proactive_defense_simple_redirect_on_grace"}, {"name": "dosl7.proactive_defense_validate_ip", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.proactive_defense_validate_ip"}, {"name": "dosl7.proactive_defense_validation_percent", "default": "100", "value": "100", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "dosl7.proactive_defense_validation_percent"}, {"name": "dosl7.report_acy_perf", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.report_acy_perf"}, {"name": "dosl7.score_selenium_plugin", "default": "999", "value": "999", "value_range": "unsigned integer min:0 max:999", "scf_config": "true", "full_path": "dosl7.score_selenium_plugin"}, {"name": "dosl7.score_selenium_portscan", "default": "999", "value": "999", "value_range": "unsigned integer min:0 max:999", "scf_config": "true", "full_path": "dosl7.score_selenium_portscan"}, {"name": "dosl7.selenium_timeout", "default": "150", "value": "150", "value_range": "unsigned integer min:100 max:10000", "scf_config": "true", "full_path": "dosl7.selenium_timeout"}, {"name": "dosl7.sign_embeded_script", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.sign_embeded_script"}, {"name": "dosl7.test", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "dosl7.test"}, {"name": "dosl7.use_secure_cookies", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7.use_secure_cookies"}, {"name": "dosl7.web_rootkit_report_min_score", "default": "4", "value": "4", "value_range": "unsigned integer min:0 max:1000", "scf_config": "true", "full_path": "dosl7.web_rootkit_report_min_score"}, {"name": "dosl7d.attack_wait_timeout", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:300", "scf_config": "true", "full_path": "dosl7d.attack_wait_timeout"}, {"name": "dosl7d.auto_below_thresh_timeout", "default": "30", "value": "30", "value_range": "unsigned integer min:1 max:200", "scf_config": "true", "full_path": "dosl7d.auto_below_thresh_timeout"}, {"name": "dosl7d.auto_cold_start_first_period_length", "default": "120", "value": "120", "value_range": "unsigned integer min:1 max:10000", "scf_config": "true", "full_path": "dosl7d.auto_cold_start_first_period_length"}, {"name": "dosl7d.auto_cold_start_first_period_switch_period", "default": "60", "value": "60", "value_range": "unsigned integer min:1 max:1000", "scf_config": "true", "full_path": "dosl7d.auto_cold_start_first_period_switch_period"}, {"name": "dosl7d.auto_cold_start_second_period_length", "default": "1320", "value": "1320", "value_range": "unsigned integer min:1 max:10000", "scf_config": "true", "full_path": "dosl7d.auto_cold_start_second_period_length"}, {"name": "dosl7d.auto_drop_ratio", "default": "80", "value": "80", "value_range": "unsigned integer min:1 max:200", "scf_config": "true", "full_path": "dosl7d.auto_drop_ratio"}, {"name": "dosl7d.auto_geo_slice_length", "default": "3600", "value": "3600", "value_range": "unsigned integer min:10 max:3600", "scf_config": "true", "full_path": "dosl7d.auto_geo_slice_length"}, {"name": "dosl7d.auto_normal_switch_period", "default": "720", "value": "720", "value_range": "unsigned integer min:1 max:5000", "scf_config": "true", "full_path": "dosl7d.auto_normal_switch_period"}, {"name": "dosl7d.auto_num_of_top_device_id", "default": "64", "value": "64", "value_range": "unsigned integer min:2 max:1024", "scf_config": "true", "full_path": "dosl7d.auto_num_of_top_device_id"}, {"name": "dosl7d.auto_num_of_top_geolocation", "default": "16", "value": "16", "value_range": "unsigned integer min:2 max:1024", "scf_config": "true", "full_path": "dosl7d.auto_num_of_top_geolocation"}, {"name": "dosl7d.auto_num_of_top_ip", "default": "128", "value": "128", "value_range": "unsigned integer min:2 max:1024", "scf_config": "true", "full_path": "dosl7d.auto_num_of_top_ip"}, {"name": "dosl7d.auto_num_of_top_url", "default": "512", "value": "512", "value_range": "unsigned integer min:2 max:1024", "scf_config": "true", "full_path": "dosl7d.auto_num_of_top_url"}, {"name": "dosl7d.auto_stress_thresh_multiplier", "default": "150", "value": "150", "value_range": "unsigned integer min:1 max:1000", "scf_config": "true", "full_path": "dosl7d.auto_stress_thresh_multiplier"}, {"name": "dosl7d.auto_time_scale_factor", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:10000", "scf_config": "true", "full_path": "dosl7d.auto_time_scale_factor"}, {"name": "dosl7d.auto_tps_thresh_multiplier", "default": "300", "value": "300", "value_range": "unsigned integer min:1 max:1000", "scf_config": "true", "full_path": "dosl7d.auto_tps_thresh_multiplier"}, {"name": "dosl7d.conf_change_freeze_on_period", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:300", "scf_config": "true", "full_path": "dosl7d.conf_change_freeze_on_period"}, {"name": "dosl7d.cs_legitimate_successful_rate", "default": "50", "value": "50", "value_range": "unsigned integer min:1 max:100", "scf_config": "true", "full_path": "dosl7d.cs_legitimate_successful_rate"}, {"name": "dosl7d.cs_max_reply_time", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:900", "scf_config": "true", "full_path": "dosl7d.cs_max_reply_time"}, {"name": "dosl7d.cs_min_requests_for_replies", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:1000", "scf_config": "true", "full_path": "dosl7d.cs_min_requests_for_replies"}, {"name": "dosl7d.force_core_on_sigabrt", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7d.force_core_on_sigabrt"}, {"name": "dosl7d.heaviness_factor", "default": "200", "value": "200", "value_range": "unsigned integer min:100 max:10000", "scf_config": "true", "full_path": "dosl7d.heaviness_factor"}, {"name": "dosl7d.max_attack_duration", "default": "10800", "value": "10800", "value_range": "unsigned integer min:120 max:36000", "scf_config": "true", "full_path": "dosl7d.max_attack_duration"}, {"name": "dosl7d.max_tcpdump_cpu_usage", "default": "80", "value": "80", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "dosl7d.max_tcpdump_cpu_usage"}, {"name": "dosl7d.max_tcpdump_files", "default": "1000", "value": "1000", "value_range": "unsigned integer min:10 max:10000", "scf_config": "true", "full_path": "dosl7d.max_tcpdump_files"}, {"name": "dosl7d.max_tcpdump_size", "default": "10240", "value": "10240", "value_range": "unsigned integer min:10 max:51200", "scf_config": "true", "full_path": "dosl7d.max_tcpdump_size"}, {"name": "dosl7d.min_challenge_drop_time", "default": "20", "value": "20", "value_range": "unsigned integer min:1 max:1000", "scf_config": "true", "full_path": "dosl7d.min_challenge_drop_time"}, {"name": "dosl7d.min_challenge_rps", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:50000", "scf_config": "true", "full_path": "dosl7d.min_challenge_rps"}, {"name": "dosl7d.min_challenge_success_ratio", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "dosl7d.min_challenge_success_ratio"}, {"name": "dosl7d.min_geo_reliable_time", "default": "72", "value": "72", "value_range": "unsigned integer min:1 max:360", "scf_config": "true", "full_path": "dosl7d.min_geo_reliable_time"}, {"name": "dosl7d.min_heavy_url_drop_rate", "default": "2", "value": "2", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "dosl7d.min_heavy_url_drop_rate"}, {"name": "dosl7d.min_time_between_attacks", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:300", "scf_config": "true", "full_path": "dosl7d.min_time_between_attacks"}, {"name": "dosl7d.min_time_for_attack_end", "default": "120", "value": "120", "value_range": "unsigned integer min:0 max:300", "scf_config": "true", "full_path": "dosl7d.min_time_for_attack_end"}, {"name": "dosl7d.min_transaction_count_per_interval", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:1000", "scf_config": "true", "full_path": "dosl7d.min_transaction_count_per_interval"}, {"name": "dosl7d.publish_custom_message", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7d.publish_custom_message"}, {"name": "dosl7d.shun_list", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7d.shun_list"}, {"name": "dosl7d.shun_prevention_time", "default": "120", "value": "120", "value_range": "unsigned integer min:1 max:1000", "scf_config": "true", "full_path": "dosl7d.shun_prevention_time"}, {"name": "dosl7d.sliding_window_long", "default": "86400", "value": "86400", "value_range": "unsigned integer min:1 max:8640000", "scf_config": "true", "full_path": "dosl7d.sliding_window_long"}, {"name": "dosl7d.sliding_window_medium", "default": "7200", "value": "7200", "value_range": "unsigned integer min:1 max:864000", "scf_config": "true", "full_path": "dosl7d.sliding_window_medium"}, {"name": "dosl7d.sliding_window_short", "default": "60", "value": "60", "value_range": "unsigned integer min:1 max:86400", "scf_config": "true", "full_path": "dosl7d.sliding_window_short"}, {"name": "dosl7d.static_uri_protection", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7d.static_uri_protection"}, {"name": "dosl7d.stress_absolute_threshold", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:10000", "scf_config": "true", "full_path": "dosl7d.stress_absolute_threshold"}, {"name": "dosl7d.stress_relative_threshold", "default": "100", "value": "100", "value_range": "unsigned integer min:0 max:1000", "scf_config": "true", "full_path": "dosl7d.stress_relative_threshold"}, {"name": "dosl7d.susp_max_entities", "default": "10000", "value": "10000", "value_range": "unsigned integer min:1 max:1000000", "scf_config": "true", "full_path": "dosl7d.susp_max_entities"}, {"name": "dosl7d.tcpdump_rstcause", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "dosl7d.tcpdump_rstcause"}, {"name": "dosl7d.trigger_logging", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:15000", "scf_config": "true", "full_path": "dosl7d.trigger_logging"}, {"name": "dynconfd.loglevel", "default": "error", "value": "error", "value_range": "debug debug_msg deep_debug error info none", "scf_config": "false", "full_path": "dynconfd.loglevel"}, {"name": "ecm.tm.compression", "default": "0", "value": "0", "value_range": "integer min:0 max:1", "scf_config": "false", "full_path": "ecm.tm.compression"}, {"name": "ecm.tm.configport", "default": "4475", "value": "4475", "value_range": "integer min:1 max:65535", "scf_config": "true", "full_path": "ecm.tm.configport"}, {"name": "ecm.tm.customcert", "default": "0", "value": "0", "value_range": "integer min:0 max:1", "scf_config": "false", "full_path": "ecm.tm.customcert"}, {"name": "ecm.tm.ecmport", "default": "4473", "value": "4473", "value_range": "integer min:1 max:65535", "scf_config": "true", "full_path": "ecm.tm.ecmport"}, {"name": "ecm.tm.httpadapterport", "default": "4476", "value": "4476", "value_range": "integer min:1 max:65535", "scf_config": "true", "full_path": "ecm.tm.httpadapterport"}, {"name": "ecm.tm.retries", "default": "20", "value": "20", "value_range": "unsigned integer min:0 max:65535", "scf_config": "false", "full_path": "ecm.tm.retries"}, {"name": "ecm.tm.ssl", "default": "0", "value": "0", "value_range": "integer min:0 max:1", "scf_config": "false", "full_path": "ecm.tm.ssl"}, {"name": "ecm.tm.tmport", "default": "4474", "value": "4474", "value_range": "integer min:1 max:65535", "scf_config": "true", "full_path": "ecm.tm.tmport"}, {"name": "fad.badpktpassrate", "default": "1000", "value": "1000", "value_range": "integer min:0 max:65535", "scf_config": "true", "full_path": "fad.badpktpassrate"}, {"name": "fad.ignoreresult", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "fad.ignoreresult"}, {"name": "failover.activemode", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "failover.activemode"}, {"name": "failover.activetime", "default": "0", "value": "1575960312", "value_range": "integer min:0 max:2147483647", "scf_config": "false", "full_path": "failover.activetime"}, {"name": "failover.bigipunitmask", "default": "0", "value": "3", "value_range": "integer min:0 max:3", "scf_config": "false", "full_path": "failover.bigipunitmask"}, {"name": "failover.crcvalues", "default": "agree", "value": "agree", "value_range": "agree disagree", "scf_config": "false", "full_path": "failover.crcvalues"}, {"name": "failover.dbgfile", "default": "/var/log/sodlog", "value": "/var/log/sodlog", "value_range": "string", "scf_config": "true", "full_path": "failover.dbgfile"}, {"name": "failover.debug", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "failover.debug"}, {"name": "failover.debugsteadystate", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "failover.debugsteadystate"}, {"name": "failover.forceactive", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "failover.forceactive"}, {"name": "failover.forceoffline", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "failover.forceoffline"}, {"name": "failover.forcestandby", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "failover.forcestandby"}, {"name": "failover.hacable", "default": "unset", "value": "unset", "value_range": "one unset zero", "scf_config": "false", "full_path": "failover.hacable"}, {"name": "failover.isredundant", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "failover.isredundant"}, {"name": "failover.linksup", "default": "false", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "failover.linksup"}, {"name": "failover.manfailback", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "failover.manfailback"}, {"name": "failover.mirrorl4pkts", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "failover.mirrorl4pkts"}, {"name": "failover.nettimeoutsec", "default": "3", "value": "3", "value_range": "integer min:1 max:120", "scf_config": "true", "full_path": "failover.nettimeoutsec"}, {"name": "failover.network", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "failover.network"}, {"name": "failover.offlinelinkdown.port", "default": "1030", "value": "1030", "value_range": "integer min:1 max:9999", "scf_config": "true", "full_path": "failover.offlinelinkdown.port"}, {"name": "failover.packetcheck", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "failover.packetcheck"}, {"name": "failover.packetchecklog", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "failover.packetchecklog"}, {"name": "failover.printpeerstate", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "failover.printpeerstate"}, {"name": "failover.rebootviasod", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "failover.rebootviasod"}, {"name": "failover.secure", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "failover.secure"}, {"name": "failover.selinuxallowscripts", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "failover.selinuxallowscripts"}, {"name": "failover.somehascores", "default": "no", "value": "no", "value_range": "string", "scf_config": "false", "full_path": "failover.somehascores"}, {"name": "failover.standby.linkdowntime", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "failover.standby.linkdowntime"}, {"name": "failover.standbytime", "default": "0", "value": "1575960312", "value_range": "integer min:0 max:2147483647", "scf_config": "false", "full_path": "failover.standbytime"}, {"name": "failover.state", "default": "offline", "value": "active", "value_range": "active forced_offline offline standby", "scf_config": "false", "full_path": "failover.state"}, {"name": "failover.substate", "default": "none", "value": "none", "value_range": "failsafe-fault monitor-fault none", "scf_config": "false", "full_path": "failover.substate"}, {"name": "failover.unitid", "default": "1", "value": "1", "value_range": "integer min:1 max:2", "scf_config": "false", "full_path": "failover.unitid"}, {"name": "failover.usetty01", "default": "enable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "failover.usetty01"}, {"name": "failover.vlanfailsafe.resettimeronanyframe", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "failover.vlanfailsafe.resettimeronanyframe"}, {"name": "failover.vlanfailsafe.standbynoaction", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "failover.vlanfailsafe.standbynoaction"}, {"name": "failover.vlanfailsafe.startuptimer", "default": "90", "value": "90", "value_range": "integer min:30 max:32767", "scf_config": "true", "full_path": "failover.vlanfailsafe.startuptimer"}, {"name": "fw_nat.source.translation.proxy_arp", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "fw_nat.source.translation.proxy_arp"}, {"name": "fw_nat.subscriber.id.lookup.count", "default": "2", "value": "2", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "fw_nat.subscriber.id.lookup.count"}, {"name": "geolocation.preload", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "geolocation.preload"}, {"name": "gre.lookupip", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "gre.lookupip"}, {"name": "gtm.configtime", "default": "0", "value": "0", "value_range": "integer min:0 max:2147483647", "scf_config": "false", "full_path": "gtm.configtime"}, {"name": "gtm.coredump", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "gtm.coredump"}, {"name": "gtm.debugprobelogging", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "gtm.debugprobelogging"}, {"name": "gtm.debugprobetuninginterval", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "gtm.debugprobetuninginterval"}, {"name": "gtm.dynamiclbsecondarymode", "default": "round_robin", "value": "round_robin", "value_range": "ratio round_robin", "scf_config": "true", "full_path": "gtm.dynamiclbsecondarymode"}, {"name": "gtm.loadlinkcost", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "gtm.loadlinkcost"}, {"name": "gtm.maxpersistsyncspersecond", "default": "800", "value": "800", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "true", "full_path": "gtm.maxpersistsyncspersecond"}, {"name": "gtm.maxproxybufsize", "default": "262144", "value": "262144", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "gtm.maxproxybufsize"}, {"name": "gtm.onetimeautoconfig", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "gtm.onetimeautoconfig"}, {"name": "gtm.peerinfolocalid", "default": "-1", "value": "-1", "value_range": "integer min:-1 max:2147483647", "scf_config": "false", "full_path": "gtm.peerinfolocalid"}, {"name": "gtm.peerinfototalgtms", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "gtm.peerinfototalgtms"}, {"name": "gtm.querylogging", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "gtm.querylogging"}, {"name": "gtm.reqinitstate", "default": "ready", "value": "ready", "value_range": "need_peer ready waiting_for_ldns_sync", "scf_config": "false", "full_path": "gtm.reqinitstate"}, {"name": "gtm.verbosemcpmessages", "default": "disable", "value": "disable", "value_range": "all disable incoming outgoing", "scf_config": "false", "full_path": "gtm.verbosemcpmessages"}, {"name": "gtm.wideiptoporandom", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "gtm.wideiptoporandom"}, {"name": "hostname", "default": "bigip1", "value": "bigip1", "value_range": "string", "scf_config": "false", "full_path": "hostname"}, {"name": "hostname.ip.custom", "default": "::", "value": "::", "value_range": "IP address", "scf_config": "false", "full_path": "hostname.ip.custom"}, {"name": "hostname.ip.mode", "default": "mgmt", "value": "mgmt", "value_range": "custom mgmt statemirror", "scf_config": "false", "full_path": "hostname.ip.mode"}, {"name": "httpagents.realserver.log", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "httpagents.realserver.log"}, {"name": "httpagents.stripipv6mappedipv4", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "httpagents.stripipv6mappedipv4"}, {"name": "httpagents.wmi.log", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "httpagents.wmi.log"}, {"name": "httpsecurity.avrstatenabled", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "httpsecurity.avrstatenabled"}, {"name": "httpsecurity.maxheaderslengthlog", "default": "1024", "value": "1024", "value_range": "unsigned integer min:64 max:100000", "scf_config": "true", "full_path": "httpsecurity.maxheaderslengthlog"}, {"name": "httpsecurity.maxheadervaluelength", "default": "2048", "value": "2048", "value_range": "unsigned integer min:64 max:100000", "scf_config": "true", "full_path": "httpsecurity.maxheadervaluelength"}, {"name": "httpsecurity.maxurllengthlog", "default": "128", "value": "128", "value_range": "unsigned integer min:16 max:100000", "scf_config": "true", "full_path": "httpsecurity.maxurllengthlog"}, {"name": "httpsecurity.uselastxff", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "httpsecurity.uselastxff"}, {"name": "hwpd.status", "default": "quiescent", "value": "quiescent", "value_range": "busy fail quiescent", "scf_config": "false", "full_path": "hwpd.status"}, {"name": "icontrol.dtdparsing", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "icontrol.dtdparsing"}, {"name": "icontrol.forcesessions", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "icontrol.forcesessions"}, {"name": "icontrol.groupid", "default": "DefaultGroup", "value": "DefaultGroup", "value_range": "string", "scf_config": "false", "full_path": "icontrol.groupid"}, {"name": "icontrol.loglevel", "default": "none", "value": "none", "value_range": "debug none trace", "scf_config": "false", "full_path": "icontrol.loglevel"}, {"name": "icontrol.webrootenforcement", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "icontrol.webrootenforcement"}, {"name": "icsa.force********packetlogging", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "icsa.force********packetlogging"}, {"name": "ilx.handlewait", "default": "100", "value": "100", "value_range": "unsigned integer min:0 max:65536", "scf_config": "true", "full_path": "ilx.handlewait"}, {"name": "ipproto.lookupip", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "ipproto.lookupip"}, {"name": "iprep.autoupdate", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "iprep.autoupdate"}, {"name": "iprep.intervalmin", "default": "5", "value": "5", "value_range": "integer min:1 max:525600", "scf_config": "true", "full_path": "iprep.intervalmin"}, {"name": "iprep.port", "default": "443", "value": "443", "value_range": "integer min:1 max:65535", "scf_config": "false", "full_path": "iprep.port"}, {"name": "iprep.server", "default": "vector2.brightcloud.com", "value": "vector2.brightcloud.com", "value_range": "string", "scf_config": "false", "full_path": "iprep.server"}, {"name": "iprep.sockettimeout", "default": "15", "value": "15", "value_range": "integer min:1 max:65535", "scf_config": "false", "full_path": "iprep.sockettimeout"}, {"name": "ipsec.aesgmacinterop", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "ipsec.aesgmacinterop"}, {"name": "ipsec.disablepfs", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "ipsec.disablepfs"}, {"name": "ipsec.icsaforceipfrag", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ipsec.icsaforceipfrag"}, {"name": "ipsec.icsalogrejectedesp", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ipsec.icsalogrejectedesp"}, {"name": "ipsec.if.checkpolicy", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "ipsec.if.checkpolicy"}, {"name": "ipsec.ikev2certificatedepth", "default": "4", "value": "4", "value_range": "unsigned integer min:1 max:4", "scf_config": "true", "full_path": "ipsec.ikev2certificatedepth"}, {"name": "ipsec.ivchaining", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ipsec.ivchaining"}, {"name": "ipsec.lookupip", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "ipsec.lookupip"}, {"name": "ipsec.lookupspi", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "ipsec.lookupspi"}, {"name": "ipsec.maxroutedomain", "default": "512", "value": "512", "value_range": "integer min:1 max:1000", "scf_config": "true", "full_path": "ipsec.maxroutedomain"}, {"name": "ipsec.maxtrafficselectors", "default": "30", "value": "30", "value_range": "integer min:1 max:30", "scf_config": "false", "full_path": "ipsec.maxtrafficselectors"}, {"name": "ipsec.passesp", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "ipsec.passesp"}, {"name": "ipsec.proxymode", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "ipsec.proxymode"}, {"name": "ipsec.removeredundantsa", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "ipsec.removeredundantsa"}, {"name": "ipsec.reorderqdepth", "default": "1", "value": "1", "value_range": "1 1024 128 16 2 256 32 4 512 64 8", "scf_config": "true", "full_path": "ipsec.reorderqdepth"}, {"name": "ipsec.traceflags", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "false", "full_path": "ipsec.traceflags"}, {"name": "iptunnel.configsync", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "iptunnel.configsync"}, {"name": "iptunnel.csumoffload", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "iptunnel.csumoffload"}, {"name": "iptunnel.hf.opaqueflags", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "iptunnel.hf.opaqueflags"}, {"name": "iptunnel.macaddr_per_tunnel", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "iptunnel.macaddr_per_tunnel"}, {"name": "iptunnel.nvgre.ethertype", "default": "25944", "value": "25944", "value_range": "unsigned integer min:0 max:65535", "scf_config": "true", "full_path": "iptunnel.nvgre.ethertype"}, {"name": "iptunnel.transparent.flow.allocate", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "iptunnel.transparent.flow.allocate"}, {"name": "iptunnel.v6rd.antispoofing", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "iptunnel.v6rd.antispoofing"}, {"name": "iptunnel.vxlan.udpport", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:65535", "scf_config": "true", "full_path": "iptunnel.vxlan.udpport"}, {"name": "iptunnel.vxlan.vtepidletimeout", "default": "300", "value": "300", "value_range": "unsigned integer min:2 max:65536", "scf_config": "true", "full_path": "iptunnel.vxlan.vtepidletimeout"}, {"name": "ipv6.dad.recovery", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:65536", "scf_config": "true", "full_path": "ipv6.dad.recovery"}, {"name": "ipv6.enabled", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "ipv6.enabled"}, {"name": "ipv6.host.router_probe_interval", "default": "5", "value": "5", "value_range": "unsigned integer min:1 max:300", "scf_config": "true", "full_path": "ipv6.host.router_probe_interval"}, {"name": "ipv6.nbr.delaytime", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:65536", "scf_config": "true", "full_path": "ipv6.nbr.delaytime"}, {"name": "ipv6.nbr.incompletetimeout", "default": "5", "value": "5", "value_range": "unsigned integer min:2 max:65536", "scf_config": "true", "full_path": "ipv6.nbr.incompletetimeout"}, {"name": "ipv6.nbr.maxentries", "default": "2048", "value": "2048", "value_range": "unsigned integer min:2 max:65536", "scf_config": "true", "full_path": "ipv6.nbr.maxentries"}, {"name": "ipv6.nbr.priority", "default": "normal", "value": "normal", "value_range": "high normal", "scf_config": "false", "full_path": "ipv6.nbr.priority"}, {"name": "ipv6.nbr.reachabletimeout", "default": "30", "value": "30", "value_range": "unsigned integer min:2 max:65536", "scf_config": "true", "full_path": "ipv6.nbr.reachabletimeout"}, {"name": "ipv6.nbr.reaptimeout", "default": "3600", "value": "3600", "value_range": "unsigned integer min:2 max:65536", "scf_config": "true", "full_path": "ipv6.nbr.reaptimeout"}, {"name": "ipv6.nbr.retries", "default": "3", "value": "3", "value_range": "unsigned integer min:1 max:65536", "scf_config": "true", "full_path": "ipv6.nbr.retries"}, {"name": "ipv6.nbr.vlanpriority", "default": "-1", "value": "-1", "value_range": "integer min:-1 max:7", "scf_config": "false", "full_path": "ipv6.nbr.vlanpriority"}, {"name": "ipv6.strictcompliance", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "ipv6.strictcompliance"}, {"name": "isession.compression.buffers", "default": "4", "value": "4", "value_range": "unsigned integer min:1 max:6", "scf_config": "true", "full_path": "isession.compression.buffers"}, {"name": "isession.compression.fudgefactor", "default": "9", "value": "9", "value_range": "unsigned integer min:1 max:1000", "scf_config": "true", "full_path": "isession.compression.fudgefactor"}, {"name": "isession.compression.highthresholdwatermarklevel", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:20", "scf_config": "true", "full_path": "isession.compression.highthresholdwatermarklevel"}, {"name": "isession.compression.lowthresholdwatermarklevel", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "isession.compression.lowthresholdwatermarklevel"}, {"name": "isession.compression.threshold", "default": "95", "value": "95", "value_range": "unsigned integer min:0 max:1000", "scf_config": "true", "full_path": "isession.compression.threshold"}, {"name": "isession.control.ipsec", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "isession.control.ipsec"}, {"name": "isession.controlconnection.count", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:100", "scf_config": "true", "full_path": "isession.controlconnection.count"}, {"name": "isession.controlconnection.lock", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "isession.controlconnection.lock"}, {"name": "isession.ctrl.apm", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "isession.ctrl.apm"}, {"name": "isession.dedup.wirecheck", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "isession.dedup.wirecheck"}, {"name": "kernel.ibpb_ibrs", "default": "IBPB0-IBRS0", "value": "IBPB0-IBRS0", "value_range": "IBPB0-IBRS0 IBPB0-IBRS1 IBPB0-IBRS2 IBPB1-IBRS0 IBPB1-IBRS1 IBPB1-IBRS2 IBPB2-IBRS0", "scf_config": "true", "full_path": "kernel.ibpb_ibrs"}, {"name": "kernel.iommu", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "kernel.iommu"}, {"name": "kernel.pti", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "kernel.pti"}, {"name": "keyboard.type", "default": "US - Standard 101 key", "value": "US - Standard 101 key", "value_range": "string", "scf_config": "false", "full_path": "keyboard.type"}, {"name": "l4bdos.anomaly.detection.frequency", "default": "10", "value": "10", "value_range": "unsigned integer min:5 max:60", "scf_config": "true", "full_path": "l4bdos.anomaly.detection.frequency"}, {"name": "l4bdos.anomaly.threshold.floor", "default": "100", "value": "100", "value_range": "unsigned integer min:100 max:4294967295", "scf_config": "true", "full_path": "l4bdos.anomaly.threshold.floor"}, {"name": "l4bdos.baseline.learning.period", "default": "120", "value": "120", "value_range": "unsigned integer min:15 max:7200", "scf_config": "true", "full_path": "l4bdos.baseline.learning.period"}, {"name": "l4bdos.collect.stats.frequency", "default": "2", "value": "2", "value_range": "unsigned integer min:1 max:60", "scf_config": "true", "full_path": "l4bdos.collect.stats.frequency"}, {"name": "l4bdos.dns.stress.compute.frequency", "default": "200", "value": "200", "value_range": "unsigned integer min:100 max:1000", "scf_config": "true", "full_path": "l4bdos.dns.stress.compute.frequency"}, {"name": "l4bdos.ha.state.update.frequency", "default": "600", "value": "600", "value_range": "unsigned integer min:60 max:86400", "scf_config": "true", "full_path": "l4bdos.ha.state.update.frequency"}, {"name": "l4bdos.netflow.collect.frequency", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:60", "scf_config": "true", "full_path": "l4bdos.netflow.collect.frequency"}, {"name": "l4bdos.netflow.disable.selective.bins", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "l4bdos.netflow.disable.selective.bins"}, {"name": "l4bdos.packet.sampling.interval", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:256", "scf_config": "true", "full_path": "l4bdos.packet.sampling.interval"}, {"name": "l4bdos.signature.disable.no_stats.periods", "default": "5", "value": "5", "value_range": "unsigned integer min:1 max:30", "scf_config": "true", "full_path": "l4bdos.signature.disable.no_stats.periods"}, {"name": "l4bdos.signature.sample.packet.frequency", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:65536", "scf_config": "true", "full_path": "l4bdos.signature.sample.packet.frequency"}, {"name": "l4bdos.transient.signature.merge.periods", "default": "2", "value": "2", "value_range": "unsigned integer min:0 max:1000", "scf_config": "true", "full_path": "l4bdos.transient.signature.merge.periods"}, {"name": "lacpd.refport.stick", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "lacpd.refport.stick"}, {"name": "lcd.showmenu", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "lcd.showmenu"}, {"name": "led.locator", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "led.locator"}, {"name": "license.allowea", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "license.allowea"}, {"name": "license.antifraud.applicationencryption", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "license.antifraud.applicationencryption"}, {"name": "license.antifraud.automatictransactiondetection", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "license.antifraud.automatictransactiondetection"}, {"name": "license.antifraud.id", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "license.antifraud.id"}, {"name": "license.antifraud.malwaredetection", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "license.antifraud.malwaredetection"}, {"name": "license.antifraud.mobilesafe", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "license.antifraud.mobilesafe"}, {"name": "license.antifraud.phishingdetection", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "license.antifraud.phishingdetection"}, {"name": "license.forcedisabled", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "license.forcedisabled"}, {"name": "license.ignorecrc", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "license.ignorecrc"}, {"name": "license.maxcores", "default": "0", "value": "0", "value_range": "integer min:0 max:1000", "scf_config": "false", "full_path": "license.maxcores"}, {"name": "license.operational", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "license.operational"}, {"name": "license.registrationkey", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "license.registrationkey"}, {"name": "license.servicecheckdateok", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "license.servicecheckdateok"}, {"name": "liveinstall.checksig", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "liveinstall.checksig"}, {"name": "liveinstall.longmode", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "liveinstall.longmode"}, {"name": "liveinstall.moveconfig", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "liveinstall.moveconfig"}, {"name": "liveinstall.movelicense", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "liveinstall.movelicense"}, {"name": "liveinstall.packageset", "default": "default", "value": "default", "value_range": "string", "scf_config": "false", "full_path": "liveinstall.packageset"}, {"name": "liveinstall.saveconfig", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "liveinstall.saveconfig"}, {"name": "liveinstall.savelicense", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "liveinstall.savelicense"}, {"name": "log.access.db", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.access.db"}, {"name": "log.access.syslog", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.access.syslog"}, {"name": "log.access.tmm.async", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.access.tmm.async"}, {"name": "log.accesscontrol.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.accesscontrol.level"}, {"name": "log.accessperrequest.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.accessperrequest.level"}, {"name": "log.adapt.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.adapt.level"}, {"name": "log.alertapmaccessthreshold", "default": "75", "value": "75", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "log.alertapmaccessthreshold"}, {"name": "log.alertapmconnectivitythreshold", "default": "75", "value": "75", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "log.alertapmconnectivitythreshold"}, {"name": "log.alertapmurlflimitedthreshold", "default": "75", "value": "75", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "log.alertapmurlflimitedthreshold"}, {"name": "log.alertapmurlfthreshold", "default": "75", "value": "75", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "log.alertapmurlfthreshold"}, {"name": "log.alertbwthreshold", "default": "75", "value": "75", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "log.alertbwthreshold"}, {"name": "log.alertd.level", "default": "notice", "value": "notice", "value_range": "debug info notice warning", "scf_config": "true", "full_path": "log.alertd.level"}, {"name": "log.antifraud.datasync", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.antifraud.datasync"}, {"name": "log.antifraud.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Notice", "scf_config": "false", "full_path": "log.antifraud.level"}, {"name": "log.antifraud.request", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.antifraud.request"}, {"name": "log.antifraud.response", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.antifraud.response"}, {"name": "log.antifraud.sessiondb", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.antifraud.sessiondb"}, {"name": "log.apmacl.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.apmacl.level"}, {"name": "log.arp.level", "default": "Warning", "value": "Warning", "value_range": "Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.arp.level"}, {"name": "log.asm.asmconfig.level", "default": "info", "value": "info", "value_range": "debug err error info trace warn warning", "scf_config": "true", "full_path": "log.asm.asmconfig.level"}, {"name": "log.asm.asmconfigevent.level", "default": "info", "value": "info", "value_range": "debug err error info trace warn warning", "scf_config": "true", "full_path": "log.asm.asmconfigevent.level"}, {"name": "log.asm.asmconfigverbose.level", "default": "info", "value": "info", "value_range": "debug err error info trace warn warning", "scf_config": "true", "full_path": "log.asm.asmconfigverbose.level"}, {"name": "log.asm.asmcrond.level", "default": "info", "value": "info", "value_range": "debug err error info trace warn warning", "scf_config": "true", "full_path": "log.asm.asmcrond.level"}, {"name": "log.asm.asmlogd.level", "default": "info", "value": "info", "value_range": "debug err error info trace warn warning", "scf_config": "true", "full_path": "log.asm.asmlogd.level"}, {"name": "log.asm.bdagent.level", "default": "debug", "value": "debug", "value_range": "debug err error info trace warn warning", "scf_config": "true", "full_path": "log.asm.bdagent.level"}, {"name": "log.asm.clustering.level", "default": "info", "value": "info", "value_range": "debug err error info trace warn warning", "scf_config": "true", "full_path": "log.asm.clustering.level"}, {"name": "log.asm.dos.level", "default": "info", "value": "info", "value_range": "debug err error info trace warn warning", "scf_config": "true", "full_path": "log.asm.dos.level"}, {"name": "log.asm.other.level", "default": "debug", "value": "debug", "value_range": "debug err error info trace warn warning", "scf_config": "true", "full_path": "log.asm.other.level"}, {"name": "log.auth.level", "default": "Error", "value": "Error", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.auth.level"}, {"name": "log.autodosd.level", "default": "Error", "value": "Error", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.autodosd.level"}, {"name": "log.bcm56xxd.debugmask", "default": "0", "value": "0", "value_range": "string", "scf_config": "false", "full_path": "log.bcm56xxd.debugmask"}, {"name": "log.bcm56xxd.level", "default": "Informational", "value": "Informational", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.bcm56xxd.level"}, {"name": "log.bcm56xxd.tbuf", "default": "50000", "value": "50000", "value_range": "integer min:0 max:1000000", "scf_config": "true", "full_path": "log.bcm56xxd.tbuf"}, {"name": "log.bdosd.level", "default": "Error", "value": "Error", "value_range": "Critical Debug Error Notice Verbose Warning", "scf_config": "false", "full_path": "log.bdosd.level"}, {"name": "log.big3d.level", "default": "notice", "value": "notice", "value_range": "alert crit debug emerg err error info notice panic warn warning", "scf_config": "true", "full_path": "log.big3d.level"}, {"name": "log.big3dshim.level", "default": "notice", "value": "notice", "value_range": "alert crit debug emerg err error info notice panic warn warning", "scf_config": "true", "full_path": "log.big3dshim.level"}, {"name": "log.clusterd.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.clusterd.level"}, {"name": "log.clusterd.stdout", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.clusterd.stdout"}, {"name": "log.config.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.config.level"}, {"name": "log.csyncd.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.csyncd.level"}, {"name": "log.csyncd.stdout", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.csyncd.stdout"}, {"name": "log.deflate.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.deflate.level"}, {"name": "log.devmgmt.level", "default": "Informational", "value": "Informational", "value_range": "Debug Error Informational Notice Trace Warning", "scf_config": "false", "full_path": "log.devmgmt.level"}, {"name": "log.diameter.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.diameter.level"}, {"name": "log.dosl7.acy.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.dosl7.acy.level"}, {"name": "log.dosl7.all.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.dosl7.all.level"}, {"name": "log.dosl7.challenge.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.dosl7.challenge.level"}, {"name": "log.dosl7.conf.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.dosl7.conf.level"}, {"name": "log.dosl7.datasync.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.dosl7.datasync.level"}, {"name": "log.dosl7.main.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.dosl7.main.level"}, {"name": "log.dosl7.misc.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.dosl7.misc.level"}, {"name": "log.dosl7.mobile.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.dosl7.mobile.level"}, {"name": "log.dosl7.tcl.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.dosl7.tcl.level"}, {"name": "log.dosprotect.level", "default": "Warning", "value": "Warning", "value_range": "Debug Informational Notice Warning", "scf_config": "true", "full_path": "log.dosprotect.level"}, {"name": "log.duplicateaddress.level", "default": "Warning", "value": "Warning", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.duplicateaddress.level"}, {"name": "log.dwbld.level", "default": "Informational", "value": "Informational", "value_range": "Debug Error Informational Warning", "scf_config": "false", "full_path": "log.dwbld.level"}, {"name": "log.eca.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.eca.level"}, {"name": "log.em.********.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.em.********.level"}, {"name": "log.em.alert.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.em.alert.level"}, {"name": "log.em.device.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.em.device.level"}, {"name": "log.em.file.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.em.file.level"}, {"name": "log.em.stats.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.em.stats.level"}, {"name": "log.em.swim.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.em.swim.level"}, {"name": "log.evrouted.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.evrouted.level"}, {"name": "log.evrouted.stdout", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.evrouted.stdout"}, {"name": "log.failover.level", "default": "Informational", "value": "Informational", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.failover.level"}, {"name": "log.fix.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.fix.level"}, {"name": "log.fw_fqdn.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.fw_fqdn.level"}, {"name": "log.fw_nat.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.fw_nat.level"}, {"name": "log.gtm.level", "default": "notice", "value": "notice", "value_range": "alert crit debug emerg err error info notice panic warn warning", "scf_config": "true", "full_path": "log.gtm.level"}, {"name": "log.gtp.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.gtp.level"}, {"name": "log.guestagentd.level", "default": "Informational", "value": "Informational", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.guestagentd.level"}, {"name": "log.ha.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.ha.level"}, {"name": "log.halmsg.level", "default": "Error", "value": "Error", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.halmsg.level"}, {"name": "log.hclientd.level", "default": "Notice", "value": "Notice", "value_range": "Critical Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.hclientd.level"}, {"name": "log.hornet.lib.level", "default": "Notice", "value": "Notice", "value_range": "Critical Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.hornet.lib.level"}, {"name": "log.hornet.nest.level", "default": "Notice", "value": "Notice", "value_range": "Critical Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.hornet.nest.level"}, {"name": "log.hornet.nestflowmanager.level", "default": "Notice", "value": "Notice", "value_range": "Critical Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.hornet.nestflowmanager.level"}, {"name": "log.hornet.nestupdater.level", "default": "Notice", "value": "Notice", "value_range": "Critical Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.hornet.nestupdater.level"}, {"name": "log.hornet.neuronupdater.level", "default": "Notice", "value": "Notice", "value_range": "Critical Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.hornet.neuronupdater.level"}, {"name": "log.hornet.server.level", "default": "Notice", "value": "Notice", "value_range": "Critical Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.hornet.server.level"}, {"name": "log.hornet.textclient.level", "default": "Notice", "value": "Notice", "value_range": "Critical Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.hornet.textclient.level"}, {"name": "log.hostagentd.level", "default": "Informational", "value": "Informational", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.hostagentd.level"}, {"name": "log.http.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.http.level"}, {"name": "log.httpsecurity.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Notice", "scf_config": "false", "full_path": "log.httpsecurity.level"}, {"name": "log.hwpd.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.hwpd.level"}, {"name": "log.icap.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.icap.level"}, {"name": "log.icr_eventd.level", "default": "notice", "value": "notice", "value_range": "critical debug error informational notice warning", "scf_config": "false", "full_path": "log.icr_eventd.level"}, {"name": "log.ip.level", "default": "Warning", "value": "Warning", "value_range": "Debug Informational Notice Warning", "scf_config": "false", "full_path": "log.ip.level"}, {"name": "log.ipfix.display_info", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "log.ipfix.display_info"}, {"name": "log.ipfix.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.ipfix.level"}, {"name": "log.ipfix.template_idle_timeout", "default": "120", "value": "120", "value_range": "unsigned integer min:5 max:65536", "scf_config": "false", "full_path": "log.ipfix.template_idle_timeout"}, {"name": "log.ipfix.template_utilization", "default": "90", "value": "90", "value_range": "unsigned integer min:1 max:99", "scf_config": "false", "full_path": "log.ipfix.template_utilization"}, {"name": "log.ipfixirules.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.ipfixirules.level"}, {"name": "log.ipsecalg.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.ipsecalg.level"}, {"name": "log.isession.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.isession.level"}, {"name": "log.istatsd.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.istatsd.level"}, {"name": "log.ivs.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.ivs.level"}, {"name": "log.keymgmtd.level", "default": "notice", "value": "notice", "value_range": "alert crit debug emerg err info notice warning", "scf_config": "false", "full_path": "log.keymgmtd.level"}, {"name": "log.lacpd.debugmask", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "false", "full_path": "log.lacpd.debugmask"}, {"name": "log.lacpd.level", "default": "Informational", "value": "Informational", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.lacpd.level"}, {"name": "log.layer4.level", "default": "Notice", "value": "Notice", "value_range": "Debug Informational Notice", "scf_config": "false", "full_path": "log.layer4.level"}, {"name": "log.libhal.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.libhal.level"}, {"name": "log.lind.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.lind.level"}, {"name": "log.lind.stdout", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.lind.stdout"}, {"name": "log.lldpd.level", "default": "Informational", "value": "Informational", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.lldpd.level"}, {"name": "log.lsn.comma", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.lsn.comma"}, {"name": "log.lsn.inbound", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.lsn.inbound"}, {"name": "log.lsn.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.lsn.level"}, {"name": "log.lsn.session.destination", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "log.lsn.session.destination"}, {"name": "log.lsn.session.end", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.lsn.session.end"}, {"name": "log.lsn.session.start", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.lsn.session.start"}, {"name": "log.lsnapi.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.lsnapi.level"}, {"name": "log.map.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.map.level"}, {"name": "log.mcpd.level", "default": "notice", "value": "notice", "value_range": "alert crit debug emerg err error info notice panic warn warning", "scf_config": "false", "full_path": "log.mcpd.level"}, {"name": "log.mcpd.timing", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "log.mcpd.timing"}, {"name": "log.mcpd.userregex", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "log.mcpd.userregex"}, {"name": "log.mdm.level", "default": "Notice", "value": "Notice", "value_range": "Critical Debug Error Informational Notice Trace Warning", "scf_config": "true", "full_path": "log.mdm.level"}, {"name": "log.merged.level", "default": "warning", "value": "warning", "value_range": "alert crit debug emerg err error info notice panic warn warning", "scf_config": "false", "full_path": "log.merged.level"}, {"name": "log.mgmt_acld.level", "default": "Informational", "value": "Informational", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.mgmt_acld.level"}, {"name": "log.monpd.level", "default": "Informational", "value": "Informational", "value_range": "Debug Error Informational", "scf_config": "true", "full_path": "log.monpd.level"}, {"name": "log.mr.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.mr.level"}, {"name": "log.mrsip.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.mrsip.level"}, {"name": "log.net.level", "default": "Warning", "value": "Warning", "value_range": "Critical Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.net.level"}, {"name": "log.networkaccess.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.networkaccess.level"}, {"name": "log.pccd.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.pccd.level"}, {"name": "log.pcp.level", "default": "Error", "value": "Error", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.pcp.level"}, {"name": "log.pfmand.level", "default": "Informational", "value": "Informational", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.pfmand.level"}, {"name": "log.pfmand.stdout", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.pfmand.stdout"}, {"name": "log.pkcs11d.level", "default": "Error", "value": "Error", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.pkcs11d.level"}, {"name": "log.pktclass.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.pktclass.level"}, {"name": "log.policy.level", "default": "Informational", "value": "Informational", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.policy.level"}, {"name": "log.pptp.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.pptp.level"}, {"name": "log.rba.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.rba.level"}, {"name": "log.rewrite.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.rewrite.level"}, {"name": "log.rules.level", "default": "Informational", "value": "Informational", "value_range": "Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.rules.level"}, {"name": "log.sctp.level", "default": "Warning", "value": "Warning", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.sctp.level"}, {"name": "log.sdmd.level", "default": "info", "value": "info", "value_range": "alert crit debug emerg err error info notice panic warn warning", "scf_config": "true", "full_path": "log.sdmd.level"}, {"name": "log.sdmd.stdout", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.sdmd.stdout"}, {"name": "log.sflow.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.sflow.level"}, {"name": "log.sshplugin.level", "default": "Informational", "value": "Informational", "value_range": "Debug Error Informational Warning", "scf_config": "false", "full_path": "log.sshplugin.level"}, {"name": "log.ssl.level", "default": "Warning", "value": "Warning", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.ssl.level"}, {"name": "log.sso.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.sso.level"}, {"name": "log.statsd.level", "default": "warning", "value": "warning", "value_range": "alert crit debug emerg err error info notice panic warn warning", "scf_config": "false", "full_path": "log.statsd.level"}, {"name": "log.statusd.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.statusd.level"}, {"name": "log.stpd.debugstr", "default": ".", "value": ".", "value_range": "string", "scf_config": "false", "full_path": "log.stpd.debugstr"}, {"name": "log.stpd.level", "default": "Warning", "value": "Warning", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.stpd.level"}, {"name": "log.sweeper.activation.enabled", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "log.sweeper.activation.enabled"}, {"name": "log.sweeper.evictions.interval", "default": "2", "value": "2", "value_range": "unsigned integer min:0 max:300", "scf_config": "true", "full_path": "log.sweeper.evictions.interval"}, {"name": "log.swg.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.swg.level"}, {"name": "log.tamd.level", "default": "Error", "value": "Error", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.tamd.level"}, {"name": "log.tcpdump.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.tcpdump.level"}, {"name": "log.tftp.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.tftp.level"}, {"name": "log.tma.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.tma.level"}, {"name": "log.tmm.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "false", "full_path": "log.tmm.level"}, {"name": "log.ts.level", "default": "Informational", "value": "Informational", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.ts.level"}, {"name": "log.tunnel.level", "default": "Notice", "value": "Notice", "value_range": "Debug Error Informational Notice Warning", "scf_config": "false", "full_path": "log.tunnel.level"}, {"name": "log.vcmpd.level", "default": "Informational", "value": "Informational", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.vcmpd.level"}, {"name": "log.vcmpd.stdout", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "log.vcmpd.stdout"}, {"name": "log.vdi.level", "default": "Notice", "value": "Notice", "value_range": "Critical Debug Error Informational Notice Trace Warning", "scf_config": "true", "full_path": "log.vdi.level"}, {"name": "log.vxland.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Verbose Warning", "scf_config": "false", "full_path": "log.vxland.level"}, {"name": "log.webapplications.level", "default": "Notice", "value": "Notice", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "log.webapplications.level"}, {"name": "log.webapplications.trace.sessionid", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "log.webapplications.trace.sessionid"}, {"name": "log.wr_urldb.level", "default": "Warning", "value": "Warning", "value_range": "Debug Error Informational Notice Warning", "scf_config": "true", "full_path": "log.wr_urldb.level"}, {"name": "log.zrd.level", "default": "notice", "value": "notice", "value_range": "alert crit debug emerg err error info notice panic warn warning", "scf_config": "true", "full_path": "log.zrd.level"}, {"name": "log.zxfrd.level", "default": "notice", "value": "notice", "value_range": "alert crit debug emerg err error info notice panic warn warning", "scf_config": "true", "full_path": "log.zxfrd.level"}, {"name": "logcheck.alertthres", "default": "90", "value": "90", "value_range": "integer min:0 max:100", "scf_config": "true", "full_path": "logcheck.alertthres"}, {"name": "logcheck.msgcnt", "default": "1000", "value": "1000", "value_range": "integer min:5 max:2147483647", "scf_config": "true", "full_path": "logcheck.msgcnt"}, {"name": "logcheck.warnthres", "default": "80", "value": "80", "value_range": "integer min:0 max:100", "scf_config": "true", "full_path": "logcheck.warnthres"}, {"name": "logpublisher.atomic", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "logpublisher.atomic"}, {"name": "logpublisher.logstash_rfc5424_fix", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "logpublisher.logstash_rfc5424_fix"}, {"name": "logrotate.logage", "default": "8", "value": "8", "value_range": "integer min:0 max:100", "scf_config": "true", "full_path": "logrotate.logage"}, {"name": "ltm.configtime", "default": "0", "value": "1575989093", "value_range": "integer min:0 max:2147483647", "scf_config": "false", "full_path": "ltm.configtime"}, {"name": "mapt.role", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:1", "scf_config": "true", "full_path": "mapt.role"}, {"name": "mcpd.baseconfigloaded", "default": "false", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "mcpd.baseconfigloaded"}, {"name": "mcpd.client.msgbytes.overflow.highmark", "default": "5000000", "value": "5000000", "value_range": "integer min:2000000 max:50001000", "scf_config": "true", "full_path": "mcpd.client.msgbytes.overflow.highmark"}, {"name": "mcpd.client.msgbytes.overflow.lowmark", "default": "4000000", "value": "4000000", "value_range": "integer min:2000000 max:50000000", "scf_config": "true", "full_path": "mcpd.client.msgbytes.overflow.lowmark"}, {"name": "mcpd.client.msgbytes.overflow.timeout", "default": "4800", "value": "4800", "value_range": "integer min:60 max:36000", "scf_config": "true", "full_path": "mcpd.client.msgbytes.overflow.timeout"}, {"name": "mcpd.daemon.msgbytes.overflow.highmark", "default": "25000000", "value": "25000000", "value_range": "integer min:2000000 max:100001000", "scf_config": "true", "full_path": "mcpd.daemon.msgbytes.overflow.highmark"}, {"name": "mcpd.daemon.msgbytes.overflow.lowmark", "default": "20000000", "value": "20000000", "value_range": "integer min:1000000 max:100000000", "scf_config": "true", "full_path": "mcpd.daemon.msgbytes.overflow.lowmark"}, {"name": "mcpd.daemon.msgbytes.overflow.timeout", "default": "1800", "value": "1800", "value_range": "integer min:60 max:36000", "scf_config": "true", "full_path": "mcpd.daemon.msgbytes.overflow.timeout"}, {"name": "mcpd.initialload", "default": "wide", "value": "wide", "value_range": "base high none wide", "scf_config": "false", "full_path": "mcpd.initialload"}, {"name": "mcpd.maxdbsize", "default": "512", "value": "512", "value_range": "unsigned integer min:512 max:2147483647", "scf_config": "true", "full_path": "mcpd.maxdbsize"}, {"name": "mcpd.msgcnt.overflow.highmark", "default": "1000000", "value": "1000000", "value_range": "integer min:100000 max:100001000", "scf_config": "true", "full_path": "mcpd.msgcnt.overflow.highmark"}, {"name": "mcpd.msgcnt.overflow.lowmark", "default": "900000", "value": "900000", "value_range": "integer min:100000 max:100000000", "scf_config": "true", "full_path": "mcpd.msgcnt.overflow.lowmark"}, {"name": "mcpd.msgcnt.overflow.timeout", "default": "1800", "value": "1800", "value_range": "integer min:600 max:36000", "scf_config": "true", "full_path": "mcpd.msgcnt.overflow.timeout"}, {"name": "mcpd.mvenabled", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "mcpd.mvenabled"}, {"name": "mcpd.restrictsecondary", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "mcpd.restrictsecondary"}, {"name": "mcpd.validation.fqdn", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "mcpd.validation.fqdn"}, {"name": "mcpd.vastatusinterval", "default": "3", "value": "3", "value_range": "integer min:1 max:60", "scf_config": "true", "full_path": "mcpd.vastatusinterval"}, {"name": "md.afmsampling", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:1", "scf_config": "true", "full_path": "md.afmsampling"}, {"name": "md.cleanupnontmmlookupsintervalseconds", "default": "300", "value": "300", "value_range": "unsigned integer min:30 max:100000", "scf_config": "true", "full_path": "md.cleanupnontmmlookupsintervalseconds"}, {"name": "md.cleanuprealtimedataintervalseconds", "default": "60", "value": "60", "value_range": "unsigned integer min:30 max:100000", "scf_config": "true", "full_path": "md.cleanuprealtimedataintervalseconds"}, {"name": "md.delaybeforeclusterpublish", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:60", "scf_config": "true", "full_path": "md.delaybeforeclusterpublish"}, {"name": "md.dologging", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:1048576000", "scf_config": "false", "full_path": "md.dologging"}, {"name": "md.geopath", "default": "/usr/share/GeoIP/F5GeoIP.dat", "value": "/usr/share/GeoIP/F5GeoIP.dat", "value_range": "string", "scf_config": "true", "full_path": "md.geopath"}, {"name": "md.mincspminjectionskewinterval", "default": "60", "value": "60", "value_range": "unsigned integer min:1 max:100000", "scf_config": "true", "full_path": "md.mincspminjectionskewinterval"}, {"name": "md.monitoringthreadpriority", "default": "TS,0", "value": "TS,0", "value_range": "string", "scf_config": "true", "full_path": "md.monitoringthreadpriority"}, {"name": "md.showexternalloggingdescription", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:1", "scf_config": "true", "full_path": "md.showexternalloggingdescription"}, {"name": "merged.correlateprocess.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "merged.correlateprocess.enable"}, {"name": "merged.correlateprocess.importance", "default": "999", "value": "999", "value_range": "integer min:0 max:999", "scf_config": "false", "full_path": "merged.correlateprocess.importance"}, {"name": "merged.istats.merge.interval", "default": "10", "value": "10", "value_range": "integer min:-1 max:1000", "scf_config": "false", "full_path": "merged.istats.merge.interval"}, {"name": "merged.merge", "default": "public_tables", "value": "public_tables", "value_range": "all_tables public_tables", "scf_config": "false", "full_path": "merged.merge"}, {"name": "merged.merge.interval", "default": "1", "value": "1", "value_range": "integer min:-1 max:1000", "scf_config": "false", "full_path": "merged.merge.interval"}, {"name": "merged.method", "default": "fast_merge", "value": "fast_merge", "value_range": "fast_merge slow_merge", "scf_config": "false", "full_path": "merged.method"}, {"name": "merged.nice.level", "default": "5", "value": "5", "value_range": "integer min:0 max:19", "scf_config": "false", "full_path": "merged.nice.level"}, {"name": "merged.snapshots", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "merged.snapshots"}, {"name": "mgmt.portlogging.bandwidthcap", "default": "60", "value": "60", "value_range": "unsigned integer min:1 max:800", "scf_config": "true", "full_path": "mgmt.portlogging.bandwidthcap"}, {"name": "mgmt.portlogging.listenerretry", "default": "2", "value": "2", "value_range": "unsigned integer min:1 max:600", "scf_config": "true", "full_path": "mgmt.portlogging.listenerretry"}, {"name": "mgmt.portlogging.serverretry", "default": "2", "value": "2", "value_range": "unsigned integer min:1 max:600", "scf_config": "true", "full_path": "mgmt.portlogging.serverretry"}, {"name": "mgmt.portlogging.servertimeout", "default": "30", "value": "30", "value_range": "unsigned integer min:1 max:600", "scf_config": "true", "full_path": "mgmt.portlogging.servertimeout"}, {"name": "mgmt_acld.disable_ifmap", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "mgmt_acld.disable_ifmap"}, {"name": "mgmt_acld.ucase_dom", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "mgmt_acld.ucase_dom"}, {"name": "mgmt_acld.use_debug_timeouts", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "mgmt_acld.use_debug_timeouts"}, {"name": "mode.maint", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "mode.maint"}, {"name": "mode.master", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "mode.master"}, {"name": "mysqldfailure.enabled", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "mysqldfailure.enabled"}, {"name": "mysqldfailure.haaction.primary", "default": "restart_all", "value": "restart_all", "value_range": "go_offline no_action restart restart_all", "scf_config": "true", "full_path": "mysqldfailure.haaction.primary"}, {"name": "mysqldfailure.haaction.secondary", "default": "go_offline", "value": "go_offline", "value_range": "go_offline no_action restart restart_all", "scf_config": "true", "full_path": "mysqldfailure.haaction.secondary"}, {"name": "mysqlhad.dbgfile", "default": "/var/log/mysqlhad.log", "value": "/var/log/mysqlhad.log", "value_range": "string", "scf_config": "true", "full_path": "mysqlhad.dbgfile"}, {"name": "mysqlhad.debug", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "mysqlhad.debug"}, {"name": "mysqlhad.heartbeattimeout", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:2147483646", "scf_config": "true", "full_path": "mysqlhad.heartbeattimeout"}, {"name": "mysqlhad.restartsbeforeaction", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:50", "scf_config": "true", "full_path": "mysqlhad.restartsbeforeaction"}, {"name": "named.worker.threads", "default": "1", "value": "1", "value_range": "integer min:0 max:64", "scf_config": "false", "full_path": "named.worker.threads"}, {"name": "nest.nde_alloc_factor", "default": "2", "value": "2", "value_range": "unsigned integer min:1 max:32", "scf_config": "true", "full_path": "nest.nde_alloc_factor"}, {"name": "nest.num_active_nde", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:32", "scf_config": "true", "full_path": "nest.num_active_nde"}, {"name": "nethsm.safenet.hsmip", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "nethsm.safenet.hsmip"}, {"name": "nethsm.thales.hsmip", "default": "::", "value": "::", "value_range": "string", "scf_config": "true", "full_path": "nethsm.thales.hsmip"}, {"name": "nethsm.thales.rfsip", "default": "::", "value": "::", "value_range": "IP address", "scf_config": "true", "full_path": "nethsm.thales.rfsip"}, {"name": "neuron.tmmclienttest", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "false", "full_path": "neuron.tmmclienttest"}, {"name": "neurond.debug.driver", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.driver"}, {"name": "neurond.debug.force_nsp_rsp", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.force_nsp_rsp"}, {"name": "neurond.debug.i2c", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.i2c"}, {"name": "neurond.debug.ilk", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.ilk"}, {"name": "neurond.debug.lookup", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.lookup"}, {"name": "neurond.debug.lookup_force", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.lookup_force"}, {"name": "neurond.debug.mcp", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.mcp"}, {"name": "neurond.debug.mpde", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.mpde"}, {"name": "neurond.debug.no_keepalive", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.no_keepalive"}, {"name": "neurond.debug.no_nsp_keepalive", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.no_nsp_keepalive"}, {"name": "neurond.debug.rule_add", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.rule_add"}, {"name": "neurond.debug.rule_del", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.rule_del"}, {"name": "neurond.debug.rule_move", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.rule_move"}, {"name": "neurond.debug.rule_sort", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.rule_sort"}, {"name": "neurond.debug.sanity", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.sanity"}, {"name": "neurond.debug.sanity_light", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "neurond.debug.sanity_light"}, {"name": "nsh.debuglevel", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:7", "scf_config": "true", "full_path": "nsh.debuglevel"}, {"name": "nsh.demodebug", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "nsh.demodebug"}, {"name": "nsh.egresspathid", "default": "456", "value": "456", "value_range": "unsigned integer min:0 max:16777215", "scf_config": "true", "full_path": "nsh.egresspathid"}, {"name": "nsh.egressserviceid", "default": "255", "value": "255", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "nsh.egressserviceid"}, {"name": "nsh.enable", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "nsh.enable"}, {"name": "nsh.ingresscheck", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "nsh.ingresscheck"}, {"name": "nsh.ingresspathid", "default": "123", "value": "123", "value_range": "unsigned integer min:0 max:16777215", "scf_config": "true", "full_path": "nsh.ingresspathid"}, {"name": "nsh.ingressserviceid", "default": "7", "value": "7", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "nsh.ingressserviceid"}, {"name": "nsh.nextprotocol", "default": "3", "value": "3", "value_range": "unsigned integer min:0 max:3", "scf_config": "true", "full_path": "nsh.nextprotocol"}, {"name": "nsh.vxlanport", "default": "6633", "value": "6633", "value_range": "unsigned integer min:0 max:65535", "scf_config": "true", "full_path": "nsh.vxlanport"}, {"name": "ntp.servers", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "ntp.servers"}, {"name": "ntp.timezone", "default": "America/Los_Angeles", "value": "America/Los_Angeles", "value_range": "string", "scf_config": "false", "full_path": "ntp.timezone"}, {"name": "packetfilter", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "packetfilter"}, {"name": "packetfilter.allow.arp", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "packetfilter.allow.arp"}, {"name": "packetfilter.allow.important.icmp", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "packetfilter.allow.important.icmp"}, {"name": "packetfilter.defaultaction", "default": "accept", "value": "accept", "value_range": "accept discard reject", "scf_config": "true", "full_path": "packetfilter.defaultaction"}, {"name": "packetfilter.defaultlog", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "packetfilter.defaultlog"}, {"name": "packetfilter.established", "default": "disable", "value": "disable", "value_range": "disable enable first", "scf_config": "true", "full_path": "packetfilter.established"}, {"name": "packetfilter.sendicmperrors", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "packetfilter.sendicmperrors"}, {"name": "password.dcredit", "default": "0", "value": "0", "value_range": "integer min:0 max:127", "scf_config": "false", "full_path": "password.dcredit"}, {"name": "password.lcredit", "default": "0", "value": "0", "value_range": "integer min:0 max:127", "scf_config": "false", "full_path": "password.lcredit"}, {"name": "password.maxdays", "default": "99999", "value": "99999", "value_range": "integer min:1 max:99999", "scf_config": "false", "full_path": "password.maxdays"}, {"name": "password.maxloginfailures", "default": "0", "value": "0", "value_range": "integer min:0 max:65535", "scf_config": "false", "full_path": "password.maxloginfailures"}, {"name": "password.mindays", "default": "0", "value": "0", "value_range": "integer min:0 max:255", "scf_config": "false", "full_path": "password.mindays"}, {"name": "password.minlen", "default": "6", "value": "6", "value_range": "integer min:6 max:255", "scf_config": "false", "full_path": "password.minlen"}, {"name": "password.ocredit", "default": "0", "value": "0", "value_range": "integer min:0 max:127", "scf_config": "false", "full_path": "password.ocredit"}, {"name": "password.remember", "default": "0", "value": "0", "value_range": "integer min:0 max:127", "scf_config": "false", "full_path": "password.remember"}, {"name": "password.ucredit", "default": "0", "value": "0", "value_range": "integer min:0 max:127", "scf_config": "false", "full_path": "password.ucredit"}, {"name": "password.warndays", "default": "7", "value": "7", "value_range": "integer min:1 max:255", "scf_config": "false", "full_path": "password.warndays"}, {"name": "pccd.alwaysfromscratch", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "pccd.alwaysfromscratch"}, {"name": "pccd.deploy.timeout", "default": "30", "value": "30", "value_range": "unsigned integer min:20 max:4294967295", "scf_config": "true", "full_path": "pccd.deploy.timeout"}, {"name": "pccd.extramb", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "pccd.extramb"}, {"name": "pccd.form.********ip", "default": "ipt", "value": "ipt", "value_range": "ipt", "scf_config": "true", "full_path": "pccd.form.********ip"}, {"name": "pccd.form.global", "default": "afc", "value": "afc", "value_range": "afc slc", "scf_config": "true", "full_path": "pccd.form.global"}, {"name": "pccd.form.iapp", "default": "afc", "value": "afc", "value_range": "afc slc", "scf_config": "true", "full_path": "pccd.form.iapp"}, {"name": "pccd.form.rtdom", "default": "afc", "value": "afc", "value_range": "afc slc", "scf_config": "true", "full_path": "pccd.form.rtdom"}, {"name": "pccd.form.selfip", "default": "afc", "value": "afc", "value_range": "afc slc", "scf_config": "true", "full_path": "pccd.form.selfip"}, {"name": "pccd.form.virtual", "default": "afc", "value": "afc", "value_range": "afc slc", "scf_config": "true", "full_path": "pccd.form.virtual"}, {"name": "pccd.hash.load.factor", "default": "25", "value": "25", "value_range": "unsigned integer min:0 max:75", "scf_config": "true", "full_path": "pccd.hash.load.factor"}, {"name": "pccd.maxblobsize", "default": "1024", "value": "1024", "value_range": "unsigned integer min:512 max:65536", "scf_config": "true", "full_path": "pccd.maxblobsize"}, {"name": "pccd.overlap.check", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "pccd.overlap.check"}, {"name": "pccd.perpolicycompilation", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "pccd.perpolicycompilation"}, {"name": "pccd.retry.count", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "pccd.retry.count"}, {"name": "pccd.rule.debug", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "pccd.rule.debug"}, {"name": "pccd.status", "default": "quiescent", "value": "quiescent", "value_range": "being-compiled being-deployed failed-compilation failed-deployment pccd-failed pending-compilation pending-deployment quiescent", "scf_config": "false", "full_path": "pccd.status"}, {"name": "pem.sessiondb.stats.max.entries", "default": "100000", "value": "100000", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "true", "full_path": "pem.sessiondb.stats.max.entries"}, {"name": "persist.destaddrcarpipport", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "persist.destaddrcarpipport"}, {"name": "persist.destaddrlimitmode", "default": "timeout", "value": "timeout", "value_range": "maxcount timeout", "scf_config": "false", "full_path": "persist.destaddrlimitmode"}, {"name": "persist.destaddrmaxcount", "default": "2048", "value": "2048", "value_range": "unsigned integer min:0 max:2147483647", "scf_config": "false", "full_path": "persist.destaddrmaxcount"}, {"name": "persist.srcaddrcarpipport", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "persist.srcaddrcarpipport"}, {"name": "persist.wellknownproxyclass", "default": "/Common/aol", "value": "/Common/aol", "value_range": "string", "scf_config": "false", "full_path": "persist.wellknownproxyclass"}, {"name": "pfmand.healthstatus", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "pfmand.healthstatus"}, {"name": "pfmand.healthstatus.deviceerror.ceiling", "default": "15", "value": "15", "value_range": "unsigned integer min:0 max:30", "scf_config": "false", "full_path": "pfmand.healthstatus.deviceerror.ceiling"}, {"name": "pfmand.healthstatus.guesterror.ceiling", "default": "20", "value": "20", "value_range": "unsigned integer min:0 max:30", "scf_config": "false", "full_path": "pfmand.healthstatus.guesterror.ceiling"}, {"name": "platform.chassis.lcd", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "platform.chassis.lcd"}, {"name": "platform.chassis.slot", "default": "0", "value": "0", "value_range": "integer min:0 max:8", "scf_config": "false", "full_path": "platform.chassis.slot"}, {"name": "platform.cpu.fanspeed.threshold", "default": "0", "value": "3000", "value_range": "Integer", "scf_config": "false", "full_path": "platform.cpu.fanspeed.threshold"}, {"name": "platform.cpu.temperature.threshold", "default": "0", "value": "75", "value_range": "Integer", "scf_config": "false", "full_path": "platform.cpu.temperature.threshold"}, {"name": "platform.disklatency.enabled", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "platform.disklatency.enabled"}, {"name": "platform.disklatency.loginterval", "default": "60", "value": "60", "value_range": "integer min:0 max:3600", "scf_config": "true", "full_path": "platform.disklatency.loginterval"}, {"name": "platform.disklatency.readinterval", "default": "1", "value": "1", "value_range": "integer min:1 max:60", "scf_config": "true", "full_path": "platform.disklatency.readinterval"}, {"name": "platform.disklatency.readsize", "default": "512", "value": "512", "value_range": "integer min:512 max:8192", "scf_config": "true", "full_path": "platform.disklatency.readsize"}, {"name": "platform.disklatency.vcmpreadinterval", "default": "60", "value": "60", "value_range": "integer min:1 max:60", "scf_config": "true", "full_path": "platform.disklatency.vcmpreadinterval"}, {"name": "platform.diskmonitor.freelast._root_", "default": "0", "value": "33", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast._root_"}, {"name": "platform.diskmonitor.freelast.appdata", "default": "0", "value": "99", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.appdata"}, {"name": "platform.diskmonitor.freelast.config", "default": "0", "value": "97", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.config"}, {"name": "platform.diskmonitor.freelast.dev_shm", "default": "0", "value": "99", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.dev_shm"}, {"name": "platform.diskmonitor.freelast.shared", "default": "0", "value": "73", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.shared"}, {"name": "platform.diskmonitor.freelast.shared_rrd.1.2", "default": "0", "value": "100", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.shared_rrd.1.2"}, {"name": "platform.diskmonitor.freelast.usr", "default": "0", "value": "20", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.usr"}, {"name": "platform.diskmonitor.freelast.var", "default": "0", "value": "76", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.var"}, {"name": "platform.diskmonitor.freelast.var_log", "default": "0", "value": "96", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.var_log"}, {"name": "platform.diskmonitor.freelast.var_loipc", "default": "0", "value": "100", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.var_loipc"}, {"name": "platform.diskmonitor.freelast.var_prompt", "default": "0", "value": "99", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.var_prompt"}, {"name": "platform.diskmonitor.freelast.var_run", "default": "0", "value": "99", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.var_run"}, {"name": "platform.diskmonitor.freelast.var_tmstat", "default": "0", "value": "99", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.var_tmstat"}, {"name": "platform.diskmonitor.freelast.vmdisk", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.freelast.vmdisk"}, {"name": "platform.diskmonitor.growthalert._root_", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert._root_"}, {"name": "platform.diskmonitor.growthalert.appdata", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.appdata"}, {"name": "platform.diskmonitor.growthalert.config", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.config"}, {"name": "platform.diskmonitor.growthalert.dev_shm", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.dev_shm"}, {"name": "platform.diskmonitor.growthalert.shared", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.shared"}, {"name": "platform.diskmonitor.growthalert.shared_rrd.1.2", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.shared_rrd.1.2"}, {"name": "platform.diskmonitor.growthalert.usr", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.usr"}, {"name": "platform.diskmonitor.growthalert.var", "default": "3", "value": "3", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.var"}, {"name": "platform.diskmonitor.growthalert.var_log", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.var_log"}, {"name": "platform.diskmonitor.growthalert.var_loipc", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.var_loipc"}, {"name": "platform.diskmonitor.growthalert.var_prompt", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.var_prompt"}, {"name": "platform.diskmonitor.growthalert.var_run", "default": "25", "value": "25", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.var_run"}, {"name": "platform.diskmonitor.growthalert.var_tmstat", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.var_tmstat"}, {"name": "platform.diskmonitor.growthalert.vmdisk", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.growthalert.vmdisk"}, {"name": "platform.diskmonitor.interval", "default": "10", "value": "10", "value_range": "integer min:1 max:1440", "scf_config": "true", "full_path": "platform.diskmonitor.interval"}, {"name": "platform.diskmonitor.limitalert._root_", "default": "3", "value": "3", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert._root_"}, {"name": "platform.diskmonitor.limitalert.appdata", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.appdata"}, {"name": "platform.diskmonitor.limitalert.config", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.config"}, {"name": "platform.diskmonitor.limitalert.dev_shm", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.dev_shm"}, {"name": "platform.diskmonitor.limitalert.shared", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.shared"}, {"name": "platform.diskmonitor.limitalert.shared_rrd.1.2", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.shared_rrd.1.2"}, {"name": "platform.diskmonitor.limitalert.usr", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.usr"}, {"name": "platform.diskmonitor.limitalert.var", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.var"}, {"name": "platform.diskmonitor.limitalert.var_log", "default": "10", "value": "10", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.var_log"}, {"name": "platform.diskmonitor.limitalert.var_loipc", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.var_loipc"}, {"name": "platform.diskmonitor.limitalert.var_prompt", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.var_prompt"}, {"name": "platform.diskmonitor.limitalert.var_run", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.var_run"}, {"name": "platform.diskmonitor.limitalert.var_tmstat", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.var_tmstat"}, {"name": "platform.diskmonitor.limitalert.vmdisk", "default": "25", "value": "25", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitalert.vmdisk"}, {"name": "platform.diskmonitor.limitwarn._root_", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn._root_"}, {"name": "platform.diskmonitor.limitwarn.appdata", "default": "30", "value": "30", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.appdata"}, {"name": "platform.diskmonitor.limitwarn.config", "default": "30", "value": "30", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.config"}, {"name": "platform.diskmonitor.limitwarn.dev_shm", "default": "30", "value": "30", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.dev_shm"}, {"name": "platform.diskmonitor.limitwarn.shared", "default": "30", "value": "30", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.shared"}, {"name": "platform.diskmonitor.limitwarn.shared_rrd.1.2", "default": "30", "value": "30", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.shared_rrd.1.2"}, {"name": "platform.diskmonitor.limitwarn.usr", "default": "30", "value": "30", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.usr"}, {"name": "platform.diskmonitor.limitwarn.var", "default": "40", "value": "40", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.var"}, {"name": "platform.diskmonitor.limitwarn.var_log", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.var_log"}, {"name": "platform.diskmonitor.limitwarn.var_loipc", "default": "30", "value": "30", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.var_loipc"}, {"name": "platform.diskmonitor.limitwarn.var_prompt", "default": "30", "value": "30", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.var_prompt"}, {"name": "platform.diskmonitor.limitwarn.var_run", "default": "30", "value": "30", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.var_run"}, {"name": "platform.diskmonitor.limitwarn.var_tmstat", "default": "30", "value": "30", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.var_tmstat"}, {"name": "platform.diskmonitor.limitwarn.vmdisk", "default": "40", "value": "40", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "platform.diskmonitor.limitwarn.vmdisk"}, {"name": "platform.diskmonitor.monitor._root_", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor._root_"}, {"name": "platform.diskmonitor.monitor.appdata", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.appdata"}, {"name": "platform.diskmonitor.monitor.config", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.config"}, {"name": "platform.diskmonitor.monitor.dev_shm", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.dev_shm"}, {"name": "platform.diskmonitor.monitor.shared", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.shared"}, {"name": "platform.diskmonitor.monitor.shared_rrd.1.2", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.shared_rrd.1.2"}, {"name": "platform.diskmonitor.monitor.usr", "default": "limit", "value": "growth", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.usr"}, {"name": "platform.diskmonitor.monitor.var", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.var"}, {"name": "platform.diskmonitor.monitor.var_log", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.var_log"}, {"name": "platform.diskmonitor.monitor.var_loipc", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.var_loipc"}, {"name": "platform.diskmonitor.monitor.var_prompt", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.var_prompt"}, {"name": "platform.diskmonitor.monitor.var_run", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.var_run"}, {"name": "platform.diskmonitor.monitor.var_tmstat", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.var_tmstat"}, {"name": "platform.diskmonitor.monitor.vmdisk", "default": "limit", "value": "limit", "value_range": "change growth limit none", "scf_config": "false", "full_path": "platform.diskmonitor.monitor.vmdisk"}, {"name": "platform.diskmonitor.state", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "platform.diskmonitor.state"}, {"name": "platform.diskmonitor.time", "default": "0", "value": "0", "value_range": "integer min:0 max:4294967295", "scf_config": "false", "full_path": "platform.diskmonitor.time"}, {"name": "platform.diskmonitor.time._root_", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time._root_"}, {"name": "platform.diskmonitor.time.appdata", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.appdata"}, {"name": "platform.diskmonitor.time.config", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.config"}, {"name": "platform.diskmonitor.time.dev_shm", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.dev_shm"}, {"name": "platform.diskmonitor.time.shared", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.shared"}, {"name": "platform.diskmonitor.time.shared_rrd.1.2", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.shared_rrd.1.2"}, {"name": "platform.diskmonitor.time.usr", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.usr"}, {"name": "platform.diskmonitor.time.var", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.var"}, {"name": "platform.diskmonitor.time.var_log", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.var_log"}, {"name": "platform.diskmonitor.time.var_loipc", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.var_loipc"}, {"name": "platform.diskmonitor.time.var_prompt", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.var_prompt"}, {"name": "platform.diskmonitor.time.var_run", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.var_run"}, {"name": "platform.diskmonitor.time.var_tmstat", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.var_tmstat"}, {"name": "platform.diskmonitor.time.vmdisk", "default": "0", "value": "0", "value_range": "integer", "scf_config": "false", "full_path": "platform.diskmonitor.time.vmdisk"}, {"name": "platform.fantray.speedcontrol", "default": "auto", "value": "auto", "value_range": "auto manual", "scf_config": "true", "full_path": "platform.fantray.speedcontrol"}, {"name": "platform.powersupplymonitor", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "platform.powersupplymonitor"}, {"name": "provision.1nic", "default": "disable", "value": "enable", "value_range": "disable enable forced_disable forced_enable", "scf_config": "true", "full_path": "provision.1nic"}, {"name": "provision.1nicautoconfig", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "provision.1nicautoconfig"}, {"name": "provision.action", "default": "none", "value": "none", "value_range": "diskmgmt none reboot", "scf_config": "false", "full_path": "provision.action"}, {"name": "provision.cpu.afm", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.afm"}, {"name": "provision.cpu.am", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.am"}, {"name": "provision.cpu.apm", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.apm"}, {"name": "provision.cpu.asm", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.asm"}, {"name": "provision.cpu.avr", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.avr"}, {"name": "provision.cpu.dos", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.dos"}, {"name": "provision.cpu.em", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.em"}, {"name": "provision.cpu.fps", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.fps"}, {"name": "provision.cpu.gtm", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.gtm"}, {"name": "provision.cpu.host", "default": "0", "value": "10", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.host"}, {"name": "provision.cpu.ilx", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.ilx"}, {"name": "provision.cpu.lc", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.lc"}, {"name": "provision.cpu.ltm", "default": "0", "value": "1", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.ltm"}, {"name": "provision.cpu.pem", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.pem"}, {"name": "provision.cpu.swg", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.swg"}, {"name": "provision.cpu.tam", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.tam"}, {"name": "provision.cpu.tmos", "default": "10", "value": "89", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.tmos"}, {"name": "provision.cpu.urldb", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.urldb"}, {"name": "provision.cpu.vcmp", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provision.cpu.vcmp"}, {"name": "provision.disk.afm", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.afm"}, {"name": "provision.disk.am", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.am"}, {"name": "provision.disk.apm", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.apm"}, {"name": "provision.disk.asm", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.asm"}, {"name": "provision.disk.avr", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.avr"}, {"name": "provision.disk.dos", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.dos"}, {"name": "provision.disk.em", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.em"}, {"name": "provision.disk.fps", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.fps"}, {"name": "provision.disk.gtm", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.gtm"}, {"name": "provision.disk.host", "default": "0", "value": "65261", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.host"}, {"name": "provision.disk.ilx", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.ilx"}, {"name": "provision.disk.lc", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.lc"}, {"name": "provision.disk.ltm", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.ltm"}, {"name": "provision.disk.pem", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.pem"}, {"name": "provision.disk.swg", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.swg"}, {"name": "provision.disk.tam", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.tam"}, {"name": "provision.disk.tmos", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.tmos"}, {"name": "provision.disk.urldb", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.urldb"}, {"name": "provision.disk.vcmp", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provision.disk.vcmp"}, {"name": "provision.enforce", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "provision.enforce"}, {"name": "provision.extramb", "default": "0", "value": "0", "value_range": "integer min:0 max:8192", "scf_config": "true", "full_path": "provision.extramb"}, {"name": "provision.initialized", "default": "false", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "provision.initialized"}, {"name": "provision.managementeth", "default": "eth0", "value": "eth0", "value_range": "string", "scf_config": "true", "full_path": "provision.managementeth"}, {"name": "provision.memory.afm", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.afm"}, {"name": "provision.memory.afm.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.afm.host"}, {"name": "provision.memory.am", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.am"}, {"name": "provision.memory.am.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.am.host"}, {"name": "provision.memory.apm", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.apm"}, {"name": "provision.memory.apm.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.apm.host"}, {"name": "provision.memory.asm", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.asm"}, {"name": "provision.memory.asm.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.asm.host"}, {"name": "provision.memory.avr", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.avr"}, {"name": "provision.memory.avr.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.avr.host"}, {"name": "provision.memory.dos", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.dos"}, {"name": "provision.memory.dos.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.dos.host"}, {"name": "provision.memory.em", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.em"}, {"name": "provision.memory.em.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.em.host"}, {"name": "provision.memory.fps", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.fps"}, {"name": "provision.memory.fps.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.fps.host"}, {"name": "provision.memory.gtm", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.gtm"}, {"name": "provision.memory.gtm.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.gtm.host"}, {"name": "provision.memory.host", "default": "0", "value": "1676", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.host"}, {"name": "provision.memory.ilx", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.ilx"}, {"name": "provision.memory.ilx.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.ilx.host"}, {"name": "provision.memory.lc", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.lc"}, {"name": "provision.memory.lc.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.lc.host"}, {"name": "provision.memory.ltm", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.ltm"}, {"name": "provision.memory.ltm.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.ltm.host"}, {"name": "provision.memory.pem", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.pem"}, {"name": "provision.memory.pem.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.pem.host"}, {"name": "provision.memory.swg", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.swg"}, {"name": "provision.memory.swg.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.swg.host"}, {"name": "provision.memory.tam", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.tam"}, {"name": "provision.memory.tam.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.tam.host"}, {"name": "provision.memory.tmos", "default": "0", "value": "326", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.tmos"}, {"name": "provision.memory.tmos.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.tmos.host"}, {"name": "provision.memory.ui", "default": "0", "value": "80", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.ui"}, {"name": "provision.memory.urldb", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.urldb"}, {"name": "provision.memory.urldb.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.urldb.host"}, {"name": "provision.memory.vcmp", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.vcmp"}, {"name": "provision.memory.vcmp.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provision.memory.vcmp.host"}, {"name": "provision.noautoreboot", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "provision.noautoreboot"}, {"name": "provision.pending", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "provision.pending"}, {"name": "provision.tmmcount", "default": "0", "value": "0", "value_range": "integer min:0 max:1024", "scf_config": "false", "full_path": "provision.tmmcount"}, {"name": "provision.tmmcountactual", "default": "0", "value": "1", "value_range": "integer min:0 max:1024", "scf_config": "false", "full_path": "provision.tmmcountactual"}, {"name": "provision.tomcat.extramb", "default": "0", "value": "0", "value_range": "integer min:0 max:1024", "scf_config": "true", "full_path": "provision.tomcat.extramb"}, {"name": "provision.wocplugincount", "default": "1", "value": "1", "value_range": "integer min:0 max:8", "scf_config": "false", "full_path": "provision.wocplugincount"}, {"name": "provisioned.cpu.afm", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.afm"}, {"name": "provisioned.cpu.am", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.am"}, {"name": "provisioned.cpu.apm", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.apm"}, {"name": "provisioned.cpu.asm", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.asm"}, {"name": "provisioned.cpu.avr", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.avr"}, {"name": "provisioned.cpu.dos", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.dos"}, {"name": "provisioned.cpu.em", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.em"}, {"name": "provisioned.cpu.fps", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.fps"}, {"name": "provisioned.cpu.gtm", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.gtm"}, {"name": "provisioned.cpu.host", "default": "0", "value": "10", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.host"}, {"name": "provisioned.cpu.ilx", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.ilx"}, {"name": "provisioned.cpu.lc", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.lc"}, {"name": "provisioned.cpu.ltm", "default": "0", "value": "1", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.ltm"}, {"name": "provisioned.cpu.pem", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.pem"}, {"name": "provisioned.cpu.swg", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.swg"}, {"name": "provisioned.cpu.tam", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.tam"}, {"name": "provisioned.cpu.tmos", "default": "10", "value": "89", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.tmos"}, {"name": "provisioned.cpu.urldb", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.urldb"}, {"name": "provisioned.cpu.vcmp", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "provisioned.cpu.vcmp"}, {"name": "provisioned.disk.afm", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.afm"}, {"name": "provisioned.disk.am", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.am"}, {"name": "provisioned.disk.apm", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.apm"}, {"name": "provisioned.disk.asm", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.asm"}, {"name": "provisioned.disk.avr", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.avr"}, {"name": "provisioned.disk.dos", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.dos"}, {"name": "provisioned.disk.em", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.em"}, {"name": "provisioned.disk.fps", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.fps"}, {"name": "provisioned.disk.gtm", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.gtm"}, {"name": "provisioned.disk.host", "default": "0", "value": "65261", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.host"}, {"name": "provisioned.disk.ilx", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.ilx"}, {"name": "provisioned.disk.lc", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.lc"}, {"name": "provisioned.disk.ltm", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.ltm"}, {"name": "provisioned.disk.pem", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.pem"}, {"name": "provisioned.disk.swg", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.swg"}, {"name": "provisioned.disk.tam", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.tam"}, {"name": "provisioned.disk.tmos", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.tmos"}, {"name": "provisioned.disk.urldb", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.urldb"}, {"name": "provisioned.disk.vcmp", "default": "0", "value": "0", "value_range": "integer min:0 max:2000000", "scf_config": "false", "full_path": "provisioned.disk.vcmp"}, {"name": "provisioned.memory.afm", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.afm"}, {"name": "provisioned.memory.afm.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.afm.host"}, {"name": "provisioned.memory.am", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.am"}, {"name": "provisioned.memory.am.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.am.host"}, {"name": "provisioned.memory.apm", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.apm"}, {"name": "provisioned.memory.apm.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.apm.host"}, {"name": "provisioned.memory.asm", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.asm"}, {"name": "provisioned.memory.asm.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.asm.host"}, {"name": "provisioned.memory.avr", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.avr"}, {"name": "provisioned.memory.avr.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.avr.host"}, {"name": "provisioned.memory.dos", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.dos"}, {"name": "provisioned.memory.dos.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.dos.host"}, {"name": "provisioned.memory.em", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.em"}, {"name": "provisioned.memory.em.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.em.host"}, {"name": "provisioned.memory.fps", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.fps"}, {"name": "provisioned.memory.fps.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.fps.host"}, {"name": "provisioned.memory.gtm", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.gtm"}, {"name": "provisioned.memory.gtm.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.gtm.host"}, {"name": "provisioned.memory.host", "default": "0", "value": "1676", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.host"}, {"name": "provisioned.memory.ilx", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.ilx"}, {"name": "provisioned.memory.ilx.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.ilx.host"}, {"name": "provisioned.memory.lc", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.lc"}, {"name": "provisioned.memory.lc.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.lc.host"}, {"name": "provisioned.memory.ltm", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.ltm"}, {"name": "provisioned.memory.ltm.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.ltm.host"}, {"name": "provisioned.memory.pem", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.pem"}, {"name": "provisioned.memory.pem.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.pem.host"}, {"name": "provisioned.memory.swg", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.swg"}, {"name": "provisioned.memory.swg.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.swg.host"}, {"name": "provisioned.memory.tam", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.tam"}, {"name": "provisioned.memory.tam.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.tam.host"}, {"name": "provisioned.memory.tmos", "default": "0", "value": "326", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.tmos"}, {"name": "provisioned.memory.tmos.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.tmos.host"}, {"name": "provisioned.memory.ui", "default": "0", "value": "80", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.ui"}, {"name": "provisioned.memory.urldb", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.urldb"}, {"name": "provisioned.memory.urldb.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.urldb.host"}, {"name": "provisioned.memory.vcmp", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.vcmp"}, {"name": "provisioned.memory.vcmp.host", "default": "0", "value": "0", "value_range": "integer min:0 max:1000000", "scf_config": "false", "full_path": "provisioned.memory.vcmp.host"}, {"name": "proxy.host", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "proxy.host"}, {"name": "proxy.password", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "proxy.password"}, {"name": "proxy.port", "default": "8080", "value": "8080", "value_range": "integer min:1 max:65535", "scf_config": "false", "full_path": "proxy.port"}, {"name": "proxy.protocol", "default": "http", "value": "http", "value_range": "http https", "scf_config": "false", "full_path": "proxy.protocol"}, {"name": "proxy.username", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "proxy.username"}, {"name": "pva.acceleration", "default": "full", "value": "full", "value_range": "assist dedicated full none", "scf_config": "true", "full_path": "pva.acceleration"}, {"name": "pva.evictunknownflow", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:2", "scf_config": "true", "full_path": "pva.evictunknownflow"}, {"name": "pva.fix.lowlatency", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "pva.fix.lowlatency"}, {"name": "pva.fwdaccel", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "pva.fwdaccel"}, {"name": "pva.offload.uniflow", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "pva.offload.uniflow"}, {"name": "pva.standby.flush", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:1", "scf_config": "true", "full_path": "pva.standby.flush"}, {"name": "pva.udpest.clientpkts.threshold", "default": "2", "value": "2", "value_range": "unsigned integer min:1 max:8", "scf_config": "true", "full_path": "pva.udpest.clientpkts.threshold"}, {"name": "pva.udpest.serverpkts.threshold", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:8", "scf_config": "true", "full_path": "pva.udpest.serverpkts.threshold"}, {"name": "pva.validatetcpseqinicmp", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "pva.validatetcpseqinicmp"}, {"name": "pvamsgrawdump.samples.reset", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:100", "scf_config": "false", "full_path": "pvamsgrawdump.samples.reset"}, {"name": "pvasyncookies.enabled", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "pvasyncookies.enabled"}, {"name": "pvasyncookies.secretupdate.interval", "default": "4", "value": "4", "value_range": "unsigned integer min:2 max:16", "scf_config": "true", "full_path": "pvasyncookies.secretupdate.interval"}, {"name": "pvasyncookies.virtual.connthresholdhigh", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:7", "scf_config": "true", "full_path": "pvasyncookies.virtual.connthresholdhigh"}, {"name": "pvasyncookies.virtual.invalidthreshold", "default": "4", "value": "4", "value_range": "unsigned integer min:0 max:7", "scf_config": "true", "full_path": "pvasyncookies.virtual.invalidthreshold"}, {"name": "pvasyncookies.virtual.maxsyncache", "default": "2999", "value": "2999", "value_range": "unsigned integer min:193 max:65535", "scf_config": "true", "full_path": "pvasyncookies.virtual.maxsyncache"}, {"name": "qat.deflate.buffer_size", "default": "medium", "value": "medium", "value_range": "large medium", "scf_config": "true", "full_path": "qat.deflate.buffer_size"}, {"name": "qinq.cos", "default": "outer", "value": "outer", "value_range": "inner outer", "scf_config": "true", "full_path": "qinq.cos"}, {"name": "quickassist.compression.buffertype", "default": "medium", "value": "medium", "value_range": "autoselectbest large medium", "scf_config": "true", "full_path": "quickassist.compression.buffertype"}, {"name": "quickassist.crypto.pollperiod", "default": "60", "value": "60", "value_range": "unsigned integer min:10 max:100000", "scf_config": "true", "full_path": "quickassist.crypto.pollperiod"}, {"name": "ramcache.gzipconsolidate", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "ramcache.gzipconsolidate"}, {"name": "ramcache.interstripecachememorypercent", "default": "25", "value": "25", "value_range": "integer min:0 max:100", "scf_config": "true", "full_path": "ramcache.interstripecachememorypercent"}, {"name": "ramcache.maxmemorypercent", "default": "50", "value": "50", "value_range": "integer min:1 max:99", "scf_config": "true", "full_path": "ramcache.maxmemorypercent"}, {"name": "rateshaper.cmpdivide", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "rateshaper.cmpdivide"}, {"name": "rateshaper.logratelimit", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:2147483647", "scf_config": "true", "full_path": "rateshaper.logratelimit"}, {"name": "restjavad.useextramb", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "restjavad.useextramb"}, {"name": "route.metrics.maxentries", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:2147483647", "scf_config": "true", "full_path": "route.metrics.maxentries"}, {"name": "route.metrics.mtu", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "route.metrics.mtu"}, {"name": "route.metrics.timeout", "default": "600", "value": "600", "value_range": "unsigned integer min:0 max:2147483647", "scf_config": "true", "full_path": "route.metrics.timeout"}, {"name": "rule.validation", "default": "strict", "value": "strict", "value_range": "config none strict syntax", "scf_config": "true", "full_path": "rule.validation"}, {"name": "saspd.gwmdowndelay", "default": "30", "value": "30", "value_range": "integer min:-1 max:86401", "scf_config": "true", "full_path": "saspd.gwmdowndelay"}, {"name": "saspd.loglevel", "default": "error", "value": "error", "value_range": "debug debug_msg deep_debug error info none", "scf_config": "false", "full_path": "saspd.loglevel"}, {"name": "scheduler.dynamicsleepduration.ltm", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "scheduler.dynamicsleepduration.ltm"}, {"name": "scheduler.enableschedpause.ltm", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "scheduler.enableschedpause.ltm"}, {"name": "scheduler.hsbasleeprxlimit.ltm", "default": "256", "value": "256", "value_range": "integer min:0 max:1024", "scf_config": "false", "full_path": "scheduler.hsbasleeprxlimit.ltm"}, {"name": "scheduler.hsbawakerxlimit.ltm", "default": "256", "value": "256", "value_range": "integer min:0 max:1024", "scf_config": "false", "full_path": "scheduler.hsbawakerxlimit.ltm"}, {"name": "scheduler.hsblowlatencyborder.ltm", "default": "20", "value": "20", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "scheduler.hsblowlatencyborder.ltm"}, {"name": "scheduler.hsbpollmode.ltm", "default": "always", "value": "always", "value_range": "always never when_awake", "scf_config": "true", "full_path": "scheduler.hsbpollmode.ltm"}, {"name": "scheduler.hsbtimeout.ltm", "default": "250", "value": "250", "value_range": "integer min:0 max:1000", "scf_config": "false", "full_path": "scheduler.hsbtimeout.ltm"}, {"name": "scheduler.idleenforcercue.ltm", "default": "-1", "value": "-1", "value_range": "integer min:-1 max:100", "scf_config": "false", "full_path": "scheduler.idleenforcercue.ltm"}, {"name": "scheduler.idleenforcerhaltus.ltm", "default": "-1", "value": "-1", "value_range": "integer min:-1 max:1000000", "scf_config": "false", "full_path": "scheduler.idleenforcerhaltus.ltm"}, {"name": "scheduler.idleenforcerv1pluginminactive.ltm", "default": "1", "value": "1", "value_range": "integer min:1 max:1000", "scf_config": "false", "full_path": "scheduler.idleenforcerv1pluginminactive.ltm"}, {"name": "scheduler.idleenforcerv1pluginmininactive.ltm", "default": "5", "value": "5", "value_range": "integer min:1 max:1000", "scf_config": "false", "full_path": "scheduler.idleenforcerv1pluginmininactive.ltm"}, {"name": "scheduler.idleenforceryieldus.ltm", "default": "-1", "value": "-1", "value_range": "integer min:-1 max:1000000", "scf_config": "false", "full_path": "scheduler.idleenforceryieldus.ltm"}, {"name": "scheduler.idlesampleperiod.ltm", "default": "100", "value": "100", "value_range": "unsigned integer min:0 max:1000", "scf_config": "false", "full_path": "scheduler.idlesampleperiod.ltm"}, {"name": "scheduler.ixlv.contigidlecnt", "default": "256", "value": "256", "value_range": "unsigned integer min:0 max:4096", "scf_config": "false", "full_path": "scheduler.ixlv.contigidlecnt"}, {"name": "scheduler.maxsleepduration.ltm", "default": "-1", "value": "-1", "value_range": "integer min:-1 max:10000000", "scf_config": "false", "full_path": "scheduler.maxsleepduration.ltm"}, {"name": "scheduler.minsleepduration.ltm", "default": "-1", "value": "-1", "value_range": "integer min:-1 max:10000000", "scf_config": "false", "full_path": "scheduler.minsleepduration.ltm"}, {"name": "scheduler.resetstatsfrequency.ltm", "default": "-1", "value": "-1", "value_range": "integer min:-1 max:86400", "scf_config": "false", "full_path": "scheduler.resetstatsfrequency.ltm"}, {"name": "scheduler.rtcfrequency.ltm", "default": "-1", "value": "-1", "value_range": "integer min:-1 max:8192", "scf_config": "false", "full_path": "scheduler.rtcfrequency.ltm"}, {"name": "scheduler.sock.checksummtuthreshold", "default": "65536", "value": "65536", "value_range": "integer min:0 max:65536", "scf_config": "false", "full_path": "scheduler.sock.checksummtuthreshold"}, {"name": "scheduler.sock.framesize", "default": "2048", "value": "2048", "value_range": "integer min:64 max:65536", "scf_config": "false", "full_path": "scheduler.sock.framesize"}, {"name": "scheduler.sock.maxpacketsperpoll", "default": "128", "value": "128", "value_range": "integer min:1 max:512", "scf_config": "false", "full_path": "scheduler.sock.maxpacketsperpoll"}, {"name": "scheduler.sock.minloloadsamples", "default": "40", "value": "40", "value_range": "integer min:1 max:100", "scf_config": "false", "full_path": "scheduler.sock.minloloadsamples"}, {"name": "scheduler.sock.polldelayus", "default": "100", "value": "100", "value_range": "integer min:0 max:1000", "scf_config": "false", "full_path": "scheduler.sock.polldelayus"}, {"name": "scheduler.sock.sincpu", "default": "2", "value": "2", "value_range": "integer min:0 max:8", "scf_config": "false", "full_path": "scheduler.sock.sincpu"}, {"name": "scheduler.sock.sisamplingintervalms", "default": "250", "value": "250", "value_range": "integer min:0 max:10000", "scf_config": "false", "full_path": "scheduler.sock.sisamplingintervalms"}, {"name": "scheduler.sock.socketbufsizekb", "default": "0", "value": "0", "value_range": "integer min:0 max:65536", "scf_config": "false", "full_path": "scheduler.sock.socketbufsizekb"}, {"name": "scheduler.sock.socketringsizekb", "default": "4096", "value": "4096", "value_range": "integer min:0 max:65536", "scf_config": "false", "full_path": "scheduler.sock.socketringsizekb"}, {"name": "scheduler.sock.tmmaffinitysettingdynamic", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "scheduler.sock.tmmaffinitysettingdynamic"}, {"name": "scheduler.sock.tmmringsizekb", "default": "0", "value": "0", "value_range": "integer min:0 max:65536", "scf_config": "false", "full_path": "scheduler.sock.tmmringsizekb"}, {"name": "scheduler.sock.tmmsaturationcue", "default": "98", "value": "98", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "scheduler.sock.tmmsaturationcue"}, {"name": "scheduler.sock.tmmsithresholdpcnt", "default": "30", "value": "30", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "scheduler.sock.tmmsithresholdpcnt"}, {"name": "scheduler.sock.totalsithresholdpcnt", "default": "125", "value": "125", "value_range": "integer min:0 max:200", "scf_config": "false", "full_path": "scheduler.sock.totalsithresholdpcnt"}, {"name": "scheduler.sock.workersithresholdpcnt", "default": "70", "value": "70", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "scheduler.sock.workersithresholdpcnt"}, {"name": "scheduler.splitplanes.asmopt", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "scheduler.splitplanes.asmopt"}, {"name": "scheduler.splitplanes.ltm", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "scheduler.splitplanes.ltm"}, {"name": "scheduler.unicasleeprxlimit.ltm", "default": "256", "value": "256", "value_range": "integer min:0 max:1024", "scf_config": "false", "full_path": "scheduler.unicasleeprxlimit.ltm"}, {"name": "scheduler.uniclowlatencyborder.ltm", "default": "10", "value": "10", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "scheduler.uniclowlatencyborder.ltm"}, {"name": "scheduler.usertc.ltm", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "scheduler.usertc.ltm"}, {"name": "scrubber.counthwdrop", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "scrubber.counthwdrop"}, {"name": "security.cabundledownload", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "security.cabundledownload"}, {"name": "security.commoncriteria", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "security.commoncriteria"}, {"name": "security.configexport", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "security.configexport"}, {"name": "security.configpassword", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "false", "full_path": "security.configpassword"}, {"name": "security.fips140.compliance", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "security.fips140.compliance"}, {"name": "service.cloudinit", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "service.cloudinit"}, {"name": "service.httpd.allow", "default": "::", "value": "All", "value_range": "string", "scf_config": "false", "full_path": "service.httpd.allow"}, {"name": "service.snmp.allow", "default": "127.0.0.0/8", "value": "127.0.0.0/8", "value_range": "string", "scf_config": "false", "full_path": "service.snmp.allow"}, {"name": "service.ssh", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "service.ssh"}, {"name": "service.ssh.allow", "default": "ALL", "value": "ALL", "value_range": "string", "scf_config": "false", "full_path": "service.ssh.allow"}, {"name": "setup.run", "default": "true", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "setup.run"}, {"name": "sflow.min_sampling_rate.http", "default": "100", "value": "100", "value_range": "unsigned integer min:1 max:10240", "scf_config": "true", "full_path": "sflow.min_sampling_rate.http"}, {"name": "sflow.min_sampling_rate.packet", "default": "1024", "value": "1024", "value_range": "unsigned integer min:128 max:10240", "scf_config": "true", "full_path": "sflow.min_sampling_rate.packet"}, {"name": "snat.anyipprotocol", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "snat.anyipprotocol"}, {"name": "snmp.bigiptraps", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "snmp.bigiptraps"}, {"name": "snmp.bigiptraps.suppress.interval", "default": "60", "value": "60", "value_range": "integer min:0 max:300", "scf_config": "true", "full_path": "snmp.bigiptraps.suppress.interval"}, {"name": "snmp.daemon", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "snmp.daemon"}, {"name": "snmp.snmpdca.log", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "snmp.snmpdca.log"}, {"name": "snmp.v1.enabled", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "snmp.v1.enabled"}, {"name": "snmp.v2.enabled", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "snmp.v2.enabled"}, {"name": "softpva.ipv4", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "softpva.ipv4"}, {"name": "softpva.ipv6", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "softpva.ipv6"}, {"name": "softpva.size", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:32", "scf_config": "false", "full_path": "softpva.size"}, {"name": "spdy.serverhighwatermark", "default": "128", "value": "128", "value_range": "integer min:0 max:128", "scf_config": "true", "full_path": "spdy.serverhighwatermark"}, {"name": "spdy.serverlowwatermark", "default": "0", "value": "0", "value_range": "integer min:0 max:128", "scf_config": "true", "full_path": "spdy.serverlowwatermark"}, {"name": "ssd.availablespace.warningmargin", "default": "20", "value": "20", "value_range": "unsigned integer min:1 max:100", "scf_config": "true", "full_path": "ssd.availablespace.warningmargin"}, {"name": "ssd.mediawearoutindicator.warningmargin", "default": "20", "value": "20", "value_range": "unsigned integer min:1 max:100", "scf_config": "true", "full_path": "ssd.mediawearoutindicator.warningmargin"}, {"name": "sshplugin.allow_return_auth_success_for_auth_none_request", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "sshplugin.allow_return_auth_success_for_auth_none_request"}, {"name": "sshplugin.enable_3des_and_blowfish_ciphers", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "sshplugin.enable_3des_and_blowfish_ciphers"}, {"name": "sshplugin.max_active_serverside_rekeys", "default": "100", "value": "100", "value_range": "unsigned integer min:100 max:4000", "scf_config": "false", "full_path": "sshplugin.max_active_serverside_rekeys"}, {"name": "sshplugin.max_num_outstanding_threads", "default": "100", "value": "100", "value_range": "unsigned integer min:100 max:4000", "scf_config": "false", "full_path": "sshplugin.max_num_outstanding_threads"}, {"name": "sshplugin.outstanding_thread_lifetime_max", "default": "60", "value": "60", "value_range": "unsigned integer min:1 max:65536", "scf_config": "false", "full_path": "sshplugin.outstanding_thread_lifetime_max"}, {"name": "sshplugin.thread_stack_size_kb", "default": "2048", "value": "2048", "value_range": "unsigned integer min:2048 max:10240", "scf_config": "false", "full_path": "sshplugin.thread_stack_size_kb"}, {"name": "ssl.certrequest.commonname", "default": "_undef_", "value": "_undef_", "value_range": "string", "scf_config": "true", "full_path": "ssl.certrequest.commonname"}, {"name": "ssl.certrequest.countryname", "default": "US", "value": "US", "value_range": "string", "scf_config": "true", "full_path": "ssl.certrequest.countryname"}, {"name": "ssl.certrequest.divisionname", "default": "_undef_", "value": "_undef_", "value_range": "string", "scf_config": "true", "full_path": "ssl.certrequest.divisionname"}, {"name": "ssl.certrequest.localityname", "default": "_undef_", "value": "_undef_", "value_range": "string", "scf_config": "true", "full_path": "ssl.certrequest.localityname"}, {"name": "ssl.certrequest.organizationname", "default": "_undef_", "value": "_undef_", "value_range": "string", "scf_config": "true", "full_path": "ssl.certrequest.organizationname"}, {"name": "ssl.certrequest.stateorprovincename", "default": "_undef_", "value": "_undef_", "value_range": "string", "scf_config": "true", "full_path": "ssl.certrequest.stateorprovincename"}, {"name": "ssl.fallback_scsv", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "ssl.fallback_scsv"}, {"name": "ssl.fips.failuretimeout", "default": "60", "value": "60", "value_range": "unsigned integer min:0 max:3600", "scf_config": "true", "full_path": "ssl.fips.failuretimeout"}, {"name": "ssl.handshake.threshold", "default": "4096", "value": "4096", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "ssl.handshake.threshold"}, {"name": "ssl.outerrecordtls1_0", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "ssl.outerrecordtls1_0"}, {"name": "ssl.renegotiatewithinitialclienthello", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "ssl.renegotiatewithinitialclienthello"}, {"name": "ssl.sessionticketkey.regen", "default": "252900", "value": "252900", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "ssl.sessionticketkey.regen"}, {"name": "ssl.tls12.ios5", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "ssl.tls12.ios5"}, {"name": "statemirror.clustermirroring", "default": "within", "value": "within", "value_range": "between within", "scf_config": "true", "full_path": "statemirror.clustermirroring"}, {"name": "statemirror.graceperiod", "default": "5", "value": "5", "value_range": "unsigned integer min:1 max:60", "scf_config": "true", "full_path": "statemirror.graceperiod"}, {"name": "statemirror.heartbeat", "default": "500", "value": "500", "value_range": "unsigned integer min:0 max:120000", "scf_config": "true", "full_path": "statemirror.heartbeat"}, {"name": "statemirror.ipaddr", "default": "::", "value": "::", "value_range": "IP address", "scf_config": "false", "full_path": "statemirror.ipaddr"}, {"name": "statemirror.mirrorsessions", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "statemirror.mirrorsessions"}, {"name": "statemirror.peeripaddr", "default": "::", "value": "::", "value_range": "IP address", "scf_config": "false", "full_path": "statemirror.peeripaddr"}, {"name": "statemirror.peerlistenport", "default": "1028", "value": "1028", "value_range": "integer min:1 max:9999", "scf_config": "true", "full_path": "statemirror.peerlistenport"}, {"name": "statemirror.queuelen", "default": "8388608", "value": "8388608", "value_range": "unsigned integer min:1048576 max:1073741824", "scf_config": "true", "full_path": "statemirror.queuelen"}, {"name": "statemirror.queuepct", "default": "15", "value": "15", "value_range": "unsigned integer min:5 max:50", "scf_config": "true", "full_path": "statemirror.queuepct"}, {"name": "statemirror.reconnect.delay", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:6000", "scf_config": "true", "full_path": "statemirror.reconnect.delay"}, {"name": "statemirror.secondary.ipaddr", "default": "::", "value": "::", "value_range": "IP address", "scf_config": "false", "full_path": "statemirror.secondary.ipaddr"}, {"name": "statemirror.secondary.peeripaddr", "default": "::", "value": "::", "value_range": "IP address", "scf_config": "false", "full_path": "statemirror.secondary.peeripaddr"}, {"name": "statemirror.secure", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "statemirror.secure"}, {"name": "statemirror.state", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "statemirror.state"}, {"name": "statemirror.tcpmssadjust", "default": "0", "value": "0", "value_range": "integer min:0 max:512", "scf_config": "true", "full_path": "statemirror.tcpmssadjust"}, {"name": "statemirror.timeout", "default": "60", "value": "60", "value_range": "unsigned integer min:0 max:600", "scf_config": "true", "full_path": "statemirror.timeout"}, {"name": "statemirror.verify", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "statemirror.verify"}, {"name": "statsd.cpu.interval", "default": "1", "value": "1", "value_range": "integer min:0 max:60", "scf_config": "true", "full_path": "statsd.cpu.interval"}, {"name": "statsd.disk.interval", "default": "5", "value": "5", "value_range": "integer min:0 max:60", "scf_config": "true", "full_path": "statsd.disk.interval"}, {"name": "statsd.diskstats.log.interval", "default": "60", "value": "60", "value_range": "integer min:0 max:3600", "scf_config": "true", "full_path": "statsd.diskstats.log.interval"}, {"name": "statsd.host.interval", "default": "5", "value": "5", "value_range": "integer min:0 max:60", "scf_config": "true", "full_path": "statsd.host.interval"}, {"name": "statsd.intelpcm.interval", "default": "0", "value": "0", "value_range": "integer min:0 max:60", "scf_config": "true", "full_path": "statsd.intelpcm.interval"}, {"name": "statsd.process.cleanup.offset", "default": "10", "value": "10", "value_range": "integer min:0 max:1000", "scf_config": "true", "full_path": "statsd.process.cleanup.offset"}, {"name": "statsd.process.list", "default": "all", "value": "all", "value_range": "string", "scf_config": "true", "full_path": "statsd.process.list"}, {"name": "statsd.process.poll.interval", "default": "10", "value": "10", "value_range": "integer min:0 max:60", "scf_config": "true", "full_path": "statsd.process.poll.interval"}, {"name": "statsd.traffic.interval", "default": "1", "value": "1", "value_range": "integer min:0 max:60", "scf_config": "true", "full_path": "statsd.traffic.interval"}, {"name": "statsd.virtual.server.interval", "default": "5", "value": "5", "value_range": "integer min:0 max:60", "scf_config": "true", "full_path": "statsd.virtual.server.interval"}, {"name": "switchboard.bcm5692_a1_fe_ipg_fix", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "switchboard.bcm5692_a1_fe_ipg_fix"}, {"name": "switchboard.buffer.ingress.pgdynamic", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "switchboard.buffer.ingress.pgdynamic"}, {"name": "switchboard.buffer.maxdynport", "default": "100", "value": "100", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "switchboard.buffer.maxdynport"}, {"name": "switchboard.buffer.maxdyntotal.egress", "default": "50", "value": "50", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "switchboard.buffer.maxdyntotal.egress"}, {"name": "switchboard.buffer.maxdyntotal.ingress", "default": "85", "value": "85", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "switchboard.buffer.maxdyntotal.ingress"}, {"name": "switchboard.dos.control", "default": "133", "value": "133", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "switchboard.dos.control"}, {"name": "switchboard.failsafe", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "switchboard.failsafe"}, {"name": "switchboard.failsafe.action", "default": "go_offline_abort_tm", "value": "go_offline_abort_tm", "value_range": "failover_abort_tm go_offline go_offline_abort_tm reboot restart_all", "scf_config": "false", "full_path": "switchboard.failsafe.action"}, {"name": "switchboard.failsafe.mode", "default": "active", "value": "active", "value_range": "active passive", "scf_config": "true", "full_path": "switchboard.failsafe.mode"}, {"name": "switchboard.failsafe.timeout", "default": "30", "value": "30", "value_range": "integer min:1 max:60", "scf_config": "true", "full_path": "switchboard.failsafe.timeout"}, {"name": "switchboard.l2.mitigation", "default": "monitor", "value": "monitor", "value_range": "disable enable monitor", "scf_config": "true", "full_path": "switchboard.l2.mitigation"}, {"name": "switchboard.link.recoveryaction", "default": "None", "value": "None", "value_range": "None Reboot ResetI2C Restart", "scf_config": "true", "full_path": "switchboard.link.recoveryaction"}, {"name": "switchboard.link.recoverythreshold", "default": "6", "value": "6", "value_range": "unsigned integer min:0 max:10", "scf_config": "true", "full_path": "switchboard.link.recoverythreshold"}, {"name": "switchboard.maxbcastrate", "default": "200000", "value": "200000", "value_range": "unsigned integer min:0 max:262144", "scf_config": "true", "full_path": "switchboard.maxbcastrate"}, {"name": "switchboard.maxdlfrate", "default": "200000", "value": "200000", "value_range": "unsigned integer min:0 max:262144", "scf_config": "true", "full_path": "switchboard.maxdlfrate"}, {"name": "switchboard.maxmcastrate", "default": "200000", "value": "200000", "value_range": "unsigned integer min:0 max:262144", "scf_config": "true", "full_path": "switchboard.maxmcastrate"}, {"name": "switchboard.startup.linkdowntime", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "switchboard.startup.linkdowntime"}, {"name": "switchboard.wred", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "switchboard.wred"}, {"name": "switchboard.wred.dropslope", "default": "20", "value": "20", "value_range": "unsigned integer min:0 max:90", "scf_config": "true", "full_path": "switchboard.wred.dropslope"}, {"name": "switchboard.wred.dropstart", "default": "75", "value": "75", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "switchboard.wred.dropstart"}, {"name": "systemauth.disablebash", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "systemauth.disablebash"}, {"name": "systemauth.disableduserhardening.lock", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "systemauth.disableduserhardening.lock"}, {"name": "systemauth.disableduserhardening.shell", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "systemauth.disableduserhardening.shell"}, {"name": "systemauth.disablerootlogin", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "systemauth.disablerootlogin"}, {"name": "systemauth.fallback.remotetolocal", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "systemauth.fallback.remotetolocal"}, {"name": "systemauth.nolocalonly", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "systemauth.nolocalonly"}, {"name": "systemauth.primary********user", "default": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER", "value": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER", "value_range": "string", "scf_config": "true", "full_path": "systemauth.primary********user"}, {"name": "systemauth.source", "default": "local", "value": "local", "value_range": "activedirectory apm-auth cert-ldap ldap local radius tacacs", "scf_config": "false", "full_path": "systemauth.source"}, {"name": "tamd.crldp.nosignature", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tamd.crldp.nosignature"}, {"name": "tamd.crldp.nullcrl", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tamd.crldp.nullcrl"}, {"name": "tamd.worker.threads", "default": "100", "value": "100", "value_range": "unsigned integer min:10 max:100", "scf_config": "true", "full_path": "tamd.worker.threads"}, {"name": "tcp.hash", "default": "port", "value": "port", "value_range": "ipport port", "scf_config": "false", "full_path": "tcp.hash"}, {"name": "tcpdump.ifname", "default": "1.1", "value": "1.1", "value_range": "string", "scf_config": "true", "full_path": "tcpdump.ifname"}, {"name": "tm.acceptipoptions", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.acceptipoptions"}, {"name": "tm.acceptipsourceroute", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.acceptipsourceroute"}, {"name": "tm.allowethernetsourcetype", "default": "unicast", "value": "unicast", "value_range": "any unicast unicast-multicast", "scf_config": "true", "full_path": "tm.allowethernetsourcetype"}, {"name": "tm.allowigmprouteralert", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.allowigmprouteralert"}, {"name": "tm.allowipsourceroute", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.allowipsourceroute"}, {"name": "tm.allowmulticastl2destinationtraffic", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.allowmulticastl2destinationtraffic"}, {"name": "tm.clonel2higigcontrol", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.clonel2higigcontrol"}, {"name": "tm.continuematching", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "tm.continuematching"}, {"name": "tm.dsrlocalencap", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.dsrlocalencap"}, {"name": "tm.egress.pktpriority", "default": "3", "value": "3", "value_range": "unsigned integer min:0 max:7", "scf_config": "false", "full_path": "tm.egress.pktpriority"}, {"name": "tm.egressdscp", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:63", "scf_config": "true", "full_path": "tm.egressdscp"}, {"name": "tm.enforcepathmtu", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.enforcepathmtu"}, {"name": "tm.expirenatondelete", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.expirenatondelete"}, {"name": "tm.fastl4_ack_mirror", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.fastl4_ack_mirror"}, {"name": "tm.fastl4_ignore_sctp_zero_checksum", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.fastl4_ignore_sctp_zero_checksum"}, {"name": "tm.fastl4_mirroring_taciturn", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.fastl4_mirroring_taciturn"}, {"name": "tm.fastl4_rst_on_icmp", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.fastl4_rst_on_icmp"}, {"name": "tm.flowstate.timeout", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:2147483647", "scf_config": "true", "full_path": "tm.flowstate.timeout"}, {"name": "tm.fragmenttimeout", "default": "6", "value": "6", "value_range": "unsigned integer min:2 max:65536", "scf_config": "true", "full_path": "tm.fragmenttimeout"}, {"name": "tm.fw.defaultaction", "default": "accept", "value": "accept", "value_range": "accept drop reject", "scf_config": "true", "full_path": "tm.fw.defaultaction"}, {"name": "tm.fw.defaultrule.log", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.fw.defaultrule.log"}, {"name": "tm.fw.globaldefaultrule.log", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.fw.globaldefaultrule.log"}, {"name": "tm.fw.iptbl.sweeper.period", "default": "1200", "value": "1200", "value_range": "unsigned integer min:30 max:360000", "scf_config": "true", "full_path": "tm.fw.iptbl.sweeper.period"}, {"name": "tm.fw.log.action.acceptdecisiveasaccept", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tm.fw.log.action.acceptdecisiveasaccept"}, {"name": "tm.fw.log.syslogrfc5424.customfields", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tm.fw.log.syslogrfc5424.customfields"}, {"name": "tm.fw.stageddefaultrule.log", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.fw.stageddefaultrule.log"}, {"name": "tm.fw.stagedglobaldefaultrule.log", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.fw.stagedglobaldefaultrule.log"}, {"name": "tm.hud_history_depth", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:10000000", "scf_config": "true", "full_path": "tm.hud_history_depth"}, {"name": "tm.icsaicmpreplay", "default": "allow", "value": "allow", "value_range": "allow detect discard", "scf_config": "true", "full_path": "tm.icsaicmpreplay"}, {"name": "tm.icsastricttcpforwarding", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.icsastricttcpforwarding"}, {"name": "tm.l2forwardidletimeout", "default": "300", "value": "300", "value_range": "unsigned integer min:0 max:2147483647", "scf_config": "true", "full_path": "tm.l2forwardidletimeout"}, {"name": "tm.lhpnomemberaction", "default": "0", "value": "0", "value_range": "integer min:0 max:2", "scf_config": "true", "full_path": "tm.lhpnomemberaction"}, {"name": "tm.lsn.dnat_suppress_logs_period", "default": "300", "value": "300", "value_range": "unsigned integer min:0 max:300", "scf_config": "true", "full_path": "tm.lsn.dnat_suppress_logs_period"}, {"name": "tm.lsn.pick_duration_microseconds", "default": "1500", "value": "1500", "value_range": "unsigned integer min:10 max:5000", "scf_config": "true", "full_path": "tm.lsn.pick_duration_microseconds"}, {"name": "tm.lsn.retries", "default": "512", "value": "512", "value_range": "unsigned integer min:20 max:4096", "scf_config": "true", "full_path": "tm.lsn.retries"}, {"name": "tm.macmasqaddr_per_vlan", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "tm.macmasqaddr_per_vlan"}, {"name": "tm.maxforwardicmprate", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:2147483647", "scf_config": "true", "full_path": "tm.maxforwardicmprate"}, {"name": "tm.maxicmprate", "default": "100", "value": "100", "value_range": "unsigned integer min:0 max:2147483647", "scf_config": "false", "full_path": "tm.maxicmprate"}, {"name": "tm.maxipfragpkts", "default": "4096", "value": "4096", "value_range": "integer min:-1 max:2147483647", "scf_config": "true", "full_path": "tm.maxipfragpkts"}, {"name": "tm.maxipfragsperpkt", "default": "128", "value": "128", "value_range": "unsigned integer min:0 max:8192", "scf_config": "true", "full_path": "tm.maxipfragsperpkt"}, {"name": "tm.maxrejectrate", "default": "250", "value": "250", "value_range": "unsigned integer min:1 max:1000", "scf_config": "false", "full_path": "tm.maxrejectrate"}, {"name": "tm.maxrejectrate.timeout", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:300", "scf_config": "false", "full_path": "tm.maxrejectrate.timeout"}, {"name": "tm.minipfragsize", "default": "552", "value": "552", "value_range": "unsigned integer min:1 max:65512", "scf_config": "true", "full_path": "tm.minipfragsize"}, {"name": "tm.minipv6fragsize", "default": "1232", "value": "1232", "value_range": "unsigned integer min:1 max:65480", "scf_config": "true", "full_path": "tm.minipv6fragsize"}, {"name": "tm.minpathmtu", "default": "296", "value": "296", "value_range": "unsigned integer min:68 max:1500", "scf_config": "false", "full_path": "tm.minpathmtu"}, {"name": "tm.monitorencap", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.monitorencap"}, {"name": "tm.pathmtudiscovery", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.pathmtudiscovery"}, {"name": "tm.pathmtudontfragoverride", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.pathmtudontfragoverride"}, {"name": "tm.portfind.linear", "default": "16", "value": "16", "value_range": "unsigned integer min:0 max:61439", "scf_config": "false", "full_path": "tm.portfind.linear"}, {"name": "tm.portfind.random", "default": "16", "value": "16", "value_range": "unsigned integer min:0 max:1024", "scf_config": "false", "full_path": "tm.portfind.random"}, {"name": "tm.portfind.threshold.timeout", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:300", "scf_config": "false", "full_path": "tm.portfind.threshold.timeout"}, {"name": "tm.portfind.threshold.trigger", "default": "8", "value": "8", "value_range": "unsigned integer min:1 max:12", "scf_config": "false", "full_path": "tm.portfind.threshold.trigger"}, {"name": "tm.portfind.threshold.warning", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "tm.portfind.threshold.warning"}, {"name": "tm.pptp.timeout", "default": "60", "value": "60", "value_range": "unsigned integer min:30 max:3600", "scf_config": "true", "full_path": "tm.pptp.timeout"}, {"name": "tm.ratetracker.t2suppressor", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:10240", "scf_config": "true", "full_path": "tm.ratetracker.t2suppressor"}, {"name": "tm.rejectunmatched", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "tm.rejectunmatched"}, {"name": "tm.rstcause.log", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.rstcause.log"}, {"name": "tm.rstcause.pkt", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.rstcause.pkt"}, {"name": "tm.simultaneousopen", "default": "allow", "value": "allow", "value_range": "allow drop_connection drop_pkt reset", "scf_config": "true", "full_path": "tm.simultaneousopen"}, {"name": "tm.strongipid", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.strongipid"}, {"name": "tm.sweeper.avr.freq", "default": "256", "value": "256", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "true", "full_path": "tm.sweeper.avr.freq"}, {"name": "tm.sweeper.flow.acl", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.sweeper.flow.acl"}, {"name": "tm.sweeper.flow.del.dist", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.sweeper.flow.del.dist"}, {"name": "tm.sweeper.flow.ipint", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.sweeper.flow.ipint"}, {"name": "tm.tcp.enforcepathmtu", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcp.enforcepathmtu"}, {"name": "tm.tcp.oc.proxymss", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcp.oc.proxymss"}, {"name": "tm.tcpallowinsecurerst", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.tcpallowinsecurerst"}, {"name": "tm.tcpanalytics.min_geoip_cf", "default": "0", "value": "0", "value_range": "integer min:0 max:100", "scf_config": "true", "full_path": "tm.tcpanalytics.min_geoip_cf"}, {"name": "tm.tcpanalytics.reportinterval", "default": "2000", "value": "2000", "value_range": "unsigned integer min:500 max:3600000", "scf_config": "true", "full_path": "tm.tcpanalytics.reportinterval"}, {"name": "tm.tcpforwardchecksumadjust", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tm.tcpforwardchecksumadjust"}, {"name": "tm.tcpinitwinafterxon", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcpinitwinafterxon"}, {"name": "tm.tcplargereceivecompact", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.tcplargereceivecompact"}, {"name": "tm.tcplargereceiveoffload", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.tcplargereceiveoffload"}, {"name": "tm.tcpmemorypressure", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcpmemorypressure"}, {"name": "tm.tcpmemorypressure.hiwater", "default": "90", "value": "90", "value_range": "unsigned integer min:86 max:95", "scf_config": "false", "full_path": "tm.tcpmemorypressure.hiwater"}, {"name": "tm.tcpmemorypressure.lowater", "default": "80", "value": "80", "value_range": "unsigned integer min:75 max:85", "scf_config": "false", "full_path": "tm.tcpmemorypressure.lowater"}, {"name": "tm.tcpmptcpdebugenabled", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcpmptcpdebugenabled"}, {"name": "tm.tcpmptcpdiagenabled", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcpmptcpdiagenabled"}, {"name": "tm.tcpmptcpenabled", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcpmptcpenabled"}, {"name": "tm.tcpmptcpjoinsysmax", "default": "10000", "value": "10000", "value_range": "unsigned integer min:100 max:100000", "scf_config": "false", "full_path": "tm.tcpmptcpjoinsysmax"}, {"name": "tm.tcpmptcpselectivertx", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcpmptcpselectivertx"}, {"name": "tm.tcpmptcptokensync", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcpmptcptokensync"}, {"name": "tm.tcpprogressive", "default": "negotiate", "value": "negotiate", "value_range": "disable enable mptcp negotiate", "scf_config": "false", "full_path": "tm.tcpprogressive"}, {"name": "tm.tcpprogressive.autobuffertuning", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcpprogressive.autobuffertuning"}, {"name": "tm.tcpprogressive.autonaglerttthresh", "default": "20", "value": "20", "value_range": "unsigned integer min:0 max:200", "scf_config": "false", "full_path": "tm.tcpprogressive.autonaglerttthresh"}, {"name": "tm.tcpprogressive.burstcontrol", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcpprogressive.burstcontrol"}, {"name": "tm.tcpprogressive.proxybufmax", "default": "2097152", "value": "2097152", "value_range": "unsigned integer min:1048576 max:4194304", "scf_config": "false", "full_path": "tm.tcpprogressive.proxybufmax"}, {"name": "tm.tcpprogressive.proxybufmin", "default": "65535", "value": "65535", "value_range": "unsigned integer min:4096 max:1048576", "scf_config": "false", "full_path": "tm.tcpprogressive.proxybufmin"}, {"name": "tm.tcpprogressive.proxybufoffset", "default": "65535", "value": "65535", "value_range": "unsigned integer min:4096 max:1048576", "scf_config": "false", "full_path": "tm.tcpprogressive.proxybufoffset"}, {"name": "tm.tcpprogressive.rcvbufbdpmultiplier", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:10", "scf_config": "false", "full_path": "tm.tcpprogressive.rcvbufbdpmultiplier"}, {"name": "tm.tcpprogressive.rcvbufincr", "default": "65536", "value": "65536", "value_range": "unsigned integer min:4096 max:1048576", "scf_config": "false", "full_path": "tm.tcpprogressive.rcvbufincr"}, {"name": "tm.tcpprogressive.rcvbufincrsmall", "default": "2", "value": "2", "value_range": "unsigned integer min:1 max:64", "scf_config": "false", "full_path": "tm.tcpprogressive.rcvbufincrsmall"}, {"name": "tm.tcpprogressive.rcvbufmax", "default": "16777216", "value": "16777216", "value_range": "unsigned integer min:4194304 max:16777216", "scf_config": "false", "full_path": "tm.tcpprogressive.rcvbufmax"}, {"name": "tm.tcpprogressive.rcvbufmin", "default": "65535", "value": "65535", "value_range": "unsigned integer min:4096 max:1048576", "scf_config": "false", "full_path": "tm.tcpprogressive.rcvbufmin"}, {"name": "tm.tcpprogressive.rcvbufmininterval", "default": "100", "value": "100", "value_range": "unsigned integer min:10 max:65535", "scf_config": "false", "full_path": "tm.tcpprogressive.rcvbufmininterval"}, {"name": "tm.tcpprogressive.rttthresh", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:1500", "scf_config": "false", "full_path": "tm.tcpprogressive.rttthresh"}, {"name": "tm.tcpprogressive.sndbufbdpmultiplier", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:10", "scf_config": "false", "full_path": "tm.tcpprogressive.sndbufbdpmultiplier"}, {"name": "tm.tcpprogressive.sndbufincr", "default": "65536", "value": "65536", "value_range": "unsigned integer min:4096 max:1048576", "scf_config": "false", "full_path": "tm.tcpprogressive.sndbufincr"}, {"name": "tm.tcpprogressive.sndbufincrsmall", "default": "2", "value": "2", "value_range": "unsigned integer min:1 max:64", "scf_config": "false", "full_path": "tm.tcpprogressive.sndbufincrsmall"}, {"name": "tm.tcpprogressive.sndbufmax", "default": "16777216", "value": "16777216", "value_range": "unsigned integer min:1048576 max:16777216", "scf_config": "false", "full_path": "tm.tcpprogressive.sndbufmax"}, {"name": "tm.tcpprogressive.sndbufmin", "default": "65535", "value": "65535", "value_range": "unsigned integer min:4096 max:1048576", "scf_config": "false", "full_path": "tm.tcpprogressive.sndbufmin"}, {"name": "tm.tcpprogressive.sndbufmininterval", "default": "100", "value": "100", "value_range": "unsigned integer min:10 max:65535", "scf_config": "false", "full_path": "tm.tcpprogressive.sndbufmininterval"}, {"name": "tm.tcpsackglobalmaxholes", "default": "65536", "value": "65536", "value_range": "unsigned integer min:0 max:2147483647", "scf_config": "true", "full_path": "tm.tcpsackglobalmaxholes"}, {"name": "tm.tcpsackmaxholes", "default": "128", "value": "128", "value_range": "unsigned integer min:0 max:2147483647", "scf_config": "true", "full_path": "tm.tcpsackmaxholes"}, {"name": "tm.tcpsegmentationoffload", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tm.tcpsegmentationoffload"}, {"name": "tm.tcpslowstartafteridle", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcpslowstartafteridle"}, {"name": "tm.tcptimestampmirror", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcptimestampmirror"}, {"name": "tm.tcptracing", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "false", "full_path": "tm.tcptracing"}, {"name": "tm.tcptxpausemax", "default": "256", "value": "256", "value_range": "unsigned integer min:0 max:2000", "scf_config": "true", "full_path": "tm.tcptxpausemax"}, {"name": "tm.tcptxpausemin", "default": "100", "value": "100", "value_range": "unsigned integer min:0 max:2000", "scf_config": "true", "full_path": "tm.tcptxpausemin"}, {"name": "tm.tcpudpiprxchecksum", "default": "default", "value": "default", "value_range": "default software-reverify", "scf_config": "true", "full_path": "tm.tcpudpiprxchecksum"}, {"name": "tm.tcpudptxchecksum", "default": "Hardware-enabled", "value": "Hardware-enabled", "value_range": "Hardware-enabled Software-only", "scf_config": "true", "full_path": "tm.tcpudptxchecksum"}, {"name": "tm.tcpwoodsidefasterrecovery", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "tm.tcpwoodsidefasterrecovery"}, {"name": "tmm.access.auta", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.access.auta"}, {"name": "tmm.access.logouturlrefererheadercheck", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.access.logouturlrefererheadercheck"}, {"name": "tmm.access.maxrequestbodysize", "default": "64000", "value": "64000", "value_range": "unsigned integer min:64000 max:25000000", "scf_config": "true", "full_path": "tmm.access.maxrequestbodysize"}, {"name": "tmm.access.policytrace", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.access.policytrace"}, {"name": "tmm.access.subsessionstateprefix", "default": "000fffff", "value": "000fffff", "value_range": "string max-len:32", "scf_config": "true", "full_path": "tmm.access.subsessionstateprefix"}, {"name": "tmm.cdp.debug", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:2", "scf_config": "true", "full_path": "tmm.cdp.debug"}, {"name": "tmm.ce.statsuppressed", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.ce.statsuppressed"}, {"name": "tmm.cec.classifier.asme.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.asme.enable"}, {"name": "tmm.cec.classifier.bittorrent.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.bittorrent.enable"}, {"name": "tmm.cec.classifier.dfa.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.dfa.enable"}, {"name": "tmm.cec.classifier.dns.caching.timeout", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:604800", "scf_config": "true", "full_path": "tmm.cec.classifier.dns.caching.timeout"}, {"name": "tmm.cec.classifier.dns.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.dns.enable"}, {"name": "tmm.cec.classifier.ftp.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.ftp.enable"}, {"name": "tmm.cec.classifier.http.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.http.enable"}, {"name": "tmm.cec.classifier.http.max_headers", "default": "64", "value": "64", "value_range": "unsigned integer min:64 max:4096", "scf_config": "true", "full_path": "tmm.cec.classifier.http.max_headers"}, {"name": "tmm.cec.classifier.http2.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.http2.enable"}, {"name": "tmm.cec.classifier.ixe.enable", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.ixe.enable"}, {"name": "tmm.cec.classifier.quic.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.quic.enable"}, {"name": "tmm.cec.classifier.rtmp.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.rtmp.enable"}, {"name": "tmm.cec.classifier.rtsp.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.rtsp.enable"}, {"name": "tmm.cec.classifier.sip.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.sip.enable"}, {"name": "tmm.cec.classifier.skype.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.skype.enable"}, {"name": "tmm.cec.classifier.ssl.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.ssl.enable"}, {"name": "tmm.cec.classifier.ssl_training.enable", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.ssl_training.enable"}, {"name": "tmm.cec.classifier.ssl_training.interval", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:65535", "scf_config": "true", "full_path": "tmm.cec.classifier.ssl_training.interval"}, {"name": "tmm.cec.classifier.ssl_training.log.stats", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.ssl_training.log.stats"}, {"name": "tmm.cec.classifier.ssl_training.max_record", "default": "15", "value": "15", "value_range": "unsigned integer min:1 max:65535", "scf_config": "true", "full_path": "tmm.cec.classifier.ssl_training.max_record"}, {"name": "tmm.cec.classifier.stun.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.cec.classifier.stun.enable"}, {"name": "tmm.cec.classifiers_override_bitmask", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:18446744073709551615", "scf_config": "true", "full_path": "tmm.cec.classifiers_override_bitmask"}, {"name": "tmm.cec.hitless_upgrade.timeout", "default": "5", "value": "5", "value_range": "unsigned integer min:1 max:600", "scf_config": "true", "full_path": "tmm.cec.hitless_upgrade.timeout"}, {"name": "tmm.cec.log.level", "default": "Warning", "value": "Warning", "value_range": "Debug Informational Notice Warning", "scf_config": "true", "full_path": "tmm.cec.log.level"}, {"name": "tmm.cec.max_packets", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:64", "scf_config": "true", "full_path": "tmm.cec.max_packets"}, {"name": "tmm.cec.tables.bits", "default": "19", "value": "19", "value_range": "unsigned integer min:9 max:32", "scf_config": "true", "full_path": "tmm.cec.tables.bits"}, {"name": "tmm.cec.tables.evict.lru_after", "default": "64", "value": "64", "value_range": "unsigned integer min:8 max:16384", "scf_config": "true", "full_path": "tmm.cec.tables.evict.lru_after"}, {"name": "tmm.classallocatemetadata", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.classallocatemetadata"}, {"name": "tmm.classmaxelementsreturned", "default": "75000", "value": "75000", "value_range": "unsigned integer min:1 max:18446744073709551615", "scf_config": "true", "full_path": "tmm.classmaxelementsreturned"}, {"name": "tmm.classsweepsperfree", "default": "150", "value": "150", "value_range": "unsigned integer min:1 max:18446744073709551615", "scf_config": "true", "full_path": "tmm.classsweepsperfree"}, {"name": "tmm.coredump", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.coredump"}, {"name": "tmm.devel.max_memory_mb", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:18446744073709551615", "scf_config": "true", "full_path": "tmm.devel.max_memory_mb"}, {"name": "tmm.dhcp.client.connection.packets.inprogress.max", "default": "10000", "value": "2000", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.dhcp.client.connection.packets.inprogress.max"}, {"name": "tmm.dhcp.log.level", "default": "Error", "value": "Error", "value_range": "Alert Critical Debug Emergency Error Informational Notice Warning", "scf_config": "true", "full_path": "tmm.dhcp.log.level"}, {"name": "tmm.dhcp.server.connection.packets.inprogress.max", "default": "10000", "value": "2000", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.dhcp.server.connection.packets.inprogress.max"}, {"name": "tmm.diameter.application.enforce.capability.exchange.avps", "default": "all", "value": "all", "value_range": "all auth none vendor", "scf_config": "true", "full_path": "tmm.diameter.application.enforce.capability.exchange.avps"}, {"name": "tmm.dns64.closewait", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:300", "scf_config": "true", "full_path": "tmm.dns64.closewait"}, {"name": "tmm.dpi.log.level", "default": "Warning", "value": "Warning", "value_range": "Debug Informational Notice Warning", "scf_config": "true", "full_path": "tmm.dpi.log.level"}, {"name": "tmm.drivers.net.virtio", "default": "default", "value": "default", "value_range": "default native", "scf_config": "true", "full_path": "tmm.drivers.net.virtio"}, {"name": "tmm.ffwd.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "tmm.ffwd.enable"}, {"name": "tmm.fips140.posttries", "default": "2", "value": "2", "value_range": "integer min:1 max:5", "scf_config": "true", "full_path": "tmm.fips140.posttries"}, {"name": "tmm.gpa.behavioranalysis", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.behavioranalysis"}, {"name": "tmm.gpa.cec.behavioral.ignore_low_ports", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.cec.behavioral.ignore_low_ports"}, {"name": "tmm.gpa.cec.behavioral.min_class_npkt", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:20", "scf_config": "true", "full_path": "tmm.gpa.cec.behavioral.min_class_npkt"}, {"name": "tmm.gpa.cec.behavioral.min_leaf_class_conf", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "tmm.gpa.cec.behavioral.min_leaf_class_conf"}, {"name": "tmm.gpa.cec.behavioral.min_node_class_conf", "default": "101", "value": "101", "value_range": "unsigned integer min:0 max:101", "scf_config": "true", "full_path": "tmm.gpa.cec.behavioral.min_node_class_conf"}, {"name": "tmm.gpa.cec.behavioral.nodes_to_ignore", "default": "NA", "value": "NA", "value_range": "string", "scf_config": "true", "full_path": "tmm.gpa.cec.behavioral.nodes_to_ignore"}, {"name": "tmm.gpa.cec.behavioral_protocols", "default": "35", "value": "35", "value_range": "string", "scf_config": "true", "full_path": "tmm.gpa.cec.behavioral_protocols"}, {"name": "tmm.gpa.cec.classifiers_to_use", "default": "23", "value": "23", "value_range": "unsigned integer min:0 max:65535", "scf_config": "true", "full_path": "tmm.gpa.cec.classifiers_to_use"}, {"name": "tmm.gpa.cec.classifiers_to_wait", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:65535", "scf_config": "true", "full_path": "tmm.gpa.cec.classifiers_to_wait"}, {"name": "tmm.gpa.cec.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.cec.enable"}, {"name": "tmm.gpa.cec.fast_rtmp_e.enabled", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.cec.fast_rtmp_e.enabled"}, {"name": "tmm.gpa.cec.fast_rtmp_e.min_request_len", "default": "1200", "value": "1200", "value_range": "unsigned integer min:900 max:1537", "scf_config": "true", "full_path": "tmm.gpa.cec.fast_rtmp_e.min_request_len"}, {"name": "tmm.gpa.cec.flow_bundling.3tuples.dst.max_records", "default": "500000", "value": "500000", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "true", "full_path": "tmm.gpa.cec.flow_bundling.3tuples.dst.max_records"}, {"name": "tmm.gpa.cec.flow_bundling.3tuples.src.max_records", "default": "500000", "value": "500000", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "true", "full_path": "tmm.gpa.cec.flow_bundling.3tuples.src.max_records"}, {"name": "tmm.gpa.cec.flow_bundling.3tuples.timeout", "default": "60", "value": "60", "value_range": "unsigned integer min:1 max:86400", "scf_config": "true", "full_path": "tmm.gpa.cec.flow_bundling.3tuples.timeout"}, {"name": "tmm.gpa.cec.flow_bundling.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.cec.flow_bundling.enable"}, {"name": "tmm.gpa.cec.flow_bundling.l4.behavioral.counter_timeout", "default": "60", "value": "60", "value_range": "unsigned integer min:1 max:86400", "scf_config": "true", "full_path": "tmm.gpa.cec.flow_bundling.l4.behavioral.counter_timeout"}, {"name": "tmm.gpa.cec.flow_bundling.l4.behavioral.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.cec.flow_bundling.l4.behavioral.enable"}, {"name": "tmm.gpa.cec.flow_bundling.l4.behavioral.reclass_freq", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "tmm.gpa.cec.flow_bundling.l4.behavioral.reclass_freq"}, {"name": "tmm.gpa.cec.flow_bundling.l4.behavioral.rule_timeout", "default": "300", "value": "300", "value_range": "unsigned integer min:1 max:86400", "scf_config": "true", "full_path": "tmm.gpa.cec.flow_bundling.l4.behavioral.rule_timeout"}, {"name": "tmm.gpa.cec.flow_bundling.l4.behavioral.threshold", "default": "3", "value": "3", "value_range": "unsigned integer min:1 max:10", "scf_config": "true", "full_path": "tmm.gpa.cec.flow_bundling.l4.behavioral.threshold"}, {"name": "tmm.gpa.cec.flow_bundling.ssl_session_id.max_records", "default": "500000", "value": "500000", "value_range": "unsigned integer min:2 max:4294967295", "scf_config": "true", "full_path": "tmm.gpa.cec.flow_bundling.ssl_session_id.max_records"}, {"name": "tmm.gpa.cec.flow_bundling.ssl_session_id.timeout", "default": "18000", "value": "18000", "value_range": "unsigned integer min:15 max:86400", "scf_config": "true", "full_path": "tmm.gpa.cec.flow_bundling.ssl_session_id.timeout"}, {"name": "tmm.gpa.cec.log.detail", "default": "Brief", "value": "Brief", "value_range": "Brief Full", "scf_config": "true", "full_path": "tmm.gpa.cec.log.detail"}, {"name": "tmm.gpa.cec.log.dict_dump_freq", "default": "500", "value": "500", "value_range": "unsigned integer min:0 max:65536", "scf_config": "true", "full_path": "tmm.gpa.cec.log.dict_dump_freq"}, {"name": "tmm.gpa.cec.log.flow_filter", "default": "*", "value": "*", "value_range": "string", "scf_config": "true", "full_path": "tmm.gpa.cec.log.flow_filter"}, {"name": "tmm.gpa.cec.log.hsl_level", "default": "Warning", "value": "Warning", "value_range": "Debug Informational Notice Warning", "scf_config": "true", "full_path": "tmm.gpa.cec.log.hsl_level"}, {"name": "tmm.gpa.cec.log.hsl_pool", "default": "/Common/hsl", "value": "/Common/hsl", "value_range": "string", "scf_config": "true", "full_path": "tmm.gpa.cec.log.hsl_pool"}, {"name": "tmm.gpa.cec.log.hsl_proto", "default": "TCP", "value": "TCP", "value_range": "TCP UDP", "scf_config": "true", "full_path": "tmm.gpa.cec.log.hsl_proto"}, {"name": "tmm.gpa.cec.log.ignore_level", "default": "Warning", "value": "Warning", "value_range": "Debug Informational Notice Warning", "scf_config": "true", "full_path": "tmm.gpa.cec.log.ignore_level"}, {"name": "tmm.gpa.cec.log.module_exclude_mask", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.gpa.cec.log.module_exclude_mask"}, {"name": "tmm.gpa.cec.log.module_mask", "default": "4294967295", "value": "4294967295", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.gpa.cec.log.module_mask"}, {"name": "tmm.gpa.classification.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.classification.enable"}, {"name": "tmm.gpa.datagroup", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.gpa.datagroup"}, {"name": "tmm.gpa.ixe.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.ixe.enable"}, {"name": "tmm.gpa.log.level", "default": "Warning", "value": "Warning", "value_range": "Debug Informational Notice Warning", "scf_config": "true", "full_path": "tmm.gpa.log.level"}, {"name": "tmm.gpa.optimization", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.optimization"}, {"name": "tmm.gpa.signature_update.timeout", "default": "600", "value": "600", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.gpa.signature_update.timeout"}, {"name": "tmm.gpa.ssl_training.log.publisher", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "tmm.gpa.ssl_training.log.publisher"}, {"name": "tmm.gpa.statupdate", "default": "16384", "value": "16384", "value_range": "unsigned integer min:0 max:18446744073709551615", "scf_config": "false", "full_path": "tmm.gpa.statupdate"}, {"name": "tmm.gpa.statupdate.hi", "default": "512", "value": "512", "value_range": "unsigned integer min:0 max:1024", "scf_config": "false", "full_path": "tmm.gpa.statupdate.hi"}, {"name": "tmm.gpa.statupdate.lo", "default": "8", "value": "8", "value_range": "unsigned integer min:0 max:16", "scf_config": "false", "full_path": "tmm.gpa.statupdate.lo"}, {"name": "tmm.gpa.transactional", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.transactional"}, {"name": "tmm.gpa.urlcat", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.urlcat"}, {"name": "tmm.gpa.urlcat.cloud.only", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.urlcat.cloud.only"}, {"name": "tmm.gpa.urlcat.customdb.only", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.urlcat.customdb.only"}, {"name": "tmm.gpa.urlcat.no.cloud", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.gpa.urlcat.no.cloud"}, {"name": "tmm.gradualfileloadadjust", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.gradualfileloadadjust"}, {"name": "tmm.gradualfileloadspeed", "default": "8", "value": "8", "value_range": "unsigned integer min:1 max:16", "scf_config": "true", "full_path": "tmm.gradualfileloadspeed"}, {"name": "tmm.hsb.hgmfcsburst", "default": "17", "value": "17", "value_range": "unsigned integer min:1 max:50", "scf_config": "true", "full_path": "tmm.hsb.hgmfcsburst"}, {"name": "tmm.hsb.hgmfcsthreshold", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:65535", "scf_config": "true", "full_path": "tmm.hsb.hgmfcsthreshold"}, {"name": "tmm.hsb.txpause", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.hsb.txpause"}, {"name": "tmm.hsb.xlmachaaction", "default": "11", "value": "11", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "tmm.hsb.xlmachaaction"}, {"name": "tmm.http.cookie.decrypt.policy", "default": "erase", "value": "erase", "value_range": "erase passthrough reject", "scf_config": "true", "full_path": "tmm.http.cookie.decrypt.policy"}, {"name": "tmm.http.oc.droponerror", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.http.oc.droponerror"}, {"name": "tmm.http.passthru.invalid_content_length", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.http.passthru.invalid_content_length"}, {"name": "tmm.http.rfc_cookies", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.http.rfc_cookies"}, {"name": "tmm.http.uselastxff", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "tmm.http.uselastxff"}, {"name": "tmm.ipother.log.level", "default": "Notice", "value": "Notice", "value_range": "Debug Informational Notice", "scf_config": "true", "full_path": "tmm.ipother.log.level"}, {"name": "tmm.ipv4.ttl.default", "default": "255", "value": "255", "value_range": "unsigned integer min:1 max:255", "scf_config": "true", "full_path": "tmm.ipv4.ttl.default"}, {"name": "tmm.ipv6.ttl.default", "default": "64", "value": "64", "value_range": "unsigned integer min:1 max:255", "scf_config": "true", "full_path": "tmm.ipv6.ttl.default"}, {"name": "tmm.lb.lcaccuracy", "default": "100", "value": "100", "value_range": "unsigned integer min:0 max:10000", "scf_config": "true", "full_path": "tmm.lb.lcaccuracy"}, {"name": "tmm.lb.precisiondelay", "default": "250", "value": "250", "value_range": "unsigned integer min:0 max:10000", "scf_config": "true", "full_path": "tmm.lb.precisiondelay"}, {"name": "tmm.lb.precisionscale", "default": "1000", "value": "1000", "value_range": "unsigned integer min:0 max:10000", "scf_config": "true", "full_path": "tmm.lb.precisionscale"}, {"name": "tmm.lb.wlcoffset", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.lb.wlcoffset"}, {"name": "tmm.lib.urlcat.log.level", "default": "Warning", "value": "Warning", "value_range": "Debug Informational Notice Warning", "scf_config": "true", "full_path": "tmm.lib.urlcat.log.level"}, {"name": "tmm.lognonsessionpackets", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.lognonsessionpackets"}, {"name": "tmm.maxremoteloglength", "default": "1024", "value": "1024", "value_range": "unsigned integer min:1024 max:65507", "scf_config": "true", "full_path": "tmm.maxremoteloglength"}, {"name": "tmm.mcp.replay.timeout", "default": "60", "value": "60", "value_range": "unsigned integer min:10 max:600", "scf_config": "false", "full_path": "tmm.mcp.replay.timeout"}, {"name": "tmm.mpifailsafe", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.mpifailsafe"}, {"name": "tmm.nbr.queue", "default": "4", "value": "4", "value_range": "unsigned integer min:1 max:16", "scf_config": "false", "full_path": "tmm.nbr.queue"}, {"name": "tmm.oops", "default": "log", "value": "log", "value_range": "log panic silent", "scf_config": "false", "full_path": "tmm.oops"}, {"name": "tmm.pcp.max_async_pending_requests", "default": "10000", "value": "10000", "value_range": "unsigned integer min:100 max:100000", "scf_config": "false", "full_path": "tmm.pcp.max_async_pending_requests"}, {"name": "tmm.pem.actions.icap.limit", "default": "8", "value": "8", "value_range": "unsigned integer min:1 max:100", "scf_config": "true", "full_path": "tmm.pem.actions.icap.limit"}, {"name": "tmm.pem.actions.redirect.parameter.name", "default": "cordef_data", "value": "cordef_data", "value_range": "string", "scf_config": "true", "full_path": "tmm.pem.actions.redirect.parameter.name"}, {"name": "tmm.pem.actions.redirect.uri.size", "default": "1024", "value": "1024", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.actions.redirect.uri.size"}, {"name": "tmm.pem.actions.reporting.fastl4.interval", "default": "5", "value": "5", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.actions.reporting.fastl4.interval"}, {"name": "tmm.pem.actions.reporting.hsl.limit.cpu.threshold", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:100", "scf_config": "true", "full_path": "tmm.pem.actions.reporting.hsl.limit.cpu.threshold"}, {"name": "tmm.pem.actions.steering.response", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.pem.actions.steering.response"}, {"name": "tmm.pem.actions.steering.xhdr.name", "default": "X-CORDEF-DATA", "value": "X-CORDEF-DATA", "value_range": "string", "scf_config": "true", "full_path": "tmm.pem.actions.steering.xhdr.name"}, {"name": "tmm.pem.auth.cache.time", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:3600", "scf_config": "true", "full_path": "tmm.pem.auth.cache.time"}, {"name": "tmm.pem.avr.periodic.reporting", "default": "60", "value": "60", "value_range": "unsigned integer min:1 max:140", "scf_config": "true", "full_path": "tmm.pem.avr.periodic.reporting"}, {"name": "tmm.pem.cppe.defmonitorinterval", "default": "3000", "value": "3000", "value_range": "unsigned integer min:500 max:20000", "scf_config": "true", "full_path": "tmm.pem.cppe.defmonitorinterval"}, {"name": "tmm.pem.cppe.flowentriesprocessperrun", "default": "20", "value": "20", "value_range": "unsigned integer min:20 max:20000", "scf_config": "true", "full_path": "tmm.pem.cppe.flowentriesprocessperrun"}, {"name": "tmm.pem.cppe.maxsessionstraversalrtt", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:60", "scf_config": "true", "full_path": "tmm.pem.cppe.maxsessionstraversalrtt"}, {"name": "tmm.pem.cppe.sessionentriesprocessperrun", "default": "200", "value": "200", "value_range": "unsigned integer min:0 max:5000", "scf_config": "true", "full_path": "tmm.pem.cppe.sessionentriesprocessperrun"}, {"name": "tmm.pem.cppe.timeintervalreportonzerovolume", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.cppe.timeintervalreportonzerovolume"}, {"name": "tmm.pem.diameter.application.ignoreunsupportedmandatoryavps", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.diameter.application.ignoreunsupportedmandatoryavps"}, {"name": "tmm.pem.diameter.application.silentdelete.prov.error.sessions", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.diameter.application.silentdelete.prov.error.sessions"}, {"name": "tmm.pem.diameter.application.trigger.delete.onpeer.failure", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.diameter.application.trigger.delete.onpeer.failure"}, {"name": "tmm.pem.dtos.sampled.os.from", "default": "User-Agent", "value": "User-Agent", "value_range": "TCP-fingerprint User-Agent", "scf_config": "true", "full_path": "tmm.pem.dtos.sampled.os.from"}, {"name": "tmm.pem.dtos.tcpf.sampling.interval", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.dtos.tcpf.sampling.interval"}, {"name": "tmm.pem.dtos.ua.sampling.interval", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.dtos.ua.sampling.interval"}, {"name": "tmm.pem.gx.localsessiondeletetimeout", "default": "60", "value": "60", "value_range": "unsigned integer min:30 max:600", "scf_config": "true", "full_path": "tmm.pem.gx.localsessiondeletetimeout"}, {"name": "tmm.pem.gx.sessionsclear", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.gx.sessionsclear"}, {"name": "tmm.pem.insert.deflate.memory.threshold", "default": "1572864", "value": "1572864", "value_range": "unsigned integer min:393216 max:4718592", "scf_config": "true", "full_path": "tmm.pem.insert.deflate.memory.threshold"}, {"name": "tmm.pem.insert.inflate.max.ratio", "default": "100", "value": "100", "value_range": "unsigned integer min:25 max:10000", "scf_config": "true", "full_path": "tmm.pem.insert.inflate.max.ratio"}, {"name": "tmm.pem.insert.memory.threshold", "default": "524288", "value": "524288", "value_range": "unsigned integer min:131072 max:16777216", "scf_config": "true", "full_path": "tmm.pem.insert.memory.threshold"}, {"name": "tmm.pem.irule.action.error.abort", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.pem.irule.action.error.abort"}, {"name": "tmm.pem.log.level", "default": "Critical", "value": "Critical", "value_range": "Critical Debug Error Informational Warning", "scf_config": "true", "full_path": "tmm.pem.log.level"}, {"name": "tmm.pem.persistence.timeout", "default": "180", "value": "180", "value_range": "unsigned integer min:10 max:200", "scf_config": "true", "full_path": "tmm.pem.persistence.timeout"}, {"name": "tmm.pem.policy.reevaluation.interval", "default": "20", "value": "20", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.policy.reevaluation.interval"}, {"name": "tmm.pem.radius.aaa.retransmission.backoff", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:4", "scf_config": "true", "full_path": "tmm.pem.radius.aaa.retransmission.backoff"}, {"name": "tmm.pem.rancon.auxbmval", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.rancon.auxbmval"}, {"name": "tmm.pem.rancon.flow.sample.interval", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.rancon.flow.sample.interval"}, {"name": "tmm.pem.rancon.reporting.event_bitmask", "default": "3", "value": "3", "value_range": "unsigned integer min:1 max:3", "scf_config": "true", "full_path": "tmm.pem.rancon.reporting.event_bitmask"}, {"name": "tmm.pem.rancon.sess.idle_timeout", "default": "60", "value": "60", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.rancon.sess.idle_timeout"}, {"name": "tmm.pem.rancon.sess.sample.interval", "default": "2", "value": "2", "value_range": "unsigned integer min:1 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.rancon.sess.sample.interval"}, {"name": "tmm.pem.rancon.sess.state_debounce_count", "default": "2", "value": "2", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.rancon.sess.state_debounce_count"}, {"name": "tmm.pem.rancon.towerid.con_threshold", "default": "4", "value": "4", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.rancon.towerid.con_threshold"}, {"name": "tmm.pem.rancon.towerid.enabled", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.pem.rancon.towerid.enabled"}, {"name": "tmm.pem.rancon.towerid.sample.interval", "default": "4", "value": "4", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.rancon.towerid.sample.interval"}, {"name": "tmm.pem.session.actions.apply.onlylowprecedence", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.session.actions.apply.onlylowprecedence"}, {"name": "tmm.pem.session.delete.if.max.ipaddr.per.class.exceeded", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.pem.session.delete.if.max.ipaddr.per.class.exceeded"}, {"name": "tmm.pem.session.dropped.flow.count", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.pem.session.dropped.flow.count"}, {"name": "tmm.pem.session.endpointimmediatedelete", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.session.endpointimmediatedelete"}, {"name": "tmm.pem.session.gx.reporting.disable.afterthreshold", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.session.gx.reporting.disable.afterthreshold"}, {"name": "tmm.pem.session.gx.reporting.immediate", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.session.gx.reporting.immediate"}, {"name": "tmm.pem.session.hashdepth", "default": "17", "value": "17", "value_range": "unsigned integer min:10 max:19", "scf_config": "true", "full_path": "tmm.pem.session.hashdepth"}, {"name": "tmm.pem.session.inactivitytimeout", "default": "120", "value": "120", "value_range": "unsigned integer min:0 max:525600", "scf_config": "true", "full_path": "tmm.pem.session.inactivitytimeout"}, {"name": "tmm.pem.session.ip.addr.max", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:16", "scf_config": "true", "full_path": "tmm.pem.session.ip.addr.max"}, {"name": "tmm.pem.session.ipv4.addr.max", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:16", "scf_config": "true", "full_path": "tmm.pem.session.ipv4.addr.max"}, {"name": "tmm.pem.session.ipv6.addr.max", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:16", "scf_config": "true", "full_path": "tmm.pem.session.ipv6.addr.max"}, {"name": "tmm.pem.session.ipv6.prefix.len", "default": "128", "value": "128", "value_range": "unsigned integer min:0 max:128", "scf_config": "true", "full_path": "tmm.pem.session.ipv6.prefix.len"}, {"name": "tmm.pem.session.multiple.ip.stats.enabled", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.pem.session.multiple.ip.stats.enabled"}, {"name": "tmm.pem.session.policy.installunknown", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.session.policy.installunknown"}, {"name": "tmm.pem.session.ppe.recreate.afterpeerfailure", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.session.ppe.recreate.afterpeerfailure"}, {"name": "tmm.pem.session.processing.time", "default": "500", "value": "500", "value_range": "unsigned integer min:50 max:20000", "scf_config": "true", "full_path": "tmm.pem.session.processing.time"}, {"name": "tmm.pem.session.provisioning.continuous", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.pem.session.provisioning.continuous"}, {"name": "tmm.pem.session.quota.bucket.denied.timeout", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:1440", "scf_config": "true", "full_path": "tmm.pem.session.quota.bucket.denied.timeout"}, {"name": "tmm.pem.session.quota.bucket.depleted.timeout", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:1440", "scf_config": "true", "full_path": "tmm.pem.session.quota.bucket.depleted.timeout"}, {"name": "tmm.pem.session.quota.bucket.idle.timeout", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:1440", "scf_config": "true", "full_path": "tmm.pem.session.quota.bucket.idle.timeout"}, {"name": "tmm.pem.session.quota.bucket.notapplicable.timeout", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:1440", "scf_config": "true", "full_path": "tmm.pem.session.quota.bucket.notapplicable.timeout"}, {"name": "tmm.pem.session.quota.bucket.provpending.timeout", "default": "2", "value": "2", "value_range": "unsigned integer min:0 max:1440", "scf_config": "true", "full_path": "tmm.pem.session.quota.bucket.provpending.timeout"}, {"name": "tmm.pem.session.quota.gy.failurehandling", "default": "terminate", "value": "terminate", "value_range": "continue terminate", "scf_config": "true", "full_path": "tmm.pem.session.quota.gy.failurehandling"}, {"name": "tmm.pem.session.quota.notapplicableretrytimeout", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:1440", "scf_config": "true", "full_path": "tmm.pem.session.quota.notapplicableretrytimeout"}, {"name": "tmm.pem.session.quota.provision", "default": "dynamic", "value": "dynamic", "value_range": "disabled dynamic firstMatch static", "scf_config": "true", "full_path": "tmm.pem.session.quota.provision"}, {"name": "tmm.pem.session.quota.provretrytimeout", "default": "120", "value": "120", "value_range": "unsigned integer min:30 max:600", "scf_config": "true", "full_path": "tmm.pem.session.quota.provretrytimeout"}, {"name": "tmm.pem.session.quota.reject.ignore", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.pem.session.quota.reject.ignore"}, {"name": "tmm.pem.session.quota.tx.timeout", "default": "5", "value": "5", "value_range": "unsigned integer min:1 max:90", "scf_config": "true", "full_path": "tmm.pem.session.quota.tx.timeout"}, {"name": "tmm.pem.session.radius.provisioning.hold.time", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:20000", "scf_config": "true", "full_path": "tmm.pem.session.radius.provisioning.hold.time"}, {"name": "tmm.pem.session.radius.retransmit.timeout", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.session.radius.retransmit.timeout"}, {"name": "tmm.pem.session.timeout.endpointdeleteresponse", "default": "3600", "value": "3600", "value_range": "unsigned integer min:0 max:31536000", "scf_config": "true", "full_path": "tmm.pem.session.timeout.endpointdeleteresponse"}, {"name": "tmm.pem.session.timeout.finalusagerecord", "default": "1200", "value": "1200", "value_range": "unsigned integer min:0 max:31536000", "scf_config": "true", "full_path": "tmm.pem.session.timeout.finalusagerecord"}, {"name": "tmm.pem.session.timeout.provpending", "default": "600", "value": "600", "value_range": "unsigned integer min:0 max:31536000", "scf_config": "true", "full_path": "tmm.pem.session.timeout.provpending"}, {"name": "tmm.pem.session.timeout.provretry", "default": "1200", "value": "1200", "value_range": "unsigned integer min:0 max:31536000", "scf_config": "true", "full_path": "tmm.pem.session.timeout.provretry"}, {"name": "tmm.pem.session.usage.retry.interval", "default": "120", "value": "120", "value_range": "unsigned integer min:30 max:20000", "scf_config": "true", "full_path": "tmm.pem.session.usage.retry.interval"}, {"name": "tmm.pem.session.volume.stats.threshold", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:102400", "scf_config": "true", "full_path": "tmm.pem.session.volume.stats.threshold"}, {"name": "tmm.pem.spm.maxsessionlimit", "default": "524288", "value": "524288", "value_range": "unsigned integer min:128 max:1048576", "scf_config": "true", "full_path": "tmm.pem.spm.maxsessionlimit"}, {"name": "tmm.pem.spm.subscriberupdateinterval", "default": "300", "value": "300", "value_range": "unsigned integer min:0 max:86400", "scf_config": "true", "full_path": "tmm.pem.spm.subscriberupdateinterval"}, {"name": "tmm.pem.srdb.enable", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.srdb.enable"}, {"name": "tmm.pem.srdb.entry.highconfidence", "default": "240", "value": "240", "value_range": "unsigned integer min:16 max:256", "scf_config": "true", "full_path": "tmm.pem.srdb.entry.highconfidence"}, {"name": "tmm.pem.srdb.entry.initialconfidence", "default": "64", "value": "64", "value_range": "unsigned integer min:16 max:256", "scf_config": "true", "full_path": "tmm.pem.srdb.entry.initialconfidence"}, {"name": "tmm.pem.srdb.entry.lowconfidence", "default": "16", "value": "16", "value_range": "unsigned integer min:8 max:256", "scf_config": "true", "full_path": "tmm.pem.srdb.entry.lowconfidence"}, {"name": "tmm.pem.srdb.entry.step", "default": "32", "value": "32", "value_range": "unsigned integer min:8 max:256", "scf_config": "true", "full_path": "tmm.pem.srdb.entry.step"}, {"name": "tmm.pem.srdb.hashtable.hashbits", "default": "10", "value": "10", "value_range": "unsigned integer min:3 max:12", "scf_config": "true", "full_path": "tmm.pem.srdb.hashtable.hashbits"}, {"name": "tmm.pem.srdb.hashtable.maxflows", "default": "32", "value": "32", "value_range": "unsigned integer min:1 max:4294967294", "scf_config": "true", "full_path": "tmm.pem.srdb.hashtable.maxflows"}, {"name": "tmm.pem.srdb.hashtable.maxprobes", "default": "16", "value": "16", "value_range": "unsigned integer min:1 max:4095", "scf_config": "true", "full_path": "tmm.pem.srdb.hashtable.maxprobes"}, {"name": "tmm.pem.ssp.init.delay", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:180", "scf_config": "true", "full_path": "tmm.pem.ssp.init.delay"}, {"name": "tmm.pem.static.subscriber.ppe.lookup.enabled", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.pem.static.subscriber.ppe.lookup.enabled"}, {"name": "tmm.pem.td.bandwidth.wt", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "tmm.pem.td.bandwidth.wt"}, {"name": "tmm.pem.td.detected.off.threshold", "default": "40", "value": "40", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.td.detected.off.threshold"}, {"name": "tmm.pem.td.detected.on.threshold", "default": "45", "value": "45", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.td.detected.on.threshold"}, {"name": "tmm.pem.td.expected.bandwidth", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.td.expected.bandwidth"}, {"name": "tmm.pem.td.expected.num.conn", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.td.expected.num.conn"}, {"name": "tmm.pem.td.num.conn.wt", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "tmm.pem.td.num.conn.wt"}, {"name": "tmm.pem.td.sample.interval", "default": "180", "value": "180", "value_range": "unsigned integer min:30 max:4294967295", "scf_config": "true", "full_path": "tmm.pem.td.sample.interval"}, {"name": "tmm.pem.td.tcpf.os.wt", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "tmm.pem.td.tcpf.os.wt"}, {"name": "tmm.pem.td.ttl.wt", "default": "20", "value": "20", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "tmm.pem.td.ttl.wt"}, {"name": "tmm.pem.td.ua.os.wt", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "tmm.pem.td.ua.os.wt"}, {"name": "tmm.pkcs11d.invalidatekeyhandle", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:18446744073709551615", "scf_config": "true", "full_path": "tmm.pkcs11d.invalidatekeyhandle"}, {"name": "tmm.pkcs11d.loadkeyhandles", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:18446744073709551615", "scf_config": "true", "full_path": "tmm.pkcs11d.loadkeyhandles"}, {"name": "tmm.pkcs11d.shmid", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:18446744073709551615", "scf_config": "true", "full_path": "tmm.pkcs11d.shmid"}, {"name": "tmm.policy.tracelevel", "default": "0", "value": "0", "value_range": "integer min:0 max:2", "scf_config": "true", "full_path": "tmm.policy.tracelevel"}, {"name": "tmm.protocol_inspection.insp.ids.maxcount", "default": "10", "value": "10", "value_range": "unsigned integer min:1 max:255", "scf_config": "true", "full_path": "tmm.protocol_inspection.insp.ids.maxcount"}, {"name": "tmm.protocol_inspection.log.level", "default": "Warning", "value": "Warning", "value_range": "Debug Informational Notice Warning", "scf_config": "true", "full_path": "tmm.protocol_inspection.log.level"}, {"name": "tmm.protocol_inspection.log.per_flow.maxcount", "default": "10", "value": "10", "value_range": "unsigned integer min:0 max:255", "scf_config": "true", "full_path": "tmm.protocol_inspection.log.per_flow.maxcount"}, {"name": "tmm.proxyssl.bucketcount", "default": "1023", "value": "1023", "value_range": "unsigned integer min:0 max:10230", "scf_config": "true", "full_path": "tmm.proxyssl.bucketcount"}, {"name": "tmm.proxyssl.cachesize", "default": "2621440", "value": "2621440", "value_range": "unsigned integer min:0 max:26214400", "scf_config": "true", "full_path": "tmm.proxyssl.cachesize"}, {"name": "tmm.resolv.cachesize", "default": "8192", "value": "8192", "value_range": "unsigned integer min:0 max:131072", "scf_config": "false", "full_path": "tmm.resolv.cachesize"}, {"name": "tmm.resolv.retry", "default": "3", "value": "3", "value_range": "unsigned integer min:0 max:5", "scf_config": "false", "full_path": "tmm.resolv.retry"}, {"name": "tmm.resolv.timeout", "default": "5", "value": "5", "value_range": "unsigned integer min:1 max:5", "scf_config": "false", "full_path": "tmm.resolv.timeout"}, {"name": "tmm.returnmemory", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.returnmemory"}, {"name": "tmm.sctp.program_forwarding_flows", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "tmm.sctp.program_forwarding_flows"}, {"name": "tmm.sctp.redirect_packets", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "tmm.sctp.redirect_packets"}, {"name": "tmm.sessiondb.binlimit.asm.sessiondp", "default": "300000", "value": "300000", "value_range": "unsigned integer min:0 max:500000", "scf_config": "true", "full_path": "tmm.sessiondb.binlimit.asm.sessiondp"}, {"name": "tmm.sessiondb.binlimit.asm.sessionsw", "default": "500000", "value": "500000", "value_range": "unsigned integer min:0 max:800000", "scf_config": "true", "full_path": "tmm.sessiondb.binlimit.asm.sessionsw"}, {"name": "tmm.sessiondb.binlimit.fps.user", "default": "300000", "value": "300000", "value_range": "unsigned integer min:0 max:500000", "scf_config": "true", "full_path": "tmm.sessiondb.binlimit.fps.user"}, {"name": "tmm.sessiondb.match_ha_unit", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.sessiondb.match_ha_unit"}, {"name": "tmm.ssl.alwaysstaple", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.ssl.alwaysstaple"}, {"name": "tmm.ssl.cachesize", "default": "262144", "value": "262144", "value_range": "unsigned integer min:262144 max:4194304", "scf_config": "true", "full_path": "tmm.ssl.cachesize"}, {"name": "tmm.ssl.certlifespaninhours", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.ssl.certlifespaninhours"}, {"name": "tmm.ssl.closerevoked", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.ssl.closerevoked"}, {"name": "tmm.ssl.cn.shunt", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.ssl.cn.shunt"}, {"name": "tmm.ssl.dtlsantrplwinsize", "default": "64", "value": "64", "value_range": "unsigned integer min:32 max:64", "scf_config": "true", "full_path": "tmm.ssl.dtlsantrplwinsize"}, {"name": "tmm.ssl.dtlsmaxcrs", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.ssl.dtlsmaxcrs"}, {"name": "tmm.ssl.dtlsqueuesize", "default": "127", "value": "127", "value_range": "unsigned integer min:7 max:65535", "scf_config": "true", "full_path": "tmm.ssl.dtlsqueuesize"}, {"name": "tmm.ssl.dtlsrxhsrec", "default": "70", "value": "70", "value_range": "unsigned integer min:1 max:150", "scf_config": "true", "full_path": "tmm.ssl.dtlsrxhsrec"}, {"name": "tmm.ssl.extmsenabled", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "tmm.ssl.extmsenabled"}, {"name": "tmm.ssl.loggingcreatedcerts", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.ssl.loggingcreatedcerts"}, {"name": "tmm.ssl.maxactivehandshakes", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.ssl.maxactivehandshakes"}, {"name": "tmm.ssl.maxaggregaterenegotiationperminute", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmm.ssl.maxaggregaterenegotiationperminute"}, {"name": "tmm.ssl.maxhandshakesize", "default": "32768", "value": "32768", "value_range": "unsigned integer min:32768 max:2091752", "scf_config": "true", "full_path": "tmm.ssl.maxhandshakesize"}, {"name": "tmm.ssl.servercert_softval", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.ssl.servercert_softval"}, {"name": "tmm.sslsni.bucketcount", "default": "64", "value": "64", "value_range": "unsigned integer min:1 max:65535", "scf_config": "true", "full_path": "tmm.sslsni.bucketcount"}, {"name": "tmm.sslsnicert.bucketcount", "default": "64", "value": "64", "value_range": "unsigned integer min:1 max:65535", "scf_config": "true", "full_path": "tmm.sslsnicert.bucketcount"}, {"name": "tmm.switchboard.rxbusy", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.switchboard.rxbusy"}, {"name": "tmm.tcl.rule.aborted.log.ratio", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "false", "full_path": "tmm.tcl.rule.aborted.log.ratio"}, {"name": "tmm.threads", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:64", "scf_config": "true", "full_path": "tmm.threads"}, {"name": "tmm.timer.maxusecperpoll", "default": "250", "value": "250", "value_range": "unsigned integer min:50 max:100000", "scf_config": "true", "full_path": "tmm.timer.maxusecperpoll"}, {"name": "tmm.umem_largeslab_threshold", "default": "33", "value": "33", "value_range": "unsigned integer min:0 max:100", "scf_config": "false", "full_path": "tmm.umem_largeslab_threshold"}, {"name": "tmm.umem_reap_aggress", "default": "3", "value": "3", "value_range": "unsigned integer min:1 max:100", "scf_config": "false", "full_path": "tmm.umem_reap_aggress"}, {"name": "tmm.umem_reap_aggrlevel", "default": "80", "value": "80", "value_range": "unsigned integer min:70 max:90", "scf_config": "false", "full_path": "tmm.umem_reap_aggrlevel"}, {"name": "tmm.urlcat.cloud.cache.bucket.maxelement", "default": "256", "value": "256", "value_range": "unsigned integer min:1 max:65536", "scf_config": "true", "full_path": "tmm.urlcat.cloud.cache.bucket.maxelement"}, {"name": "tmm.urlcat.cloud.cache.maxsize", "default": "131072", "value": "131072", "value_range": "unsigned integer min:65536 max:524288", "scf_config": "true", "full_path": "tmm.urlcat.cloud.cache.maxsize"}, {"name": "tmm.urlcat.cloud.cache.reset", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "tmm.urlcat.cloud.cache.reset"}, {"name": "tmm.urlcat.log.level", "default": "Warning", "value": "Warning", "value_range": "Debug Informational Notice Warning", "scf_config": "true", "full_path": "tmm.urlcat.log.level"}, {"name": "tmm.validate", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.validate"}, {"name": "tmm.verbose", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.verbose"}, {"name": "tmm.verbosecmp", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.verbosecmp"}, {"name": "tmm.verbosemcpmessages", "default": "disable", "value": "disable", "value_range": "all disable incoming outgoing", "scf_config": "false", "full_path": "tmm.verbosemcpmessages"}, {"name": "tmm.vlantxfilter", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.vlantxfilter"}, {"name": "tmm.wlite", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.wlite"}, {"name": "tmm.wlite.pinning", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmm.wlite.pinning"}, {"name": "tmplugin.scheduler", "default": "poll", "value": "poll", "value_range": "hrsleep poll rtc usleep", "scf_config": "false", "full_path": "tmplugin.scheduler"}, {"name": "tmplugin.splitplanes.nice", "default": "0", "value": "0", "value_range": "integer min:-20 max:19", "scf_config": "false", "full_path": "tmplugin.splitplanes.nice"}, {"name": "tmrouted.gracefulrestartdelay", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmrouted.gracefulrestartdelay"}, {"name": "tmrouted.netlinkcmdidletimeout", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmrouted.netlinkcmdidletimeout"}, {"name": "tmrouted.netlinklistenidletimeout", "default": "5", "value": "5", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmrouted.netlinklistenidletimeout"}, {"name": "tmrouted.rhifailoverdelay", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "tmrouted.rhifailoverdelay"}, {"name": "tmrouted.tmos.routing", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "tmrouted.tmos.routing"}, {"name": "tmrouted.tmos.routing.status", "default": "none", "value": "none", "value_range": "in-progress none sync-failure sync-success", "scf_config": "false", "full_path": "tmrouted.tmos.routing.status"}, {"name": "tmui.system.setup.network.canconfigureexternal", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "tmui.system.setup.network.canconfigureexternal"}, {"name": "tmui.system.setup.network.canconfigureha", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "tmui.system.setup.network.canconfigureha"}, {"name": "tmui.system.setup.network.canconfigureinternal", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "tmui.system.setup.network.canconfigureinternal"}, {"name": "tmui.system.setup.network.canconfiguretrust", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "tmui.system.setup.network.canconfiguretrust"}, {"name": "tmui.system.setup.network.configsync.choice", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "tmui.system.setup.network.configsync.choice"}, {"name": "tmui.system.setup.network.failover.choice", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "tmui.system.setup.network.failover.choice"}, {"name": "tmui.system.setup.network.failover.method.choice", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "tmui.system.setup.network.failover.method.choice"}, {"name": "tmui.system.setup.network.vlan.external", "default": "external", "value": "external", "value_range": "string", "scf_config": "false", "full_path": "tmui.system.setup.network.vlan.external"}, {"name": "tmui.system.setup.network.vlan.ha", "default": "HA", "value": "HA", "value_range": "string", "scf_config": "false", "full_path": "tmui.system.setup.network.vlan.ha"}, {"name": "tmui.system.setup.network.vlan.internal", "default": "internal", "value": "internal", "value_range": "string", "scf_config": "false", "full_path": "tmui.system.setup.network.vlan.internal"}, {"name": "total.sandbox.size", "default": "512", "value": "512", "value_range": "unsigned integer min:64 max:1024", "scf_config": "true", "full_path": "total.sandbox.size"}, {"name": "trunk.cluster.distribution", "default": "optimized", "value": "optimized", "value_range": "balanced optimized", "scf_config": "true", "full_path": "trunk.cluster.distribution"}, {"name": "trunk.cluster.dlfflushpkts", "default": "100000", "value": "100000", "value_range": "unsigned integer min:0 max:100000", "scf_config": "true", "full_path": "trunk.cluster.dlfflushpkts"}, {"name": "trunk.cluster.dlfflushpoll", "default": "2000000", "value": "2000000", "value_range": "unsigned integer min:0 max:90000000", "scf_config": "true", "full_path": "trunk.cluster.dlfflushpoll"}, {"name": "trunk.internal.distribution", "default": "srcdestip", "value": "srcdestip", "value_range": "destmac srcdestip srcdestmac", "scf_config": "true", "full_path": "trunk.internal.distribution"}, {"name": "trunk.internal.ffp", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "trunk.internal.ffp"}, {"name": "trust.configupdatedone", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "trust.configupdatedone"}, {"name": "trust.icontrolport", "default": "443", "value": "8443", "value_range": "integer min:1 max:65535", "scf_config": "false", "full_path": "trust.icontrolport"}, {"name": "trust.suspendtime", "default": "3", "value": "3", "value_range": "integer min:1 max:60", "scf_config": "false", "full_path": "trust.suspendtime"}, {"name": "tsconfd.loglevel", "default": "none", "value": "none", "value_range": "debug none", "scf_config": "false", "full_path": "tsconfd.loglevel"}, {"name": "ucs.asm.traffic_data.load", "default": "matching", "value": "matching", "value_range": "always matching never", "scf_config": "true", "full_path": "ucs.asm.traffic_data.load"}, {"name": "ucs.asm.traffic_data.save", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "ucs.asm.traffic_data.save"}, {"name": "ucs.loadtime", "default": "0", "value": "0", "value_range": "integer min:0 max:2147483647", "scf_config": "false", "full_path": "ucs.loadtime"}, {"name": "ucs.platformcheck", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "ucs.platformcheck"}, {"name": "ucs.resettrust", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "ucs.resettrust"}, {"name": "udp.hash", "default": "port", "value": "port", "value_range": "ipport ipport_stateless port", "scf_config": "true", "full_path": "udp.hash"}, {"name": "ui.advancedsearch", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "ui.advancedsearch"}, {"name": "ui.advisory.color", "default": "green", "value": "green", "value_range": "blue green orange red", "scf_config": "false", "full_path": "ui.advisory.color"}, {"name": "ui.advisory.enabled", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "ui.advisory.enabled"}, {"name": "ui.advisory.text", "default": "This is a system advisory message.", "value": "This is a system advisory message.", "value_range": "string", "scf_config": "false", "full_path": "ui.advisory.text"}, {"name": "ui.is24hour", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "ui.is24hour"}, {"name": "ui.logaccess.accelerationpolicyeditor", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ui.logaccess.accelerationpolicyeditor"}, {"name": "ui.logaccess.applicationeditor", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ui.logaccess.applicationeditor"}, {"name": "ui.logaccess.applicationsecurity********", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ui.logaccess.applicationsecurity********"}, {"name": "ui.logaccess.applicationsecurityeditor", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ui.logaccess.applicationsecurityeditor"}, {"name": "ui.logaccess.certificatemanager", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ui.logaccess.certificatemanager"}, {"name": "ui.logaccess.firewallmanager", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ui.logaccess.firewallmanager"}, {"name": "ui.logaccess.fraudprotectionmanager", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ui.logaccess.fraudprotectionmanager"}, {"name": "ui.logaccess.guest", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ui.logaccess.guest"}, {"name": "ui.logaccess.irulemanager", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ui.logaccess.irulemanager"}, {"name": "ui.logaccess.manager", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ui.logaccess.manager"}, {"name": "ui.logaccess.operator", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ui.logaccess.operator"}, {"name": "ui.logaccess.usermanager", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "ui.logaccess.usermanager"}, {"name": "ui.statistics.modulestatistics.dnsdelivery.persistencerecords", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "ui.statistics.modulestatistics.dnsdelivery.persistencerecords"}, {"name": "ui.statistics.modulestatistics.dnsgslb.persistencerecords", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "ui.statistics.modulestatistics.dnsgslb.persistencerecords"}, {"name": "ui.statistics.modulestatistics.localtraffic.persistencerecords", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "ui.statistics.modulestatistics.localtraffic.persistencerecords"}, {"name": "ui.system.preferences.advancedselection", "default": "basic", "value": "basic", "value_range": "advanced basic", "scf_config": "false", "full_path": "ui.system.preferences.advancedselection"}, {"name": "ui.system.preferences.displayhostnameswhenpossible", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "ui.system.preferences.displayhostnameswhenpossible"}, {"name": "ui.system.preferences.recordsperscreen", "default": "10", "value": "10", "value_range": "integer min:1 max:1000", "scf_config": "false", "full_path": "ui.system.preferences.recordsperscreen"}, {"name": "ui.system.preferences.screenrefreshinterval", "default": "-1", "value": "-1", "value_range": "-1 10 180 20 30 300 60", "scf_config": "false", "full_path": "ui.system.preferences.screenrefreshinterval"}, {"name": "ui.system.preferences.startscreen", "default": "welcome", "value": "welcome", "value_range": "device_list em_custom_lists em_device_list em_device_monitor_list em_task_list guest_list network_map performance statistics traffic virtual_servers welcome wide_ips", "scf_config": "false", "full_path": "ui.system.preferences.startscreen"}, {"name": "ui.system.preferences.statisticsformat", "default": "normalized", "value": "normalized", "value_range": "normalized unformatted", "scf_config": "false", "full_path": "ui.system.preferences.statisticsformat"}, {"name": "ui.users.redirectsuperuserstoauthsummary", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "ui.users.redirectsuperuserstoauthsummary"}, {"name": "ui.wom.quickstart", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "ui.wom.quickstart"}, {"name": "unix.config.ntp.replace.clusterhosts", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "unix.config.ntp.replace.clusterhosts"}, {"name": "upgradeselector.package", "default": "upgrade-selector", "value": "upgrade-selector", "value_range": "string", "scf_config": "true", "full_path": "upgradeselector.package"}, {"name": "upgradeselector.url", "default": "ftp://update.f5.com/", "value": "ftp://update.f5.com/", "value_range": "string", "scf_config": "true", "full_path": "upgradeselector.url"}, {"name": "urldb.masterdb.index.building", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "urldb.masterdb.index.building"}, {"name": "urldb.rtsudb.index.building", "default": "false", "value": "false", "value_range": "false true", "scf_config": "true", "full_path": "urldb.rtsudb.index.building"}, {"name": "user.acceptedeula", "default": "none", "value": "none", "value_range": "internal non-production none production", "scf_config": "false", "full_path": "user.acceptedeula"}, {"name": "users.defaultpartition", "default": "[All]", "value": "[All]", "value_range": "string", "scf_config": "false", "full_path": "users.defaultpartition"}, {"name": "users.defaultrole", "default": "900", "value": "900", "value_range": "integer min:0 max:1000", "scf_config": "false", "full_path": "users.defaultrole"}, {"name": "users.remoteconsoleaccess", "default": "disable", "value": "disable", "value_range": "disable tmsh", "scf_config": "false", "full_path": "users.remoteconsoleaccess"}, {"name": "users.strictpasswords", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "users.strictpasswords"}, {"name": "vcmp.concurrent_vdisk_accesses", "default": "1", "value": "1", "value_range": "unsigned integer min:1 max:10000", "scf_config": "false", "full_path": "vcmp.concurrent_vdisk_accesses"}, {"name": "vcmp.guest.console", "default": "telnet", "value": "telnet", "value_range": "file telnet", "scf_config": "true", "full_path": "vcmp.guest.console"}, {"name": "vcmp.guest.console.logging", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "vcmp.guest.console.logging"}, {"name": "vcmp.guest.tmstat.tables.allowed", "default": "default", "value": "default", "value_range": "string", "scf_config": "true", "full_path": "vcmp.guest.tmstat.tables.allowed"}, {"name": "vcmp.installer.use_vdisk_templates", "default": "default", "value": "default", "value_range": "default disabled enabled", "scf_config": "false", "full_path": "vcmp.installer.use_vdisk_templates"}, {"name": "vcmp.mgmt.allow_host_guest_communication", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "vcmp.mgmt.allow_host_guest_communication"}, {"name": "vcmp.mgmt.allow_tagged_traffic", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "vcmp.mgmt.allow_tagged_traffic"}, {"name": "vcmp.mgmt.allow_vlan_1_tagged_traffic", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "vcmp.mgmt.allow_vlan_1_tagged_traffic"}, {"name": "vcmp.mgmt.enable_hnet", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "vcmp.mgmt.enable_hnet"}, {"name": "vcmp.mgmt.guest_source_ip_checks", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "vcmp.mgmt.guest_source_ip_checks"}, {"name": "vcmp.mgmt.guest_source_mac_checks", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "vcmp.mgmt.guest_source_mac_checks"}, {"name": "vcmp.scheduler.allow_splitplanes", "default": "true", "value": "true", "value_range": "false true", "scf_config": "false", "full_path": "vcmp.scheduler.allow_splitplanes"}, {"name": "vcmp.scheduler.hrtimer", "default": "false", "value": "false", "value_range": "false true", "scf_config": "false", "full_path": "vcmp.scheduler.hrtimer"}, {"name": "vcmp.scheduler.nice_usecs", "default": "120", "value": "120", "value_range": "unsigned integer min:0 max:1000", "scf_config": "false", "full_path": "vcmp.scheduler.nice_usecs"}, {"name": "vcmp.scheduler.rt_usecs", "default": "880", "value": "880", "value_range": "unsigned integer min:0 max:1000", "scf_config": "false", "full_path": "vcmp.scheduler.rt_usecs"}, {"name": "vcmp.timeout.installing", "default": "1000", "value": "1000", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "vcmp.timeout.installing"}, {"name": "vcmp.timeout.migrating", "default": "2700", "value": "2700", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "vcmp.timeout.migrating"}, {"name": "vcmp.timeout.starting", "default": "900", "value": "900", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "vcmp.timeout.starting"}, {"name": "vcmp.timeout.stopping", "default": "180", "value": "180", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "vcmp.timeout.stopping"}, {"name": "vcmp.timeout.watchdog", "default": "20", "value": "20", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "true", "full_path": "vcmp.timeout.watchdog"}, {"name": "vcmp.vdisk.new_image_size", "default": "150", "value": "150", "value_range": "unsigned integer min:15 max:500", "scf_config": "true", "full_path": "vcmp.vdisk.new_image_size"}, {"name": "vcmp.vdisk.size.estimate", "default": "10", "value": "10", "value_range": "unsigned integer min:4 max:30", "scf_config": "true", "full_path": "vcmp.vdisk.size.estimate"}, {"name": "vcmpd.fake_qemu", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "vcmpd.fake_qemu"}, {"name": "vcmpd.fake_qemu.args", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "vcmpd.fake_qemu.args"}, {"name": "vendor.knowledgebase.a", "default": "", "value": "Ask F5 Web Site", "value_range": "string", "scf_config": "false", "full_path": "vendor.knowledgebase.a"}, {"name": "vendor.knowledgebase.a.href", "default": "", "value": "http://tech.f5.com/", "value_range": "string", "scf_config": "false", "full_path": "vendor.knowledgebase.a.href"}, {"name": "vendor.licservguiuri", "default": "", "value": "/F5/index.jsp", "value_range": "string", "scf_config": "false", "full_path": "vendor.licservguiuri"}, {"name": "vendor.licservhost", "default": "", "value": "activate.F5.com", "value_range": "string", "scf_config": "false", "full_path": "vendor.licservhost"}, {"name": "vendor.licservprotocol", "default": "", "value": "https", "value_range": "string", "scf_config": "false", "full_path": "vendor.licservprotocol"}, {"name": "vendor.licservuri", "default": "", "value": "/F5/services/a", "value_range": "string", "scf_config": "false", "full_path": "vendor.licservuri"}, {"name": "vendor.supportemail", "default": "", "value": "support@f5.com", "value_range": "string", "scf_config": "false", "full_path": "vendor.supportemail"}, {"name": "vendor.vendorcommonname", "default": "", "value": "F5 Networks", "value_range": "string", "scf_config": "false", "full_path": "vendor.vendorcommonname"}, {"name": "vendor.vendorfullname", "default": "", "value": "F5 Networks, Inc.", "value_range": "string", "scf_config": "false", "full_path": "vendor.vendorfullname"}, {"name": "vendor.wwwurl", "default": "", "value": "http://www.f5.com", "value_range": "string", "scf_config": "false", "full_path": "vendor.wwwurl"}, {"name": "version.basebuild", "default": "", "value": "0.0.6", "value_range": "string", "scf_config": "false", "full_path": "version.basebuild"}, {"name": "version.build", "default": "", "value": "0.0.6", "value_range": "string", "scf_config": "false", "full_path": "version.build"}, {"name": "version.built", "default": "", "value": "180313201042", "value_range": "string", "scf_config": "false", "full_path": "version.built"}, {"name": "version.changelist", "default": "", "value": "2516369", "value_range": "string", "scf_config": "false", "full_path": "version.changelist"}, {"name": "version.date", "default": "", "value": "Tue Mar 13 20:10:42 PDT 2018", "value_range": "string", "scf_config": "false", "full_path": "version.date"}, {"name": "version.edition", "default": "", "value": "Point Release 4", "value_range": "string", "scf_config": "false", "full_path": "version.edition"}, {"name": "version.jobid", "default": "", "value": "987835", "value_range": "string", "scf_config": "false", "full_path": "version.jobid"}, {"name": "version.product", "default": "", "value": "BIG-IP", "value_range": "string", "scf_config": "false", "full_path": "version.product"}, {"name": "version.sequence", "default": "", "value": "13.1.0.4-0.0.6.0", "value_range": "string", "scf_config": "false", "full_path": "version.sequence"}, {"name": "version.version", "default": "", "value": "13.1.0.4", "value_range": "string", "scf_config": "false", "full_path": "version.version"}, {"name": "vlan.backplane.id", "default": "4095", "value": "4095", "value_range": "unsigned integer min:0 max:4095", "scf_config": "false", "full_path": "vlan.backplane.id"}, {"name": "vlan.backplane.mtu", "default": "1640", "value": "1640", "value_range": "unsigned integer min:1582 max:9216", "scf_config": "false", "full_path": "vlan.backplane.mtu"}, {"name": "vlan.fdb.timeout", "default": "300", "value": "300", "value_range": "unsigned integer min:0 max:1048575", "scf_config": "false", "full_path": "vlan.fdb.timeout"}, {"name": "vlan.macassignment", "default": "unique", "value": "vmw-compat", "value_range": "global unique vmw-compat", "scf_config": "false", "full_path": "vlan.macassignment"}, {"name": "vlan.stpassignment", "default": "auto", "value": "auto", "value_range": "auto user", "scf_config": "true", "full_path": "vlan.stpassignment"}, {"name": "vlangroup.flow.allocate", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "vlangroup.flow.allocate"}, {"name": "vlangroup.forwarding.override", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "true", "full_path": "vlangroup.forwarding.override"}, {"name": "vpn.buffervolumekb", "default": "64", "value": "64", "value_range": "unsigned integer min:0 max:4096", "scf_config": "false", "full_path": "vpn.buffervolumekb"}, {"name": "vpn.logstats", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "true", "full_path": "vpn.logstats"}, {"name": "vpn.packetdropperiod", "default": "5", "value": "5", "value_range": "integer min:0 max:100", "scf_config": "false", "full_path": "vpn.packetdropperiod"}, {"name": "wam.cache.disk.status", "default": "active", "value": "active", "value_range": "active disabled legacy restricted unavailable", "scf_config": "false", "full_path": "wam.cache.disk.status"}, {"name": "wam.cache.entities.dump", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "false", "full_path": "wam.cache.entities.dump"}, {"name": "wam.cache.entities.dump.rate", "default": "1000", "value": "1000", "value_range": "integer min:1 max:100000", "scf_config": "false", "full_path": "wam.cache.entities.dump.rate"}, {"name": "wam.cache.entities.dump.regex", "default": ".", "value": ".", "value_range": "string", "scf_config": "false", "full_path": "wam.cache.entities.dump.regex"}, {"name": "wam.cache.range.maxranges", "default": "8", "value": "8", "value_range": "unsigned integer min:8 max:32", "scf_config": "false", "full_path": "wam.cache.range.maxranges"}, {"name": "wam.cache.requestqueue.maxqueuelen", "default": "0", "value": "0", "value_range": "integer min:0 max:65535", "scf_config": "false", "full_path": "wam.cache.requestqueue.maxqueuelen"}, {"name": "wam.cache.requestqueue.maxwait", "default": "180000", "value": "180000", "value_range": "integer min:0 max:300000", "scf_config": "false", "full_path": "wam.cache.requestqueue.maxwait"}, {"name": "wam.cache.smallobject.threshold", "default": "-1", "value": "-1", "value_range": "integer min:-1 max:16384", "scf_config": "false", "full_path": "wam.cache.smallobject.threshold"}, {"name": "wam.maxdomainlistsize", "default": "30", "value": "30", "value_range": "integer min:0 max:65535", "scf_config": "false", "full_path": "wam.maxdomainlistsize"}, {"name": "wam.use.also.if.none.match", "default": "disable", "value": "disable", "value_range": "disable enable", "scf_config": "false", "full_path": "wam.use.also.if.none.match"}, {"name": "watchdog.state", "default": "enable", "value": "enable", "value_range": "disable enable", "scf_config": "false", "full_path": "watchdog.state"}, {"name": "wccp.loglevel", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:7", "scf_config": "false", "full_path": "wccp.loglevel"}, {"name": "webserver.cert.0.organizationname", "default": "My Company", "value": "My Company", "value_range": "string", "scf_config": "true", "full_path": "webserver.cert.0.organizationname"}, {"name": "webserver.cert.countryname", "default": "US", "value": "US", "value_range": "string", "scf_config": "true", "full_path": "webserver.cert.countryname"}, {"name": "webserver.cert.localityname", "default": "Seattle", "value": "Seattle", "value_range": "string", "scf_config": "true", "full_path": "webserver.cert.localityname"}, {"name": "webserver.cert.organizationalunitname", "default": "_undef_", "value": "_undef_", "value_range": "string", "scf_config": "true", "full_path": "webserver.cert.organizationalunitname"}, {"name": "webserver.cert.stateorprovincename", "default": "WA", "value": "WA", "value_range": "string", "scf_config": "true", "full_path": "webserver.cert.stateorprovincename"}, {"name": "webserver.prefix", "default": "http", "value": "http", "value_range": "string", "scf_config": "true", "full_path": "webserver.prefix"}, {"name": "woc.remembered.data.encyption", "default": "false", "value": "false", "value_range": "string", "scf_config": "true", "full_path": "woc.remembered.data.encyption"}, {"name": "woc.remembered.lan.vlans", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "woc.remembered.lan.vlans"}, {"name": "woc.remembered.wan.vlans", "default": "<null>", "value": "<null>", "value_range": "string", "scf_config": "true", "full_path": "woc.remembered.wan.vlans"}, {"name": "wocd.control.timeout", "default": "10", "value": "10", "value_range": "unsigned integer min:5 max:255", "scf_config": "true", "full_path": "wocd.control.timeout"}, {"name": "wocd.log.level", "default": "info", "value": "info", "value_range": "alert critical debug emerg error info none notice verbose warn", "scf_config": "true", "full_path": "wocd.log.level"}, {"name": "wocplugin.cifs.bdp", "default": "300", "value": "300", "value_range": "unsigned integer min:0 max:1200", "scf_config": "false", "full_path": "wocplugin.cifs.bdp"}, {"name": "wocplugin.cifs.loglevel", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:7", "scf_config": "false", "full_path": "wocplugin.cifs.loglevel"}, {"name": "wocplugin.cifs.lowbdpcutoff", "default": "30", "value": "30", "value_range": "unsigned integer min:0 max:1200", "scf_config": "false", "full_path": "wocplugin.cifs.lowbdpcutoff"}, {"name": "wocplugin.cifs.minreadsize", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:57344", "scf_config": "false", "full_path": "wocplugin.cifs.minreadsize"}, {"name": "wocplugin.loglevel", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:7", "scf_config": "false", "full_path": "wocplugin.loglevel"}, {"name": "wocplugin.mapi.loglevel", "default": "1", "value": "1", "value_range": "unsigned integer min:0 max:7", "scf_config": "false", "full_path": "wocplugin.mapi.loglevel"}, {"name": "wom.discovered.autosave", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "wom.discovered.autosave"}, {"name": "zxfrd.dbloadstamp", "default": "0", "value": "0", "value_range": "unsigned integer min:0 max:4294967295", "scf_config": "false", "full_path": "zxfrd.dbloadstamp"}, {"name": "zxfrd.dependency.named", "default": "true", "value": "true", "value_range": "false true", "scf_config": "true", "full_path": "zxfrd.dependency.named"}], "tcp_monitors": [{"adaptive_sampling_timespan": 300, "interval": 5, "name": "tcp", "adaptive": "no", "destination": "*:*", "adaptive_limit": 200, "timeout": 16, "reverse": "no", "time_until_up": 0, "manual_resume": "no", "adaptive_divergence_type": "relative", "adaptive_divergence_value": 25, "up_interval": 0, "transparent": "no", "full_path": "/Common/tcp", "ip_dscp": 0}], "users": [{"partition_access": [{"role": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER", "name": "all-partitions"}], "name": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER", "full_path": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER", "description": "Admin User"}], "gtm_naptr_pools": [], "gateway_icmp_monitors": [{"adaptive_sampling_timespan": 300, "interval": 5, "name": "gateway_icmp", "adaptive": "no", "destination": "*:*", "adaptive_limit": 200, "timeout": 16, "time_until_up": 0, "manual_resume": "no", "adaptive_divergence_type": "relative", "adaptive_divergence_value": 25, "up_interval": 0, "transparent": "no", "full_path": "/Common/gateway_icmp"}], "provision_info": [{"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "afm", "name": "afm"}, {"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "am", "name": "am"}, {"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "apm", "name": "apm"}, {"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "asm", "name": "asm"}, {"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "avr", "name": "avr"}, {"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "dos", "name": "dos"}, {"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "fps", "name": "fps"}, {"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "gtm", "name": "gtm"}, {"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "ilx", "name": "ilx"}, {"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "lc", "name": "lc"}, {"disk_ratio": 0, "level": "nominal", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "ltm", "name": "ltm"}, {"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "pem", "name": "pem"}, {"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "swg", "name": "swg"}, {"disk_ratio": 0, "level": "none", "cpu_ratio": 0, "memory_ratio": 0, "full_path": "urldb", "name": "urldb"}], "tcp_profiles": [{"mptcp_checksum": "no", "receive_window": 65535, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "yes", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "no", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 3, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "no", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 60, "parent": "/Common/tcp-legacy", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "yes", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 3, "multipath_tcp": "no", "proxy_buffer_high": 49152, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "no", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "apm-forwarding-client-tcp", "selective_nack": "no", "reset_on_timeout": "yes", "proxy_buffer_low": 32768, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 131072, "proxy_options": "yes", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/apm-forwarding-client-tcp", "early_retransmit": "no"}, {"mptcp_checksum": "no", "receive_window": 65535, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "yes", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "no", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 3, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "no", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 60, "parent": "/Common/tcp-legacy", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "yes", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 3, "multipath_tcp": "no", "proxy_buffer_high": 49152, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "no", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "apm-forwarding-server-tcp", "selective_nack": "no", "reset_on_timeout": "yes", "proxy_buffer_low": 32768, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 131072, "proxy_options": "yes", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/apm-forwarding-server-tcp", "early_retransmit": "no"}, {"mptcp_checksum": "no", "receive_window": 65535, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 200, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "yes", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "yes", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "yes", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 16, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "yes", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 1800, "parent": "/Common/tcp", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 16, "multipath_tcp": "no", "proxy_buffer_high": 65535, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "yes", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "f5-tcp-lan", "selective_nack": "no", "reset_on_timeout": "yes", "proxy_buffer_low": 32768, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 65535, "proxy_options": "no", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/f5-tcp-lan", "early_retransmit": "yes"}, {"mptcp_checksum": "no", "receive_window": 131072, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "yes", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "yes", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "yes", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 16, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "yes", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 1800, "parent": "/Common/tcp", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 10, "multipath_tcp": "no", "proxy_buffer_high": 262144, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "yes", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "f5-tcp-mobile", "selective_nack": "no", "reset_on_timeout": "yes", "proxy_buffer_low": 196608, "timestamps": "yes", "congestion_control": "woodside", "send_buffer": 262144, "proxy_options": "no", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/f5-tcp-mobile", "early_retransmit": "yes"}, {"mptcp_checksum": "no", "receive_window": 131072, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "yes", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "yes", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "auto", "time_to_live": "proxy", "delayed_acks": "yes", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "yes", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "yes", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "yes", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "yes", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 16, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "yes", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 1800, "parent": "/Common/tcp", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 16, "multipath_tcp": "no", "proxy_buffer_high": 262144, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "yes", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "f5-tcp-progressive", "selective_nack": "no", "reset_on_timeout": "yes", "proxy_buffer_low": 196608, "timestamps": "yes", "congestion_control": "woodside", "send_buffer": 262144, "proxy_options": "no", "deferred_accept": "no", "auto_proxy_buffer": "yes", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/f5-tcp-progressive", "early_retransmit": "yes"}, {"mptcp_checksum": "no", "receive_window": 131072, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 500, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "no", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "yes", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "yes", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 10, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "yes", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 1800, "parent": "/Common/tcp", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 10, "multipath_tcp": "no", "proxy_buffer_high": 262144, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "yes", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "f5-tcp-wan", "selective_nack": "no", "reset_on_timeout": "yes", "proxy_buffer_low": 196608, "timestamps": "yes", "congestion_control": "woodside", "send_buffer": 262144, "proxy_options": "no", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/f5-tcp-wan", "early_retransmit": "yes"}, {"mptcp_checksum": "no", "receive_window": 131072, "syn_cookie_enable": "no", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "no", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "yes", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 16, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "yes", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 1800, "parent": "/Common/tcp-legacy", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "yes", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "no", "initial_receive_window_size": 3, "multipath_tcp": "yes", "proxy_buffer_high": 131072, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "yes", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "mptcp-mobile-optimized", "selective_nack": "no", "reset_on_timeout": "no", "proxy_buffer_low": 131072, "timestamps": "yes", "congestion_control": "illinois", "send_buffer": 262144, "proxy_options": "yes", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/mptcp-mobile-optimized", "early_retransmit": "no"}, {"mptcp_checksum": "no", "receive_window": 458752, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 8, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "no", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 600, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "no", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 3, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "no", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 10000, "keep_alive_interval": 1800, "parent": "/Common/tcp-wan-optimized", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "yes", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 3, "multipath_tcp": "no", "proxy_buffer_high": 196608, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 300000, "slow_start": "no", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "splitsession-default-tcp", "selective_nack": "yes", "reset_on_timeout": "yes", "proxy_buffer_low": 131072, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 458752, "proxy_options": "yes", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/splitsession-default-tcp", "early_retransmit": "no"}, {"mptcp_checksum": "no", "receive_window": 65535, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "yes", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "no", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 3, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "yes", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 1800, "parent": "none", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "no", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 3, "multipath_tcp": "no", "proxy_buffer_high": 49152, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "yes", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "tcp", "selective_nack": "no", "reset_on_timeout": "yes", "proxy_buffer_low": 32768, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 65535, "proxy_options": "no", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/tcp", "early_retransmit": "yes"}, {"mptcp_checksum": "no", "receive_window": 65535, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "yes", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "no", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 3, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "no", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 1800, "parent": "/Common/tcp-legacy", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "no", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 3, "multipath_tcp": "no", "proxy_buffer_high": 131072, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "no", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "tcp-lan-optimized", "selective_nack": "no", "reset_on_timeout": "yes", "proxy_buffer_low": 98304, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 65535, "proxy_options": "yes", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/tcp-lan-optimized", "early_retransmit": "no"}, {"mptcp_checksum": "no", "receive_window": 65535, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "yes", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "no", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 3, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "no", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 1800, "parent": "/Common/tcp", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "no", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 3, "multipath_tcp": "no", "proxy_buffer_high": 49152, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "yes", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "tcp-legacy", "selective_nack": "no", "reset_on_timeout": "yes", "proxy_buffer_low": 32768, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 65535, "proxy_options": "yes", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/tcp-legacy", "early_retransmit": "no"}, {"mptcp_checksum": "no", "receive_window": 131072, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "no", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "no", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 16, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "yes", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 1800, "parent": "/Common/tcp-legacy", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "yes", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "no", "initial_receive_window_size": 3, "multipath_tcp": "no", "proxy_buffer_high": 131072, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "yes", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "tcp-mobile-optimized", "selective_nack": "no", "reset_on_timeout": "no", "proxy_buffer_low": 131072, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 131072, "proxy_options": "yes", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/tcp-mobile-optimized", "early_retransmit": "no"}, {"mptcp_checksum": "no", "receive_window": 65535, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "yes", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "no", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 3, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "no", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 1800, "parent": "/Common/tcp-legacy", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "yes", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 3, "multipath_tcp": "no", "proxy_buffer_high": 131072, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "yes", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "tcp-wan-optimized", "selective_nack": "no", "reset_on_timeout": "yes", "proxy_buffer_low": 131072, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 65535, "proxy_options": "yes", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/tcp-wan-optimized", "early_retransmit": "no"}, {"mptcp_checksum": "no", "receive_window": 65535, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "yes", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 300, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "no", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 16, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "no", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 1800, "parent": "/Common/tcp-lan-optimized", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "no", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 16, "multipath_tcp": "no", "proxy_buffer_high": 131072, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "yes", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "wam-tcp-lan-optimized", "selective_nack": "no", "reset_on_timeout": "yes", "proxy_buffer_low": 98304, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 65535, "proxy_options": "yes", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/wam-tcp-lan-optimized", "early_retransmit": "no"}, {"mptcp_checksum": "no", "receive_window": 65535, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 8, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "no", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 600, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "no", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 10, "proxy_max_segment": "no", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "no", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 10000, "keep_alive_interval": 1800, "parent": "/Common/tcp-wan-optimized", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "yes", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 3, "multipath_tcp": "no", "proxy_buffer_high": 196608, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 300000, "slow_start": "yes", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "wam-tcp-wan-optimized", "selective_nack": "yes", "reset_on_timeout": "yes", "proxy_buffer_low": 131072, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 458752, "proxy_options": "yes", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/wam-tcp-wan-optimized", "early_retransmit": "no"}, {"mptcp_checksum": "no", "receive_window": 65535, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 0, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "no", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 600, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "no", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 3, "proxy_max_segment": "yes", "congestion_metrics_cache": "no", "ip_tos": "0", "explicit_congestion_notification": "no", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 0, "keep_alive_interval": 1800, "parent": "/Common/tcp-lan-optimized", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "yes", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 3, "multipath_tcp": "no", "proxy_buffer_high": 131072, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 20000, "slow_start": "yes", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "wom-tcp-lan-optimized", "selective_nack": "no", "reset_on_timeout": "yes", "proxy_buffer_low": 98304, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 65535, "proxy_options": "yes", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/wom-tcp-lan-optimized", "early_retransmit": "no"}, {"mptcp_checksum": "no", "receive_window": 458752, "syn_cookie_enable": "yes", "pkt_loss_ignore_burst": 8, "auto_receive_window": "no", "syn_retrans_to_base": 3000, "verified_accept": "no", "enhanced_loss_recovery": "no", "minimum_rto": 1000, "fast_open_cookie_expiration": 21600, "md5_signature": "no", "push_flag": "default", "time_to_live": "proxy", "delayed_acks": "no", "congestion_metrics_cache_timeout": 0, "syn_cookie_white_list": "no", "fin_wait_1": 5, "mptcp_retransmit_min": 1000, "auto_send_buffer": "no", "idle_timeout": 600, "max_syn_retrans": 3, "tail_loss_probe": "no", "dont_fragment_flag": "pmtu", "time_wait_recycle": "yes", "max_segment_size": 1460, "link_qos": "0", "dsack": "no", "fast_open": "no", "rate_pace_max_rate": 0, "retransmit_threshold": 3, "rate_pace": "no", "time_wait": "2000", "mptcp_checksum_verify": "no", "mptcp_idle_timeout": 300, "initial_congestion_window_size": 3, "proxy_max_segment": "yes", "congestion_metrics_cache": "yes", "ip_tos": "0", "explicit_congestion_notification": "no", "mptcp_no_join_dss_ack": "no", "close_wait": 5, "selective_acks": "yes", "delay_window_control": "no", "pkt_loss_ignore_rate": 10000, "keep_alive_interval": 1800, "parent": "/Common/tcp-wan-optimized", "mptcp_fast_join": "no", "mptcp_make_after_break": "no", "max_segment_retrans": 8, "nagle_algorithm": "yes", "time_to_live_v4": 255, "time_to_live_v6": 64, "abc": "yes", "initial_receive_window_size": 3, "multipath_tcp": "no", "proxy_buffer_high": 196608, "mptcp_join_max": 5, "ack_on_push": "yes", "zero_window_timeout": 300000, "slow_start": "no", "mptcp_rto_max": 5, "limited_transmit_recovery": "yes", "name": "wom-tcp-wan-optimized", "selective_nack": "yes", "reset_on_timeout": "yes", "proxy_buffer_low": 131072, "timestamps": "yes", "congestion_control": "high-speed", "send_buffer": 458752, "proxy_options": "yes", "deferred_accept": "no", "auto_proxy_buffer": "no", "fin_wait_2": 300, "mptcp_fallback": "reset", "mptcp_subflow_max": 6, "mptcp_timeout": 3600, "full_path": "/Common/wom-tcp-wan-optimized", "early_retransmit": "no"}], "virtual_servers": [], "http_profiles": [{"via_request": "preserve", "excess_client_headers": "reject", "sflow_poll_interval": 0, "accept_xff": "no", "max_header_size": 32768, "server_agent_name": "BigIP", "hsts_enabled": "no", "response_chunking": "selective", "proxy_mode": "reverse", "onconnect_transformations": "yes", "via_response": "preserve", "insert_x_forwarded_for": "no", "request_chunking": "preserve", "parent": "none", "oversize_server_headers": "reject", "sflow_sampling_rate": 0, "max_requests": 0, "allow_truncated_redirects": "no", "hsts_include_subdomains": "yes", "name": "http", "oversize_client_headers": "reject", "known_methods": ["CONNECT", "DELETE", "GET", "HEAD", "LOCK", "OPTIONS", "POST", "PROPFIND", "PUT", "TRACE", "UNLOCK"], "excess_server_headers": "reject", "unknown_method": "allow", "default_connect_handling": "deny", "lws_max_columns": 80, "redirect_rewrite": "none", "max_header_count": 64, "full_path": "/Common/http"}, {"via_request": "preserve", "excess_client_headers": "reject", "sflow_poll_interval": 0, "accept_xff": "no", "max_header_size": 32768, "server_agent_name": "BigIP", "hsts_enabled": "no", "response_chunking": "selective", "proxy_mode": "explicit", "onconnect_transformations": "yes", "via_response": "preserve", "insert_x_forwarded_for": "no", "request_chunking": "preserve", "parent": "none", "oversize_server_headers": "reject", "sflow_sampling_rate": 0, "max_requests": 0, "allow_truncated_redirects": "no", "hsts_include_subdomains": "yes", "name": "http-explicit", "oversize_client_headers": "reject", "known_methods": ["CONNECT", "DELETE", "GET", "HEAD", "LOCK", "OPTIONS", "POST", "PROPFIND", "PUT", "TRACE", "UNLOCK"], "excess_server_headers": "reject", "unknown_method": "allow", "default_connect_handling": "deny", "lws_max_columns": 80, "redirect_rewrite": "none", "max_header_count": 64, "full_path": "/Common/http-explicit"}, {"via_request": "preserve", "excess_client_headers": "pass-through", "sflow_poll_interval": 0, "accept_xff": "no", "max_header_size": 16384, "server_agent_name": "BigIP", "hsts_enabled": "no", "response_chunking": "selective", "proxy_mode": "transparent", "onconnect_transformations": "yes", "via_response": "preserve", "insert_x_forwarded_for": "no", "request_chunking": "preserve", "parent": "none", "oversize_server_headers": "pass-through", "sflow_sampling_rate": 0, "max_requests": 0, "allow_truncated_redirects": "yes", "hsts_include_subdomains": "yes", "name": "http-transparent", "oversize_client_headers": "pass-through", "known_methods": ["CONNECT", "DELETE", "GET", "HEAD", "LOCK", "OPTIONS", "POST", "PROPFIND", "PUT", "TRACE", "UNLOCK"], "excess_server_headers": "pass-through", "unknown_method": "allow", "default_connect_handling": "deny", "lws_max_columns": 80, "redirect_rewrite": "none", "max_header_count": 32, "full_path": "/Common/http-transparent"}], "vcmp_guests": [], "interfaces": [{"if_index": 48, "name": "1.0", "stp_auto_edge_port": "yes", "sflow_poll_interval": 0, "bundle_speed": "not-supported", "stp_enabled": "yes", "bundle": "not-supported", "mtu": 1500, "enabled": "yes", "sflow_poll_interval_global": "yes", "lldp_admin": "txonly", "flow_control": "tx-rx", "mac_address": "52:54:00:04:b7:62", "media_sfp": "auto", "prefer_port": "sfp", "active_media_type": "none", "stp_link_type": "auto", "full_path": "1.0"}, {"if_index": 32, "name": "mgmt", "stp_auto_edge_port": "yes", "sflow_poll_interval": 0, "bundle_speed": "not-supported", "stp_enabled": "yes", "bundle": "not-supported", "mtu": 1500, "enabled": "yes", "sflow_poll_interval_global": "yes", "lldp_admin": "txonly", "flow_control": "tx-rx", "mac_address": "52:54:00:04:b7:62", "media_sfp": "auto", "prefer_port": "sfp", "active_media_type": "100TX-FD", "stp_link_type": "auto", "full_path": "mgmt"}], "https_monitors": [{"adaptive_sampling_timespan": 300, "adaptive_divergence_type": "relative", "interval": 5, "reverse": "no", "send_string": "GET /\\r\\n", "destination": "*:*", "adaptive_limit": 200, "time_until_up": 0, "up_interval": 0, "manual_resume": "no", "timeout": 16, "adaptive_divergence_value": 25, "adaptive": "no", "ip_dscp": 0, "transparent": "no", "full_path": "/Common/https", "name": "https"}, {"adaptive_sampling_timespan": 300, "adaptive_divergence_type": "relative", "interval": 5, "reverse": "no", "parent": "/Common/https", "send_string": "GET /\\r\\n", "destination": "*:443", "adaptive_limit": 200, "time_until_up": 0, "up_interval": 0, "manual_resume": "no", "timeout": 16, "adaptive_divergence_value": 25, "adaptive": "no", "ip_dscp": 0, "transparent": "no", "full_path": "/Common/https_443", "name": "https_443"}, {"adaptive_sampling_timespan": 300, "adaptive_divergence_type": "relative", "receive_string": "Server\\:", "reverse": "no", "parent": "/Common/https", "send_string": "HEAD / HTTP/1.0\\r\\n\\r\\n", "destination": "*:*", "adaptive_limit": 200, "interval": 5, "time_until_up": 0, "up_interval": 0, "manual_resume": "no", "timeout": 16, "adaptive_divergence_value": 25, "adaptive": "no", "ip_dscp": 0, "transparent": "no", "full_path": "/Common/https_head_f5", "name": "https_head_f5"}], "gtm_mx_pools": [], "vlans": [{"auto_lasthop": "default", "if_index": 112, "name": "internal", "failsafe_action": "failover-restart-tm", "interfaces": [{"tagged": "no", "name": "1.0", "full_path": "1.0"}], "sflow_poll_interval": 0, "failsafe_enabled": "no", "sflow_sampling_rate": 0, "mtu": 1500, "true_mac_address": "52:54:00:04:b7:62", "cmp_hash_algorithm": "default", "sflow_poll_interval_global": "yes", "learning_mode": "enable-forward", "tag": 4094, "source_check_enabled": "disabled", "sflow_sampling_rate_global": "yes", "full_path": "/Common/internal", "failsafe_timeout": 90}], "partitions": [{"default_route_domain": 0, "name": "Common", "full_path": "Common", "description": "Repository for system objects and shared objects."}], "queried": true, "route_domains": [{"name": "0", "connection_limit": 0, "strict": "yes", "vlans": ["/Common/http-tunnel", "/Common/socks-tunnel", "/Common/internal"], "id": 0, "full_path": "/Common/0"}], "server_ssl_profiles": [{"max_active_handshakes": "indefinite", "ca_file": "/Common/ca-bundle.crt", "chain": "none", "renegotiate_period": "indefinite", "sni_require": "no", "session_mirroring": "no", "ssl_c3d": "no", "mod_ssl_methods": "no", "allow_expired_crl": "no", "cache_timeout": 3600, "bypass_on_handshake_alert": "no", "ssl_forward_proxy_enabled": "no", "expire_cert_response_control": "drop", "secure_renegotiation": "request", "proxy_ssl_passthrough": "no", "handshake_timeout": "10", "c3d_cert_extension_includes": ["basic-constraints", "extended-key-usage", "key-usage", "subject-alternative-name"], "ssl_sign_hash": "any", "strict_resume": "no", "untrusted_cert_response_control": "drop", "renegotiation": "yes", "sni_default": "no", "mode": "yes", "generic_alert": "yes", "c3d_cert_lifespan": 24, "ciphers": "DEFAULT", "ssl_forward_proxy_bypass": "no", "key": "none", "unclean_shutdown": "yes", "retain_certificate": "yes", "name": "apm-default-serverssl", "alert_timeout": "indefinite", "peer_cert_mode": "require", "cert": "none", "renegotiate_size": "indefinite", "session_ticket": "no", "authentication_frequency": "once", "cache_size": 262144, "full_path": "/Common/apm-default-serverssl", "authenticate_depth": 9, "bypass_on_client_cert_fail": "no", "options": ["dont-insert-empty-fragments"], "proxy_ssl": "no"}, {"max_active_handshakes": "indefinite", "chain": "none", "renegotiate_period": "indefinite", "sni_require": "no", "session_mirroring": "no", "ssl_c3d": "no", "mod_ssl_methods": "no", "allow_expired_crl": "no", "cache_timeout": 3600, "bypass_on_handshake_alert": "no", "ssl_forward_proxy_enabled": "no", "expire_cert_response_control": "drop", "secure_renegotiation": "require-strict", "proxy_ssl_passthrough": "no", "handshake_timeout": "10", "c3d_cert_extension_includes": ["basic-constraints", "extended-key-usage", "key-usage", "subject-alternative-name"], "ssl_sign_hash": "any", "strict_resume": "no", "untrusted_cert_response_control": "drop", "renegotiation": "yes", "sni_default": "no", "mode": "yes", "generic_alert": "yes", "c3d_cert_lifespan": 24, "ciphers": "DHE-RSA-AES256-GCM-SHA384", "ssl_forward_proxy_bypass": "no", "key": "none", "unclean_shutdown": "yes", "retain_certificate": "yes", "name": "crypto-client-default-serverssl", "alert_timeout": "indefinite", "peer_cert_mode": "ignore", "cert": "none", "renegotiate_size": "indefinite", "session_ticket": "no", "authentication_frequency": "once", "cache_size": 0, "full_path": "/Common/crypto-client-default-serverssl", "authenticate_depth": 9, "bypass_on_client_cert_fail": "no", "options": ["dont-insert-empty-fragments"], "proxy_ssl": "no"}, {"max_active_handshakes": "indefinite", "chain": "none", "renegotiate_period": "indefinite", "sni_require": "no", "session_mirroring": "no", "ssl_c3d": "no", "mod_ssl_methods": "no", "allow_expired_crl": "no", "cache_timeout": 3600, "bypass_on_handshake_alert": "no", "ssl_forward_proxy_enabled": "no", "expire_cert_response_control": "drop", "server_name": "pcoip-default-sni", "secure_renegotiation": "require-strict", "proxy_ssl_passthrough": "no", "handshake_timeout": "10", "c3d_cert_extension_includes": ["basic-constraints", "extended-key-usage", "key-usage", "subject-alternative-name"], "ssl_sign_hash": "any", "strict_resume": "no", "untrusted_cert_response_control": "drop", "renegotiation": "yes", "sni_default": "no", "mode": "yes", "generic_alert": "yes", "c3d_cert_lifespan": 24, "ciphers": "DEFAULT", "ssl_forward_proxy_bypass": "no", "key": "none", "unclean_shutdown": "yes", "retain_certificate": "yes", "name": "pcoip-default-serverssl", "alert_timeout": "indefinite", "peer_cert_mode": "ignore", "cert": "none", "renegotiate_size": "indefinite", "session_ticket": "no", "authentication_frequency": "once", "cache_size": 262144, "full_path": "/Common/pcoip-default-serverssl", "authenticate_depth": 9, "bypass_on_client_cert_fail": "no", "options": ["dont-insert-empty-fragments"], "proxy_ssl": "no"}, {"max_active_handshakes": "indefinite", "chain": "none", "renegotiate_period": "indefinite", "sni_require": "no", "session_mirroring": "no", "ssl_c3d": "no", "mod_ssl_methods": "no", "allow_expired_crl": "no", "cache_timeout": 3600, "bypass_on_handshake_alert": "no", "ssl_forward_proxy_enabled": "no", "expire_cert_response_control": "drop", "secure_renegotiation": "require-strict", "proxy_ssl_passthrough": "no", "handshake_timeout": "10", "c3d_cert_extension_includes": ["basic-constraints", "extended-key-usage", "key-usage", "subject-alternative-name"], "ssl_sign_hash": "any", "strict_resume": "no", "untrusted_cert_response_control": "drop", "renegotiation": "yes", "sni_default": "no", "mode": "yes", "generic_alert": "yes", "c3d_cert_lifespan": 24, "ciphers": "DEFAULT", "ssl_forward_proxy_bypass": "no", "key": "none", "unclean_shutdown": "yes", "retain_certificate": "yes", "name": "serverssl", "alert_timeout": "indefinite", "peer_cert_mode": "ignore", "cert": "none", "renegotiate_size": "indefinite", "session_ticket": "no", "authentication_frequency": "once", "cache_size": 262144, "full_path": "/Common/serverssl", "authenticate_depth": 9, "bypass_on_client_cert_fail": "no", "options": ["dont-insert-empty-fragments"], "proxy_ssl": "no"}, {"max_active_handshakes": "indefinite", "chain": "none", "renegotiate_period": "indefinite", "sni_require": "no", "session_mirroring": "no", "ssl_c3d": "no", "mod_ssl_methods": "no", "allow_expired_crl": "no", "cache_timeout": 3600, "bypass_on_handshake_alert": "no", "ssl_forward_proxy_enabled": "no", "expire_cert_response_control": "drop", "secure_renegotiation": "request", "proxy_ssl_passthrough": "no", "handshake_timeout": "10", "c3d_cert_extension_includes": ["basic-constraints", "extended-key-usage", "key-usage", "subject-alternative-name"], "ssl_sign_hash": "any", "strict_resume": "no", "untrusted_cert_response_control": "drop", "renegotiation": "yes", "sni_default": "no", "mode": "yes", "generic_alert": "yes", "c3d_cert_lifespan": 24, "ciphers": "!EXPORT:!DH:RSA+RC4:RSA+AES:RSA+DES:RSA+3DES:ECDHE+AES:ECDHE+3DES:@SPEED", "ssl_forward_proxy_bypass": "no", "key": "none", "unclean_shutdown": "yes", "retain_certificate": "yes", "name": "serverssl-insecure-compatible", "alert_timeout": "indefinite", "peer_cert_mode": "ignore", "cert": "none", "renegotiate_size": "indefinite", "session_ticket": "no", "authentication_frequency": "once", "cache_size": 262144, "full_path": "/Common/serverssl-insecure-compatible", "authenticate_depth": 9, "bypass_on_client_cert_fail": "no", "options": ["dont-insert-empty-fragments"], "proxy_ssl": "no"}, {"max_active_handshakes": "indefinite", "chain": "none", "renegotiate_period": "indefinite", "sni_require": "no", "session_mirroring": "no", "ssl_c3d": "no", "mod_ssl_methods": "no", "allow_expired_crl": "no", "cache_timeout": 3600, "bypass_on_handshake_alert": "no", "ssl_forward_proxy_enabled": "no", "expire_cert_response_control": "drop", "secure_renegotiation": "require-strict", "proxy_ssl_passthrough": "no", "handshake_timeout": "10", "c3d_cert_extension_includes": ["basic-constraints", "extended-key-usage", "key-usage", "subject-alternative-name"], "ssl_sign_hash": "any", "strict_resume": "no", "untrusted_cert_response_control": "drop", "renegotiation": "yes", "sni_default": "no", "mode": "yes", "generic_alert": "yes", "c3d_cert_lifespan": 24, "ciphers": "DEFAULT", "ssl_forward_proxy_bypass": "no", "key": "/Common/default.key", "unclean_shutdown": "yes", "retain_certificate": "yes", "name": "splitsession-default-serverssl", "alert_timeout": "indefinite", "peer_cert_mode": "ignore", "cert": "/Common/default.crt", "renegotiate_size": "indefinite", "session_ticket": "no", "authentication_frequency": "once", "cache_size": 262144, "full_path": "/Common/splitsession-default-serverssl", "authenticate_depth": 9, "bypass_on_client_cert_fail": "no", "options": ["dont-insert-empty-fragments"], "proxy_ssl": "no"}, {"max_active_handshakes": "indefinite", "chain": "none", "renegotiate_period": "indefinite", "sni_require": "no", "session_mirroring": "no", "ssl_c3d": "no", "mod_ssl_methods": "no", "allow_expired_crl": "no", "cache_timeout": 3600, "bypass_on_handshake_alert": "no", "ssl_forward_proxy_enabled": "no", "expire_cert_response_control": "drop", "secure_renegotiation": "require-strict", "proxy_ssl_passthrough": "no", "handshake_timeout": "10", "c3d_cert_extension_includes": ["basic-constraints", "extended-key-usage", "key-usage", "subject-alternative-name"], "ssl_sign_hash": "any", "strict_resume": "no", "untrusted_cert_response_control": "drop", "renegotiation": "yes", "sni_default": "no", "mode": "no", "generic_alert": "yes", "c3d_cert_lifespan": 24, "ciphers": "DEFAULT", "ssl_forward_proxy_bypass": "no", "key": "/Common/default.key", "unclean_shutdown": "yes", "retain_certificate": "yes", "name": "wom-default-serverssl", "alert_timeout": "indefinite", "peer_cert_mode": "ignore", "cert": "/Common/default.crt", "renegotiate_size": "indefinite", "session_ticket": "no", "authentication_frequency": "once", "cache_size": 262144, "full_path": "/Common/wom-default-serverssl", "authenticate_depth": 9, "bypass_on_client_cert_fail": "no", "options": ["dont-insert-empty-fragments"], "proxy_ssl": "no"}], "gtm_srv_wide_ips": [], "fastl4_profiles": [{"receive_window": 0, "pva_dynamic_client_packets": 1, "tcp_handshake_timeout": 5, "hardware_syn_cookie": "no", "ttl_mode": "decrement", "priority_to_client": "pass-through", "pva_offload_state": "embryonic", "pva_dynamic_server_packets": 0, "ip_tos_to_client": "pass-through", "tcp_timestamp_mode": "preserve", "late_binding": "no", "loose_init": "no", "software_syn_cookie": "no", "dont_fragment_flag": "preserve", "tcp_close_timeout": 5, "tcp_window_scale_mode": "preserve", "server_timestamp": "no", "link_qos_to_server": "pass-through", "ttl_v6": 64, "ttl_v4": 255, "tcp_time_wait_timeout": 0, "pva_flow_aging": "yes", "mss_override": 0, "client_timeout": 30, "priority_to_server": "pass-through", "syn_cookie_whitelist": "no", "keep_alive_interval": 0, "parent": "/Common/fastL4", "pva_offload_dynamic": "yes", "idle_timeout": 7200, "reassemble_fragments": "no", "timeout_recovery": "disconnect", "syn_cookie_enabled": "yes", "generate_init_seq_number": "no", "server_sack": "no", "strip_sack": "no", "name": "apm-forwarding-fastL4", "pva_acceleration": "full", "reset_on_timeout": "yes", "rtt_from_client": "no", "rtt_from_server": "no", "explicit_flow_migration": "no", "pva_flow_evict": "yes", "ip_tos_to_server": "pass-through", "link_qos_to_client": "pass-through", "loose_close": "no", "full_path": "/Common/apm-forwarding-fastL4", "syn_cookie_mss": 0}, {"receive_window": 0, "pva_dynamic_client_packets": 1, "tcp_handshake_timeout": 5, "hardware_syn_cookie": "no", "ttl_mode": "decrement", "priority_to_client": "pass-through", "pva_offload_state": "embryonic", "pva_dynamic_server_packets": 0, "ip_tos_to_client": "pass-through", "tcp_timestamp_mode": "preserve", "late_binding": "no", "loose_init": "no", "software_syn_cookie": "no", "dont_fragment_flag": "preserve", "tcp_close_timeout": 5, "tcp_window_scale_mode": "preserve", "server_timestamp": "no", "link_qos_to_server": "pass-through", "ttl_v6": 64, "ttl_v4": 255, "tcp_time_wait_timeout": 0, "pva_flow_aging": "yes", "mss_override": 0, "client_timeout": 30, "priority_to_server": "pass-through", "syn_cookie_whitelist": "no", "keep_alive_interval": 0, "parent": "none", "pva_offload_dynamic": "yes", "idle_timeout": 300, "reassemble_fragments": "no", "timeout_recovery": "disconnect", "syn_cookie_enabled": "yes", "generate_init_seq_number": "no", "server_sack": "no", "strip_sack": "no", "name": "fastL4", "pva_acceleration": "full", "reset_on_timeout": "yes", "rtt_from_client": "no", "rtt_from_server": "no", "explicit_flow_migration": "no", "pva_flow_evict": "yes", "ip_tos_to_server": "pass-through", "link_qos_to_client": "pass-through", "loose_close": "no", "full_path": "/Common/fastL4", "syn_cookie_mss": 0}, {"receive_window": 0, "pva_dynamic_client_packets": 1, "tcp_handshake_timeout": 5, "hardware_syn_cookie": "no", "ttl_mode": "decrement", "priority_to_client": "pass-through", "pva_offload_state": "embryonic", "pva_dynamic_server_packets": 0, "ip_tos_to_client": "pass-through", "tcp_timestamp_mode": "preserve", "late_binding": "no", "loose_init": "no", "software_syn_cookie": "no", "dont_fragment_flag": "preserve", "tcp_close_timeout": 5, "tcp_window_scale_mode": "preserve", "server_timestamp": "no", "link_qos_to_server": "pass-through", "ttl_v6": 64, "ttl_v4": 255, "tcp_time_wait_timeout": 0, "pva_flow_aging": "yes", "mss_override": 0, "client_timeout": 30, "priority_to_server": "pass-through", "syn_cookie_whitelist": "no", "keep_alive_interval": 0, "parent": "/Common/fastL4", "pva_offload_dynamic": "yes", "idle_timeout": 300, "reassemble_fragments": "no", "timeout_recovery": "disconnect", "syn_cookie_enabled": "yes", "generate_init_seq_number": "no", "server_sack": "no", "strip_sack": "no", "name": "full-acceleration", "pva_acceleration": "full", "reset_on_timeout": "yes", "rtt_from_client": "no", "rtt_from_server": "no", "explicit_flow_migration": "no", "pva_flow_evict": "yes", "ip_tos_to_server": "pass-through", "link_qos_to_client": "pass-through", "loose_close": "no", "full_path": "/Common/full-acceleration", "syn_cookie_mss": 0}], "ssl_keys": [{"name": "default.key", "security_type": "normal", "key_type": "rsa-private", "key_size": 2048, "sha1_checksum": "5f783d16cd3ecd7ea1440a298430cb744ccd96f9", "system_path": "/config/ssl/ssl.key/default.key", "full_path": "/Common/default.key"}], "asm_signature_sets": [], "devices": [{"product": "BIG-IP", "marketing_name": "BIG-IP Virtual Edition", "name": "bigip1", "software_version": "13.1.0.4", "chassis_type": "individual", "failover_state": "active", "hostname": "bigip1", "chassis_id": "0d0f7dc5-51d3-7742-cca1aa7778bd", "self": "yes", "platform_id": "Z100", "edition": "Point Release 4", "build": "0.0.6", "base_mac_address": "52:54:00:04:b7:62", "timezone": "America/Los_Angeles", "multicast_address": "any6", "management_address": "192.168.122.63", "full_path": "/Common/bigip1"}], "gtm_naptr_wide_ips": [], "oneconnect_profiles": [{"idle_timeout_override": 0, "max_age": 86400, "name": "oneconnect", "parent": "none", "source_mask": "any", "limit_type": "none", "max_reuse": 1000, "max_size": 10000, "share_pools": "no", "full_path": "/Common/oneconnect"}], "gtm_srv_pools": [], "software_hotfixes": [], "iapplx_packages": [], "device_groups": [{"autosync_enabled": "yes", "incremental_config_sync_size_maximum": 1024, "name": "device_trust_group", "asm_sync_enabled": "no", "devices": ["/Common/bigip1"], "network_failover_enabled": "no", "type": "sync-only", "full_load_on_sync": "no", "full_path": "/Common/device_trust_group"}, {"autosync_enabled": "no", "incremental_config_sync_size_maximum": 1024, "name": "gtm", "asm_sync_enabled": "no", "devices": ["/Common/bigip1"], "network_failover_enabled": "no", "type": "sync-only", "full_load_on_sync": "no", "full_path": "/Common/gtm"}], "virtual_addresses": [], "ssl_certs": [{"last_update_time": "2018-03-14T03:06:50Z", "name": "ca-bundle.crt", "expiration_date": "Mar  4 16:16:37 2035 GMT", "is_bundle": "yes", "key_type": "rsa-public", "key_size": 2048, "create_time": "2018-03-14T03:06:50Z", "expiration_timestamp": 2056637797, "sha1_checksum": "40dfc3939bb3e4cd1eeb161ed095efc2ae5636df", "fingerprint": "SHA256/A4:34:AA:E4:E1:5A:55:19:E9:B1:11:FD:08:EC:19:0F:D2:AD:F1:3B:BE:30:81:5C:6E:16:06:55:5C:B3:14:50", "system_path": "/config/ssl/ssl.crt/ca-bundle.crt", "issuer": "CN=SwissSign Gold CA - G2,O=SwissSign AG,C=CH", "full_path": "/Common/ca-bundle.crt", "subject": "CN=SwissSign EV Gold CA 2014 - G22,O=SwissSign AG,C=CH"}, {"last_update_time": "2019-12-04T00:52:17Z", "name": "default.crt", "expiration_date": "Dec  1 00:52:17 2029 GMT", "is_bundle": "no", "key_type": "rsa-public", "key_size": 2048, "create_time": "2019-12-04T00:52:17Z", "expiration_timestamp": 1890780737, "sha1_checksum": "fdc32ad075022821edec809248b5e553bd282d62", "fingerprint": "SHA256/7E:20:FE:CE:76:4D:C5:11:CB:79:D5:D1:CB:E0:C5:99:21:24:19:44:8D:80:1F:A0:BD:BE:95:5B:FC:16:D8:D7", "system_path": "/config/ssl/ssl.crt/default.crt", "issuer": "emailAddress=root@localhost.localdomain,CN=localhost.localdomain,OU=IT,O=MyCompany,L=Seattle,ST=WA,C=US", "full_path": "/Common/default.crt", "subject": "emailAddress=root@localhost.localdomain,CN=localhost.localdomain,OU=IT,O=MyCompany,L=Seattle,ST=WA,C=US"}, {"last_update_time": "2018-03-14T01:58:02Z", "name": "f5-ca-bundle.crt", "expiration_date": "Dec  7 17:55:54 2030 GMT", "is_bundle": "no", "key_type": "rsa-public", "key_size": 2048, "create_time": "2018-03-14T01:58:02Z", "expiration_timestamp": 1922896554, "sha1_checksum": "0b3091b2d597dfb584d18b92d3f0b082d5913b34", "fingerprint": "SHA256/43:DF:57:74:B0:3E:7F:EF:5F:E4:0D:93:1A:7B:ED:F1:BB:2E:6B:42:73:8C:4E:6D:38:41:10:3D:3A:A7:F3:39", "system_path": "/config/ssl/ssl.crt/f5-ca-bundle.crt", "issuer": "CN=Entrust Root Certification Authority - G2,OU=(c) 2009 Entrust, Inc. - for authorized use only,OU=See www.entrust.net/legal-terms,O=Entrust, Inc.,C=US", "full_path": "/Common/f5-ca-bundle.crt", "subject": "CN=Entrust Root Certification Authority - G2,OU=(c) 2009 Entrust, Inc. - for authorized use only,OU=See www.entrust.net/legal-terms,O=Entrust, Inc.,C=US"}, {"last_update_time": "2018-03-14T01:58:02Z", "name": "f5-irule.crt", "expiration_date": "Aug 13 21:21:29 2031 GMT", "is_bundle": "no", "key_type": "rsa-public", "key_size": 2048, "create_time": "2018-03-14T01:58:02Z", "expiration_timestamp": 1944422489, "sha1_checksum": "1306e84e1e6a2da53816cefe1f684b80d6be1e3e", "fingerprint": "SHA256/88:A3:05:28:23:59:01:EA:5D:B0:26:79:ED:49:1C:7B:69:2B:22:12:93:14:6B:32:41:BF:44:E6:88:8D:C2:C0", "system_path": "/config/ssl/ssl.crt/f5-irule.crt", "issuer": "emailAddress=support@f5.com,CN=support.f5.com,OU=Product Development,O=F5 Networks,L=Seattle,ST=Washington,C=US", "full_path": "/Common/f5-irule.crt", "subject": "emailAddress=support@f5.com,CN=support.f5.com,OU=Product Development,O=F5 Networks,L=Seattle,ST=Washington,C=US"}], "gtm_servers": [], "system_info": {"product_changelist": 2516369, "marketing_name": "BIG-IP Virtual Edition", "chassis_serial": "0d0f7dc5-51d3-7742-cca1aa7778bd", "product_build_date": "Tue Mar 13 20:10:42 PDT 2018", "package_version": "Build 0.0.6 - Tue Mar 13 20:10:42 PDT 2018", "product_version": "13.1.0.4", "product_build": "0.0.6", "uptime": 8728.0, "platform": "Z100", "hardware_information": [{"model": "Intel Xeon E312xx (Sandy Bridge, IBRS update)", "type": "base-board", "name": "cpus", "versions": [{"version": "1", "name": "cpu stepping"}, {"version": "2", "name": "cpu sockets"}, {"version": "3411.126", "name": "cpu MHz"}, {"version": "2  (physical:2)", "name": "cores"}, {"version": "16384 KB", "name": "cache size"}]}, {"model": "QEMU HARDDISK", "type": "physical-disk", "name": "HD1", "versions": [{"version": "127.00G", "name": "Size"}, {"version": "2.5+", "name": "Firmware Version"}, {"version": "unavailable", "name": "Manufacturer"}, {"version": "QM00001", "name": "SerialNumber"}, {"version": "HDD", "name": "Media Type"}]}], "base_mac_address": "52:54:00:04:b7:62", "time": {"hour": 17, "month": 12, "second": 29, "year": 2019, "day": 10, "minute": 8}, "product_code": "BIG-IP", "package_edition": "Point Release 4", "product_built": 180313201042, "product_jobid": 987835}, "ansible_facts": {"discovered_interpreter_python": "/usr/bin/python"}, "deprecations": [{"msg": "Distribution fedora 29 on host localhost should use /usr/bin/python3, but is using /usr/bin/python for backward compatibility with prior Ansible releases. A future Ansible release will default to using the discovered platform python for this host. See https://docs.ansible.com/ansible/2.9/reference_appendices/interpreter_discovery.html for more information", "version": "2.12"}], "failed": false, "changed": false}